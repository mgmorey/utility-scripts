#!/bin/sh -eu

# uninstall-docker: uninstall Docker packages
# Copyright (C) 2018  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

abort() {
    printf "$@" >&2
    exit 1
}

abort_not_supported() {
    abort "%s: %s: %s not supported\n" "$0" "$PRETTY_NAME" "$*"
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$0" "$*"
}

get_docker_origin() {
    for package; do
	case $package in
	    (docker-ce|docker-ce-cli)
		origin=docker.com
		;;
	    (docker|docker.io)
		origin=native
		;;
	    (podman-docker)
		origin=podman
		;;
	esac

	if [ -n "${origin-}" ]; then
	    printf "%s\n" "$origin"
	    return
	fi
    done
}

get_realpath() (
    assert [ $# -ge 1 ]
    realpath=$(which realpath)

    if [ -n "$realpath" ]; then
	$realpath "$@"
    else
	for file; do
	    if expr "$file" : '/.*' >/dev/null; then
		printf "%s\n" "$file"
	    else
		printf "%s\n" "$PWD/${file#./}"
	    fi
	done
    fi
)

postuninstall_docker() {
    if [ -z "${SUDO_USER-}" ] || [ "$(id -u)" -gt 0 ]; then
	return 0
    fi

    group=$(get-docker-group "$@")

    if [ -n "$group" ]; then
	uninstall_group $group
    fi
}

uninstall_docker() {
    validate_platform
    packages=$(get-installed-docker-packages)
    origin=$(get_docker_origin $packages)

    if [ -n "$origin" ]; then
	case "$origin" in
	    (docker.com)
		printf "Docker Community Edition is installed.\n"
		;;
	    (native)
		printf "Native Docker is installed.\n"
		;;
	    (podman)
		printf "Podman is installed.\n"
		;;
	esac
    else
	printf "Docker is not installed.\n"
    fi

    if [ -n "$packages" ]; then
	if uninstall-packages $packages; then
	    postuninstall_docker $packages
	else
	    return $?
	fi
    fi
}

uninstall_group() {
    assert [ $# -eq 1 ]

    if getent group $1 >/dev/null; then
	groupdel $1
    fi
}

validate_platform() {
    case "$kernel_name" in
	(Linux|GNU)
	    case "$ID" in
		(debian|raspbian|ubuntu)
		    :
		    ;;
		(opensuse-*|rhel|ol|centos|fedora)
		    :
		    ;;
		(*)
		    abort_not_supported Distro
		    ;;
	    esac
	    ;;
	(Darwin)
	    :
	    ;;
	(FreeBSD)
	    :
	    ;;
	(NetBSD)
	    :
	    ;;
	(SunOS)
	    :
	    ;;
	(*)
	    abort_not_supported "Operating system"
	    ;;
    esac
}

script_dir=$(get_realpath "$(dirname "$0")")

. "$script_dir/common-functions.sh"

set_user_profile "$script_dir"
eval $(get-os-release -x)
uninstall_docker "$@"

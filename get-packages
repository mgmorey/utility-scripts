#!/bin/sh -eu

# get-packages: get package names
# Copyright (C) 2020  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

abort() {
    printf "$@" >&2
    exit 1
}

abort_not_supported() {
    abort "%s: %s: %s not supported\n" "$script" "$PRETTY_NAME" "$*"
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$script" "$*"
}

get_os_configuration() {
    "${script_prefix}get-os-configuration" -i $ID -l "$ID_LIKE" -v $VERSION_ID
}

get_packages() {
    configuration=$(get_os_configuration)

    if [ -n "$configuration" ] ; then
	eval $configuration

	for category in $categories; do
	    parameter=$(get_parameter "$category" "${suffix:-packages}")
	    eval packages=\${$parameter-}

	    if [ -n "$packages" ]; then
		printf '%s\n' $packages
	    fi
	done | sort -u
    fi
}

get_parameter() {
    printf "%s-%s\n" "$1" "$2" | tr '[:lower:]' '[:upper:]' | tr '-' '_'
}

get_realpath() (
    assert [ $# -ge 1 ]
    realpath=$(which realpath || true)

    if [ -n "$realpath" ]; then
	$realpath "$@"
    else
	for file; do
	    if expr "$file" : '/.*' >/dev/null; then
		printf '%s\n' "$file"
	    else
		printf '%s\n' "$PWD/${file#./}"
	    fi
	done
    fi
)

parse_arguments() {
    suffix=

    while getopts i:l:d:s:v:h opt; do
	case $opt in
	    (i)
		ID=$OPTARG
		;;
	    (l)
		ID_LIKE=$OPTARG
		;;
	    (s)
		suffix=$OPTARG
		;;
	    (v)
		VERSION_ID=$OPTARG
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -lt 1 ]; then
	usage_error "%s: Not enough arguments\n" "$script"
    fi

    categories="$@"
}

usage() {
    cat <<EOF >&2
Usage: $script [-i ID] [-l LIKE] [-s SUFFIX] [-v VERSION] CATEGORY [...]
       $script -h
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf '%s\n' '' >&2
    usage
    exit 2
}

script=$(basename "$0")

case "$0" in
    (*/*)
	script_dir=$(get_realpath "$(dirname "$0")")
	;;
    (*)
	script_dir=
	;;
esac

script_prefix=${script_dir:+$script_dir/}

eval $("${script_prefix}get-os-release" -x)
parse_arguments "$@"
get_packages

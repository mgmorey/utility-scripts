#!/bin/sh -eu

# refresh-virtualenv: install virtual environment dependencies
# Copyright (C) 2018  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

CATEGORIES="bootstrap development python-build"

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort '%s: Assertion failed: %s\n' "$script" "$*"
}

chown_real_user() {
    user_name=$(get_real_user)

    if [ -n "$user_name" ]; then
        user_id=$(get_user_id $user_name)
	group_id=$(get_group_id $user_name)
	chown "$user_id${group_id:+:$group_id}" "$@"
    fi
}

configure_platform() {
    case "${uname_kernel=$(uname -s)}" in
	(CYGWIN_NT-*)
	    pypi_utilities=pip
	    ;;
	(MINGW64_NT-*)
	    pypi_utilities=pip
	    ;;
	(*)
	    pypi_utilities=
	    ;;
    esac
}

get_packages() {
    "${script_prefix}get-packages" $CATEGORIES
}

install_dependencies() {
    case "${uname_kernel=$(uname -s)}" in
	(CYGWIN_NT-*)
	    return 0
	    ;;
	(MINGW64_NT-*)
	    return 0
	    ;;
    esac

    packages="$(get_packages | sort -u)"
    pattern="$(get-packages -s pattern development)"
    install-packages ${pattern:+-p "$pattern" }$packages

    if [ -n "${package:-}" ]; then
	install-build-deps "$@" $package || true
    fi
}

parse_arguments() {
    while getopts u:v:h opt; do
	case $opt in
	    (u)
		pypi_utilities=$OPTARG
		;;
	    (v)
		venv_utilities=$OPTARG
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))
}

refresh_via_pipenv() {
    assert [ $# -ge 1 ]
    assert [ -n "$1" ]
    pipenv=$1
    shift

    if ! $pipenv --venv >/dev/null 2>&1; then
	create_virtualenv_via_pipenv $pipenv
    fi

    # Lock dependencies (including development dependencies) and
    # generate Pipfile.lock
    $pipenv lock --dev
}

refresh_virtualenv() (
    for utility in ${pypi_utilities:-$PYPI_UTILITIES}; do
	case "$utility" in
	    (pipenv)
		pipenv=$(get_command pipenv || true)

		if [ -z "$pipenv" ]; then
		    continue
		fi

		if refresh_via_pipenv $pipenv; then
		    if generate_requirements $pipenv $PIP_INSTALL_ALL; then
			chown_real_user $PIP_INSTALL_ALL

			if $pipenv sync --dev; then
			    return 0
			fi
		    fi
		fi
		;;
	    (pip)
		pip_install_files=$PIP_INSTALL_ALL
		venv_force_sync=true

		if refresh_via_pip ${VENV_DIRECTORY-venv}; then
		    return 0
		fi
		;;
	esac
    done
)

usage() {
    cat <<EOF >&2
Usage: $script: [-u <PYPI-UTILITIES>] [-v <VENV-UTILITIES>]
       $script: -h
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf '%s\n' '' >&2
    usage
    exit 2
}

script=$(basename "$0")

case "$0" in
    (*/*)
	script_dir=$(cd "$(dirname "$0")" && pwd)
	;;
    (*)
	script_dir=
	;;
esac

script_prefix=${script_dir:+$script_dir/}

. "${script_prefix}common-functions.sh"
. "${script_prefix}utility-functions.sh"

export LANG=${LANG-en_US.UTF-8}
export LC_ALL=${LC_ALL-en_US.UTF-8}

if [ -n "${VIRTUAL_ENV:-}" ]; then
    abort "%s: Must not be run within a virtual environment\n" "$0"
fi

set_user_profile "$script_dir"
eval $(get-configuration app.ini)
eval $(get-os-release -x)
configure_platform
parse_arguments "$@"

if [ "$(id -u)" -eq 0 ]; then
    install_dependencies
    run_unpriv "$0"
else
    install_dependencies
    refresh_virtualenv
fi

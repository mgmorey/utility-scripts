#!/bin/sh -eu

# git-credential-helper: configure git credential helper
# Copyright (C) 2018  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

DEBIAN_PKGS="build-essential libglib2.0-dev libsecret-1-dev pkgconf"
GREP_RE='/git-credential-(gnome-keyring|libsecret|netrc|osxkeychain|wincred)(\.c|)$'

abort() {
    printf "$@" >&2
    exit 1
}

abort_too_many_arguments() {
    usage "%s: Too many arguments -- %s\n" "$0" "$*"
    exit 2
}

abort_not_supported() {
    abort "%s: %s: %s not supported\n" "$0" "$PRETTY_NAME" "$*"
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$0" "$*"
}

get_helper_binary() {
    egrep "$GREP_RE" | sed -e 's/.c$//g'
}

get_realpath() (
    assert [ $# -ge 1 ]
    realpath=$(which realpath)

    if [ -n "$realpath" ]; then
    	$realpath "$@"
    else
	for file; do
	    if expr "$file" : '/.*' >/dev/null; then
		printf "%s\n" "$file"
	    else
		printf "%s\n" "$PWD/${file#./}"
	    fi
	done
    fi
)

set_helper() {
    if [ -n "$1" ]; then
	case "$kernel_name" in
	    (Linux|GNU)
		case "$ID" in
		    (debian|raspbian|ubuntu|linuxmint|neon|kali)
			packages=$DEBIAN_PKGS
			;;
		esac
		;;
	    (*)
		packages=
		;;
	esac

	if [ -n "${packages-}" ]; then
	    "$script_dir/install-packages" $packages
	fi

	if [ "$1" != cache -a ! -x "$1" -a -r "$1.c" ]; then
	    cd $(dirname "$1") && make $(basename "$1")
	fi

	if [ "$1" = cache -o -x "$1" ]; then
	    $sh -c "git config --global credential.helper $1"
	else
	    abort "%s: No such executable file\n" "$1"
	fi
    else
	abort "No executable file\n"
    fi
}

parse_arguments() {
    is_query=false

    while getopts hq opt; do
	case $opt in
	    (h)
		usage
		exit 0
		;;
	    (q)
		is_query=true
		;;
	    (\?)
		printf "%s\n" "" >&2
		usage
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -gt 1 ]; then
	abort_too_many_arguments "$@"
    elif [ $# -gt 0 ]; then
	credential_helper=$1
    fi
}

query_available_helpers() {
    case "$kernel_name" in
	(Linux|GNU)
	    case "$ID" in
		(debian|raspbian|fedora|ubuntu|linuxmint|neon|kali)
		    package=git
		    ;;
		(opensuse-*)
		    package=git-credential-libsecret
		    ;;
		(fedora|rhel|ol|centos)
		    package=git
		    ;;
		(*)
		    abort_not_supported Distro
		    ;;
	    esac
	    ;;
	(CYGWIN_NT-*)
	    package=git
	    ;;
	(*)
	    abort_not_supported "Operating system"
	    ;;
    esac

    printf "# %s package %s:\n" "$PRETTY_NAME" $package

    case "$kernel_name" in
	(Linux|GNU)
	    get-package-filenames $package | get_helper_binary
	    ;;
	(CYGWIN_NT-*)
	    printf "%s\n" /usr/libexec/git-core/git-credential-manager
	    ;;
    esac
}

query_configured_helper() {
    $sh -c "git config --global --get credential.helper"
}

usage() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
	printf "%s\n" "" >&2
    fi

    cat <<-EOF >&2
	Usage: $0
	       $0 CREDENTIAL_HELPER
	       $0 -h
	       $0 -q
	EOF
}

script_dir=$(get_realpath "$(dirname "$0")")

eval $("$script_dir/get-os-release" -x)

if [ "$(id -u)" -eq 0 ]; then
    sh="su $SUDO_USER"
else
    sh="sh"
fi

parse_arguments "$@"

if [ $is_query = true ]; then
    query_available_helpers
elif [ -n "${credential_helper-}" ]; then
    set_helper "$credential_helper"
else
    query_configured_helper
fi

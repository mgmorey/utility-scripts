#!/bin/sh -eu

# remove-docker-volume-devices: remove Docker volume devices
# Copyright (C) 2021  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

VOLUME_GID=500
VOLUME_UID=500

VOLUME_HOME=/local/volumes

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$script" "$*"
}

configure_platform() {
    case "${uname_kernel=$(uname -s)}" in
	(FreeBSD)
	    pw=pw
	    ;;
	(*)
	    pw=
	    ;;
    esac
}

get_length() {
    printf '%s\n' "${1-}" | wc -c
}

get_volume_gid() {
    if [ -n "${1-}" ]; then
	getent passwd $1 | cut -d: -f 4
    fi
}

get_volume_group() {
    if [ -n "${1-}" ]; then
	getent group $1 | cut -d: -f 1
    fi
}

get_volume_home() {
    if [ -n "${1-}" ]; then
	getent passwd $1 | cut -d: -f 6
    fi
}

get_volume_user() {
    if [ -n "${1-}" ]; then
	getent passwd $1 | cut -d: -f 1
    fi
}

is_valid_name() {
    expr "${1-}" : '[a-z][0-9_a-z-]*$' >/dev/null
}

parse_arguments() {
    keep_files=false
    volume_home=
    volume_user=

    while getopts d:kn:h opt; do
	case $opt in
	    (d)
		volume_home=$OPTARG
		;;
	    (k)
		keep_files=true
		;;
	    (n)
		parse_volume_user "$OPTARG"
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -gt 0 ]; then
	usage_error "%s: Too many arguments\n" "$script"
    fi
}

parse_volume_user() {
    if is_valid_name "$1" && [ "$(get_length "$1")" -le 16 ]; then
	volume_user="$1"
    else
	usage_error "%s: %s: Invalid user name\n" "$script" "$1"
    fi
}

print_volume_group_args() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]

    case "${uname_kernel=$(uname -s)}" in
	(FreeBSD)
	    printf '%s\n' \
		   -n "$1"
	    ;;
	(*)
	    printf '%s\n' \
		   "$1"
	    ;;
    esac
}

print_volume_user_args() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]

    case "${uname_kernel=$(uname -s)}" in
	(FreeBSD)
	    printf '%s\n' \
		   -n "$1"
	    ;;
	(*)
	    printf '%s\n' \
		   "$1"
	    ;;
    esac
}

remove_docker_volume_devices() {
    validate_platform
    configure_platform

    if [ -z "$volume_user" ]; then
	volume_user=$(get_volume_user $VOLUME_UID)
    fi

    volume_gid=$(get_volume_gid $volume_user)

    if [ -z "$volume_gid" ]; then
	volume_gid=$VOLUME_GID
    fi

    volume_group=$(get_volume_group $volume_gid)
    volume_home=$(get_volume_home $VOLUME_UID)

    if [ -z "$volume_home" ]; then
	volume_home=$VOLUME_HOME
    fi

    remove_volume_user $volume_user
    remove_volume_group $volume_group

    if [ "$keep_files" = false ]; then
	/bin/rm -rf ${volume_home-$VOLUME_HOME}
    fi
}

remove_volume_group() {
    if [ -n "${1-}" ]; then
	volume_group_args=$(print_volume_group_args "$1")
	${pw:+pw }groupdel $volume_group_args
    fi
}

remove_volume_user() {
    if [ -n "${1-}" ]; then
	volume_user_args=$(print_volume_user_args "$1")
	${pw:+pw }userdel $volume_user_args
    fi
}

usage() {
    cat <<EOF >&2
Usage: $script [-d VOLUME-HOME] [-k] [-n VOLUME-USER]
       $script -h

Remove Docker volume account and device directories.

  -d VOLUME-HOME  use VOLUME-HOME as the account home directory
		  (default value is $VOLUME_HOME)
  -h              print this help text (all other options are ignored)
  -k              keep account home directory and files
  -n VOLUME-USER  use VOLUME-USER as the account name
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf '%s\n' '' >&2
    usage
    exit 2
}

validate_platform() {
    case "${uname_kernel=$(uname -s)}" in
	(FreeBSD)
	    true
	    ;;
	(Linux)
	    true
	    ;;
	(*)
	    abort '%s: %s: Operating system not supported\n' \
	    	  "$script" \
		  "$uname_kernel"
	    ;;
    esac
}

script=$(basename "$0")
parse_arguments "$@"
remove_docker_volume_devices

#!/bin/sh -eu

# install-docker: install Oracle VirtualBox Guest Additions dependencies
# Copyright (C) 2018  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

DEBIAN_PKGS="build-essential dkms linux-headers-$(uname -r)"

FEDORA_PKGS="bzip2 dkms gcc kernel-headers kernel-devel make perl"

REDHAT_PKGS="bzip2 dkms gcc kernel-headers kernel-devel make perl"

VBOX_DIR=VBox_GAs_6.*
VBOX_FILE=VBoxLinuxAdditions.run

abort() {
    printf "$@" >&2
    exit 1
}

abort_not_supported() {
    abort "%s: %s: %s not supported\n" "$0" "$PRETTY_NAME" "$*"
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$0" "$*"
}

configure_platform() {
    case "$kernel_name" in
	(Linux|GNU)
	    case "$ID" in
		(debian|raspbian|ubuntu|neon|linuxmint|kali)
		    cdrom_dev=/dev/cdrom
		    mount_dir=/media/cdrom0
		    packages=$DEBIAN_PKGS
		    ;;
		(fedora)
		    cdrom_dev=/dev/cdrom
		    mount_dir=/run/media/${SUDO_USER-USER}/$VBOX_DIR
		    packages=$FEDORA_PKGS
		    ;;
		(rhel|ol|centos)
		    export KERN_DIR=/usr/src/kernels/`uname -r`
		    cdrom_dev=/dev/cdrom
		    mount_dir=/run/media/${SUDO_USER-USER}/$VBOX_DIR
		    packages=$REDHAT_PKGS
		    ;;
	    esac
	    ;;
    esac
}

get_package_directory() {
    ls -drv $mount_dir 2>/dev/null | head -n 1
}

get_realpath() (
    assert [ $# -ge 1 ]
    realpath=$(which realpath)

    if [ -n "$realpath" ]; then
	$realpath "$@"
    else
	for file; do
	    if expr "$file" : '/.*' >/dev/null; then
		printf "%s\n" "$file"
	    else
		printf "%s\n" "$PWD/${file#./}"
	    fi
	done
    fi
)

install_kernel_packages() {
    "$script_dir/install-packages" $packages
}

install_prerequisites() {
    case "$kernel_name" in
	(Linux|GNU)
	    case "$ID" in
		(rhel|ol|centos)
		    "$script_dir/install-epel"
		    ;;
	    esac
	    ;;
    esac
}

install_virtualbox_guest() {
    validate_platform
    configure_platform
    preinstall_virtualbox_guest

    until mount_package_directory; do
	printf "Insert VirtualBox Guest Additions CD-ROM and press Enter: "
	read INPUT
    done

    install_virtualbox_package
}

install_virtualbox_package() {
    sh $VBOX_FILE
}

mount_package_directory() {
    package_dir=$(get_package_directory)

    if [ ! -r $package_dir/$VBOX_FILE ]; then
	if ! mount -r $cdrom_dev $package_dir 2>/dev/null; then
	    return 1
	fi
    fi

    cd $package_dir
    return 0
}

preinstall_virtualbox_guest() {
    install_prerequisites
    update_kernel_packages
    install_kernel_packages
}

update_kernel_packages() {
    case "$kernel_name" in
	(Linux)
	    case "$ID" in
		(rhel|ol|centos)
		    update_redhat_kernel_packages
		    ;;
	    esac
	    ;;
    esac
}

update_redhat_kernel_packages() {
    manager=$("$script_dir/get-package-managers" | awk 'NR == 1 {print $0}')

    if ! $manager update 'kernel*'; then
	exit $?
    fi

    trap "printf '\n'; exit 0" INT QUIT
    printf "Please reboot the machine with the new kernel (if updated).\n"
}

validate_platform() {
    case "$kernel_name" in
	(Linux)
	    case "$ID" in
		(debian|raspbian|ubuntu|neon|linuxmint|kali)
		    :
		    ;;
		(ol)
		    case "$VERSION_ID" in
			(7.*)
			    :
			    ;;
			(8.*)
			    :
			    ;;
			(*)
			    abort_not_supported Release
			    ;;
		    esac
		    ;;
		(fedora)
		    case "$VERSION_ID" in
			(30)
			    :
			    ;;
			(31)
			    :
			    ;;
			(*)
			    abort_not_supported Release
			    ;;
		    esac
		    ;;
		(rhel|ol|centos)
		    case "$VERSION_ID" in
			(7|7.[78])
			    :
			    ;;
			(8|8.[01])
			    :
			    ;;
			(*)
			    abort_not_supported Release
			    ;;
		    esac
		    ;;
		(*)
		    abort_not_supported Distro
		    ;;
	    esac
	    ;;
	(*)
	    abort_not_supported "Operating system"
	    ;;
    esac

    vendor=$(lscpu | "$script_dir/get-hypervisor-vendor")

    case "$vendor" in
	(KVM)
	    :
	    ;;
	('')
	    exit 0
	    ;;
	(*)
	    abort "%s: %s hypervisor not supported\n" "$0" "$vendor"
	    ;;
    esac
}

if [ $# -gt 0 ]; then
    abort "%s: Too many arguments\n" "$0"
fi

script_dir=$(get_realpath "$(dirname "$0")")

eval $("$script_dir/get-os-release" -x)

install_virtualbox_guest

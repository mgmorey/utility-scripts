#!/bin/sh -eu

# install-virtualbox-guest-additions: install Oracle VirtualBox Guest Additions
# Copyright (C) 2018  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

DEBIAN_PKGS="bzip2 dkms gcc linux-headers-$(uname -r) make perl"

FEDORA_PKGS="bzip2 dkms gcc kernel-headers kernel-devel make perl"

OPENSUSE_PKGS="bzip2 dkms gcc kernel-devel make perl"

REDHAT_PKGS="bzip2 dkms gcc kernel-headers kernel-devel make perl"

VBOX_PATTERN=VBox_GAs_*.*

abort() {
    printf "$@" >&2
    exit 1
}

abort_not_supported() {
    abort '%s: %s: %s not supported\n' "$0" "$PRETTY_NAME" "$*"
}

assert() {
    "$@" || abort '%s: Assertion failed: %s\n' "$0" "$*"
}

configure_platform() {
    case "$kernel_name" in
	(Linux|GNU)
	    payload=VBoxLinuxAdditions.run
	    vbox_dir=$VBOX_PATTERN

	    case "$ID" in
		(debian)
		    cdrom_dev=/dev/cdrom
		    mount_dir=/media/cdrom0
		    packages=$DEBIAN_PKGS
		    ;;
		(fedora)
		    cdrom_dev=/dev/cdrom
		    mount_dir=/run/media/${SUDO_USER-USER}/$vbox_dir
		    packages=$FEDORA_PKGS
		    ;;
		(opensuse-*)
		    cdrom_dev=/dev/cdrom
		    mount_dir=/run/media/${SUDO_USER-USER}/$vbox_dir
		    packages=$OPENSUSE_PKGS
		    ;;
		(rhel|ol|centos)
		    export KERN_DIR=/usr/src/kernels/`uname -r`
		    cdrom_dev=/dev/cdrom
		    mount_dir=/run/media/${SUDO_USER-USER}/$vbox_dir
		    packages=$REDHAT_PKGS
		    ;;
		(ubuntu)
		    cdrom_dev=/dev/cdrom
		    mount_dir=/media/$(get_real_user)
		    packages=$DEBIAN_PKGS
		    ;;
	    esac
	    ;;
	(SunOS)
	    mount_dir=/cdrom/vboxadditions_6.*
	    payload=VBoxSolarisAdditions.pkg
	    ;;
    esac
}

get_awk_command() {
    case "$kernel_name" in
	(SunOS)
	    printf "%s" /usr/gnu/bin/awk
	    ;;
	(*)
	    printf "%s" /usr/bin/awk
	    ;;
    esac
}

get_hypervisor_vendor() (
    awk="$(get_awk_command)"
    (lscpu 2>/dev/null | $awk -f "${script_prefix}get-hypervisor-vendor")
)

get_package_directory() {
    ls -drv $mount_dir 2>/dev/null | head -n 1
}

install_kernel_packages() {
    if [ -n "${packages-}" ]; then
	"${script_prefix}install-packages" $packages
    fi
}

install_prerequisites() {
    case "$kernel_name" in
	(Linux|GNU)
	    case "$ID" in
		(rhel|ol|centos)
		    "${script_prefix}install-epel"
		    ;;
	    esac
	    ;;
    esac
}

install_virtualbox_guest() {
    validate_platform
    configure_platform
    preinstall_virtualbox_guest

    if [ "$kernel_name" != SunOS ]; then
	until mount_package_directory; do
	    printf 'Insert VirtualBox Guest Additions CD-ROM and press Enter: '
	    read INPUT
	done
    else
	package_dir=$(get_package_directory)
    fi

    install_virtualbox_package
}

install_virtualbox_package() {
    cd $package_dir

    case "$kernel_name" in
	(Linux|GNU)
	    sh $payload
	    ;;
	(SunOS)
	    pkgrm SUNWvboxguest
	    pkgadd -G -d $payload
	    ;;
    esac
}

mount_package_directory() {
    package_dir=$(get_package_directory)

    if [ -r $package_dir/$payload ]; then
	return 0
    elif [ -z "${cdrom_dev-}" ]; then
	return 1
    elif mount -r $cdrom_dev $package_dir 2>/dev/null; then
	return 0
    else
	return 1
    fi
}

preinstall_virtualbox_guest() {
    install_prerequisites
    update_kernel_packages
    install_kernel_packages
}

update_kernel_packages() {
    case "$kernel_name" in
	(Linux)
	    case "$ID" in
		(centos)
		    update_redhat_kernel_packages
		    ;;
		(fedora)
		    update_redhat_kernel_packages
		    ;;
		(rhel|ol)
		    update_redhat_kernel_packages
		    ;;
	    esac
	    ;;
    esac
}

update_redhat_kernel_packages() {
    manager=$("${script_prefix}get-package-managers" | awk 'NR == 1 {print $0}')

    if ! $manager update 'kernel*'; then
	exit $?
    fi

    trap "printf '\n'; exit 0" INT QUIT
    printf 'Please reboot the machine with the new kernel (if updated).\n'
}

usage_error() {
    printf "$@" >&2
    exit 2
}

validate_platform() {
    case "$kernel_name" in
	(Linux)
	    case "$ID" in
		(centos)
		    case "$VERSION_ID" in
			(7)
			    true
			    ;;
			(8)
			    true
			    ;;
			(*)
			    abort_not_supported Release
			    ;;
		    esac
		    ;;
		(debian|raspbian|ubuntu)
		    true
		    ;;
		(fedora)
		    case "$VERSION_ID" in
			(32)
			    true
			    ;;
			(*)
			    abort_not_supported Release
			    ;;
		    esac
		    ;;
		(opensuse-*)
		    true
		    ;;
		(rhel|ol)
		    case "$VERSION_ID" in
			(7.*)
			    true
			    ;;
			(8.*)
			    true
			    ;;
			(*)
			    abort_not_supported Release
			    ;;
		    esac
		    ;;
		(*)
		    abort_not_supported Distro
		    ;;
	    esac
	    ;;
	(SunOS)
	    true
	    ;;
	(*)
	    abort_not_supported "Operating system"
	    ;;
    esac

    vendor=$(get_hypervisor_vendor || true)

    case "$vendor" in
	(KVM)
	    true
	    ;;
	('')
	    true
	    ;;
	(*)
	    abort '%s: %s hypervisor not supported\n' "$0" "$vendor"
	    ;;
    esac
}

if [ $# -gt 0 ]; then
    usage_error '%s: Too many arguments\n' "$0"
fi

case "$0" in
    (*/*)
	script_dir=$(cd "$(dirname "$0")" && pwd)
	;;
    (*)
	script_dir=
	;;
esac

script_prefix=${script_dir:+$script_dir/}

. "${script_prefix}common-functions.sh"

eval $("${script_prefix}get-os-release" -x)
install_virtualbox_guest

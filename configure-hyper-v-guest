#!/bin/sh -eu

# configure-hyper-v-guest: configure Hyper-V guest resolution
# Copyright (C) 2020  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

GRUB_COMMANDS="grub2-mkconfig grubby update-grub false"
GRUB_CONFIG=/etc/default/grub
KERNEL_ARG=video=hyperv_fb:1920x1080
KERNEL_VAR=GRUB_CMDLINE_LINUX_DEFAULT
SED_FORMAT='s/\\(%s\\)="\\(.*\\)"/\\1="\\2 %s"/'

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$0" "$*"
}

configure_grub() {
    if [ -z "$1" -o ! -e "$1" ]; then
	return 0
    fi

    if [ -w "$1" ]; then
        options=-i
    elif [ -r "$1" ]; then
        options=
    fi

    if ! grep $KERNEL_ARG "$1"; then
	sed ${options:+$options }"$(get_sed_expr $KERNEL_ARG)" "$1"
    fi
}

configure_hyper_v_guest() {
    configure_platform
    update=$(get_grub_update_command)
    config=$(get_grub_config_file $update)

    if configure_grub "$config"; then
	update_grub $update
    fi
}

configure_platform() {
    vendor=$(get_hypervisor_vendor || true)

    case "$vendor" in
        (Microsoft)
            true
            ;;
        ('')
            abort "%s: No hypervisor detected\n" "$0"
            ;;
        (*)
            abort "%s: %s hypervisor not supported\n" "$0" "$vendor"
            ;;
    esac
}

get_awk_command() {
    case "$kernel_name" in
        (SunOS)
            printf "%s" /usr/gnu/bin/awk
            ;;
        (*)
            printf "%s" /usr/bin/awk
            ;;
    esac
}

get_grub_config_file() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]

    case "$1" in
	(grubby)
            true
	    ;;
	(grub2-mkconfig)
            printf "%s\n" "$GRUB_CONFIG"
	    ;;
	(update-grub)
            printf "%s\n" "$GRUB_CONFIG"
	    ;;
    esac
}

get_grub_update_command() {
    for command in $GRUB_COMMANDS; do
	if which $command >/dev/null 2>&1; then
            printf "%s\n" "$command"
	    break
	fi
    done
}

get_grub_update_options() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]

    case "$1" in
	(grubby)
            printf "%s\n" --update-kernel=ALL --args="$KERNEL_ARG"
	    ;;
	(grub2-mkconfig)
            printf "%s\n" -o /boot/grub2/grub.cfg
	    ;;
	(update-grub)
            true
	    ;;
    esac
}

get_hypervisor_vendor() (
    awk="$(get_awk_command)"
    (lscpu 2>/dev/null | $awk -f "${script_prefix}get-hypervisor-vendor")
)

get_realpath() (
    assert [ $# -ge 1 ]
    realpath=$(which realpath)

    if [ -n "$realpath" ]; then
        $realpath "$@"
    else
        for file; do
            if expr "$file" : '/.*' >/dev/null; then
                printf "%s\n" "$file"
            else
                printf "%s\n" "$PWD/${file#./}"
            fi
        done
    fi
)

get_sed_expr() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    printf "$SED_FORMAT\n" "$KERNEL_VAR" "$1"
}

update_grub() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    $1 $(get_grub_update_options $1)
}

case "$0" in
    (*/*)
        script_dir=$(get_realpath "$(dirname "$0")")
        ;;
    (*)
        script_dir=
        ;;
esac

script_prefix=${script_dir:+$script_dir/}

eval $("${script_prefix}get-os-release" -X)
configure_hyper_v_guest

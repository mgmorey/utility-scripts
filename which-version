#!/bin/sh -eu

# which-version: print full pathname and version of command
# Copyright (C) 2021  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort '%s: Assertion failed: %s\n' "$script" "$*"
}

get_filenames() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    filenames=$(/usr/bin/which -a "$1" | quote_lines)

    if [ -n "$filenames" ]; then
	eval $realpath $filenames | remove_duplicate_lines
    fi
}

get_md5sum() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    md5sum "$1" | awk '{print $1}'
}

get_realpath() (
    for file; do
	if expr "$file" : '/.*' >/dev/null; then
	    printf '%s\n' "$file"
	else
	    printf '%s\n' "$PWD/${file#./}"
	fi
    done
)

get_version() {
    assert [ $# -eq 3 ]
    assert [ -n "$1" ]
    assert [ -n "$2" ]
    assert [ -n "$3" ]
    command="$1"
    filename="$2"
    option="$3"

    if string=$(get_version_string "$filename" "$option"); then
	get_version_regexp "$command" | quote_metachars | while read re; do
	    if version=$(expr "$string" : "$re"); then
		printf '%s\n' "$version"
		break
	    fi
	done
    fi
}

get_version_option() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    "$script_prefix$script.awk" \
	command=$(basename "$1") \
	"$script_prefix$script-option.txt"
}

get_version_regexp() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    "$script_prefix$script.awk" \
	command=$(basename "$1") \
	"$script_prefix$script-regexp.txt"
}

get_version_string() {
    assert [ $# -eq 2 ]
    assert [ -n "$1" ]
    assert [ -n "$2" ]

    if [ -x "$1" ]; then
	"$1" "$2" 2>&1
    fi
}

parse_arguments() {
    checksum=false

    while getopts ch opt; do
	case $opt in
	    (c)
		checksum=true
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -lt 1 ]; then
	usage_error '%s: Not enough arguments\n' "$0"
    fi

    if [ $# -gt 1 ]; then
	usage_error '%s: Too many arguments\n' "$script"
    fi

    command="$1"
}

quote_lines() {
    sed 's/^\(.*\)$/"\1"/'
}

quote_metachars() {
    sed 's/\([\\\$]\)/\\\1/g'
}

remove_duplicate_lines() {
    if [ "$ID" = windows ]; then
	awk '!_[tolower($0)]++'
    else
	awk '!_[$0]++'
    fi
}

usage() {
    cat <<EOF >&2
Usage: $script [-c] COMMAND

Print command path and version.
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf '%s\n' '' >&2
    usage
    exit 2
}

which_version() {
    if [ -x /bin/realpath ]; then
	realpath=/bin/realpath
    else
	realpath=get_realpath
    fi

    if ! option=$(get_version_option "$command") || [ -z "$option" ]; then
	abort '%s: %s: Not supported\n' "$script" "$command"
    fi

    get_filenames "$command" | while read filename; do
	if version=$(get_version "$command" "$filename" "$option"); then
	    if [ "$checksum" = true ]; then
		md5sum=$(get_md5sum "$filename")
		printf '%s:%s:%s\n' "$md5sum" "$version" "$filename"
	    else
		printf '%s:%s\n' "$version" "$filename"
	    fi
	else
	    printf '%s: %s: No version available\n' "$script" "$filename" >&2
	fi
    done
}

script=$(basename "$0")

case "$0" in
    (*/*)
	script_dir=$(cd "$(dirname "$0")" && pwd)
	;;
    (*)
	script_dir=
	;;
esac

script_prefix=${script_dir:+$script_dir/}

eval $("${script_prefix}get-os-release" -x)
parse_arguments "$@"
which_version

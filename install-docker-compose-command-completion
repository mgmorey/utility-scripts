#!/bin/sh -eu

# install-docker-compose-command-completion: install Docker Compose
# command completion from GitHub
# Copyright (C) 2021  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

BASE_URL=https://raw.githubusercontent.com/docker/compose

FILENAME=docker-compose

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$script" "$*"
}

clean_up() {
    eval rm -f ${tmpfiles-}
}

create_file() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    create_tmpfile $(get_mktemp_options "$(dirname "$1")" "$(basename "$1")")
}

create_tmpfile() {
    tmpfile=$(mktemp "$@")
    assert [ -n "${tmpfile}" ]
    tmpfiles="${tmpfiles+$tmpfiles }'$tmpfile'"
}

download_file() {
    curl_options=$(get_curl_options)
    url=$(get_url)

    if [ $silent = false ]; then
	printf 'Downloading from %s\n' $(dirname $url)
	print_newline
    fi

    if ! curl $curl_options "$url" -o "$1" || [ ! -s "$1" ]; then
	print_newline
	return 1
    fi
}

get_compose_file() {
    printf '/%s/%s/%s\n' \
	   etc \
	   bash_completion.d \
	   $FILENAME
}

get_curl_options() {
    printf '%s\n' -L -f

    if [ "$bar" = true ]; then
	printf '%s\n' -#
    elif [ $silent = true ]; then
	printf '%s\n' -s
    fi
}

get_file_version_number() {
    assert [ $# -eq 1 ]

    if [ -n "$1" -a -x "$1" ]; then
	get_version_number "$(get_file_version_string "$1")"
    fi
}

get_file_version_string() {
    assert [ $# -eq 1 ]

    if [ -n "$1" -a -x "$1" ]; then
	get_version_string "$1"
    fi
}

get_mktemp_options() {
    assert [ $# -eq 2 ]
    assert [ -n "$1" ]
    assert [ -n "$2" ]

    case "$platform" in
	(Darwin)
	    true
	    ;;
	(*)
	    printf '%s\n' -p "$1"
	    ;;
    esac

    printf '%s\n' -t "${2%${filetype+.$filetype}}-XXXXXXXXXX.tmp"
}

get_platform() {
    uname_kernel=$(uname -s)

    case "$uname_kernel" in
	(CYGWIN_NT-*)
	    printf '%s\n' Windows
	    ;;
	(MINGW64_NT-*)
	    printf '%s\n' Windows
	    ;;
	(*)
	    printf '%s\n' $uname_kernel
	    ;;
    esac
}

get_target_mode() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]

    case "$1" in
	(*)
	    printf '%s\n' u=rw,go=r
	    ;;
    esac
}

get_version_number() {
    expr "${1-}" : 'docker-compose version \([1-9][0-9]*\(\.[0-9][0-9]*\)*\)'
}

get_version_string() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]

    if [ -n "$1" -a -x "$1" ]; then
	"$1" --version || true
    fi
}

get_url() {
    printf '%s/%s/%s/%s/%s/%s\n' \
	   $BASE_URL \
	   $compose_version \
	   contrib \
	   completion \
	   bash \
	   $FILENAME
}

install_command_completion() {
    target_file=$(get_compose_file)
    target_dir=$(dirname "$target_file")

    if [ ! -d "$target_dir" ]; then
	abort "%s: %s: No such directory\n" "$script" "$target_dir"
    fi

    target_status=unchanged
    eval ${action}_completion
}

install_completion() {
    platform=$(get_platform)
    compose_filename="$(which ${prefix:+$prefix/bin/}$FILENAME)"

    if [ -z "$compose_filename" ]; then
	abort '%s: Docker Compose is not installed\n' "$script"
    fi

    compose_version=$(get_file_version_number "$compose_filename")
    target_mode=$(get_target_mode "$target_file")

    if [ $force = true -o ! -f "$target_file" ]; then
	create_file "$target_file"

	if download_file "$tmpfile"; then
	    install_file "$tmpfile" "$target_file"
	fi
    elif [ $silent = false ]; then
	printf 'Installed as %s\n' "$target_file"
    fi

    print_summary
}

install_file() {
    assert [ $# -eq 2 ]
    assert [ -n "$1" ]
    assert [ -n "$2" ]

    if [ $silent = false ]; then
	print_newline
	printf 'Installing %s as %s\n' \
	       "Docker Compose Command Completion" \
	       "$2"
    fi

    if [ -n "$target_mode" ]; then
	chmod $target_mode "$1"
    fi

    if /bin/mv -f "$1" "$2"; then
	target_status=installed
    fi
}

parse_arguments() {
    action=install
    bar=false
    force=false
    prefix=
    silent=false

    while getopts bfp:qsuh opt; do
	case $opt in
	    (b)
		bar=true
		;;
	    (f)
		force=true
		;;
	    (p)
		parse_prefix "$OPTARG"
		;;
	    (q)
		action=query
		;;
	    (s)
		silent=true
		;;
	    (u)
		action=uninstall
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -gt 0 ]; then
	usage_error "%s: Too many arguments\n" "$script"
    fi
}

parse_prefix() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]

    if [ -x "$prefix/bin/$FILENAME" ]; then
	prefix="$1"
    else
	usage_error "%s: %s: Invalid prefix\n" "$script" "$1"
    fi
}

print_newline() {
    if [ $silent = false ]; then
	printf '%s\n' ''
    fi
}

print_status() {
    status=$target_status

    if [ -f "$target_file" ]; then
	printf '%s%s\n' "$target_file" "${status:+ ($status)}"
    else
	printf '%s: %s\n' "$target_file" "Not installed"
    fi

}

print_summary() {
    if [ $silent = true ]; then
	return 0
    fi

    if [ $action != query ]; then
	print_newline
    fi

    printf '%s\n' 'Installation Summary:'
    print_newline

    print_status "$target_file"
}

query_completion() {
    print_summary
}

uninstall_completion() {
    uninstall_file "$target_file"
}

uninstall_file() {
    if [ $silent = false ]; then
	printf 'Uninstalling %s\n' "$1"
    fi

    if /bin/rm -f "$1"; then
	target_status=uninstalled
    fi
}

usage() {
    cat <<EOF >&2
Usage: $script [-b] [-f] [-p PREFIX] [-s]
       $script -u [-p PREFIX] [-s]
       $script -q
       $script -h
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf '%s\n' '' >&2
    usage
    exit 2
}

trap clean_up EXIT INT QUIT TERM
script=$(basename "$0")
parse_arguments "$@"
install_command_completion

#!/bin/sh -eu

# install-docker: install Docker packages
# Copyright (C) 2018  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

abort() {
    printf "$@" >&2
    exit 1
}

abort_not_supported() {
    abort "%s: %s: %s not supported\n" "$0" "$PRETTY_NAME" "$*"
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$0" "$*"
}

configure_daemon_group() {
    assert [ $# -ge 1 ]

    if [ -z "${SUDO_USER-}" ] || [ "$(id -u)" -gt 0 ]; then
	return 0
    elif [ "$has_daemon" = false ]; then
	return 0
    elif [ "$has_getent" = false ]; then
	return 0
    fi

    group=$(get-docker-group "$@")

    if [ -n "$group" ]; then
	install_group $group
	modify_user $group
    fi
}

configure_platform() {
    has_daemon=true
    has_getent=true

    for id in $ID $ID_LIKE; do
	case "$id" in
	    (rhel|fedora)
		has_daemon=false
		break
		;;
	    (freebsd)
		has_daemon=false
		break
		;;
	    (macos)
		has_getent=false
		break
		;;
	esac
    done
}

get_architecture() {
    machine=$(uname -m)

    case "$machine" in
	(i86pc|x86_64)
	    printf "%s\n" amd64
	    ;;
	(armv7l)
	    printf "%s\n" armhf
	    ;;
	(*)
	    printf "%s\n" $machine
	    ;;
    esac
}

get_difference() (
    assert [ $# -eq 2 ]

    for item in $1; do
	if ! printf "%s\n" $2 | grep '^'"$item"'$' >/dev/null; then
	    printf "%s\n" "$item"
	fi
    done
)

get_docker_origin() {
    origin=

    for package; do
	case $package in
	    (docker-ce|docker-ce-cli)
		origin=docker.com
		;;
	    (docker|docker.io)
		origin=native
		;;
	    (podman|podman-docker)
		origin=podman
		;;
	esac

	if [ -n "${origin-}" ]; then
	    printf "%s\n" "$origin"
	    break
	fi
    done
}

get_realpath() (
    assert [ $# -ge 1 ]
    realpath=$(which realpath)

    if [ -n "$realpath" ]; then
	$realpath "$@"
    else
	for file; do
	    if expr "$file" : '/.*' >/dev/null; then
		printf "%s\n" "$file"
	    else
		printf "%s\n" "$PWD/${file#./}"
	    fi
	done
    fi
)

install_docker() {
    validate_platform
    configure_platform
    installed_packages=$(get-installed-docker-packages)
    origin=$(get_docker_origin $installed_packages)

    if [ -n "$origin" ]; then
	case "$origin" in
	    (docker.com)
		printf "Docker Community Edition is installed.\n"
		;;
	    (native)
		printf "Native Docker is installed.\n"
		;;
	    (podman)
		printf "Podman is installed.\n"
		;;
	esac
    else
	printf "Docker is not installed.\n"
    fi

    selected_packages=$(get-docker-packages)
    packages=$(get_difference "$installed_packages" "$selected_packages")

    if [ -n "$packages" ]; then
	if ! uninstall-packages $packages; then
	    return $?
	fi
    fi

    if [ -n "$selected_packages" ]; then
	configure_daemon_group $selected_packages

	if ! install-packages $selected_packages; then
	    return $?
	fi
    fi
}

install_group() {
    assert [ $# -eq 1 ]

    if ! getent group $1 >/dev/null; then
	groupadd $1
    fi
}

modify_user() (
    assert [ $# -eq 1 ]

    if ! getent group $1 >/dev/null; then
	return 0
    fi

    members="$(getent group $1 | awk -F: '{print $4}')"

    if ! printf "%s\n" "$members" | grep -q "\<$SUDO_USER\>"; then
	usermod -a -G $1 $SUDO_USER
	printf "Please restart the machine before using docker.\n"
    fi
)

validate_platform() {
    arch=$(get_architecture)

    case "$arch" in
	(amd64)
	    :
	    ;;
	(*)
	    abort "%s: %s: Architecture not supported\n" "$0" "$arch"
	    ;;
    esac

    for id in $ID $ID_LIKE; do
	case "$id" in
	    (centos)
		case "$VERSION_ID" in
		    (7)
			return
			;;
		    (8)
		    	return
		    	;;
		    (*)
			break
			;;
		esac
		;;
	    (debian)
		case "$VERSION_ID" in
		    (10)
			return
			;;
		    (*)
			break
			;;
		esac
		;;
	    (fedora)
		case "$VERSION_ID" in
		    (30)
			return
			;;
		    (31)
			return
			;;
		    (*)
			break
			;;
		esac
		;;
	    (linuxmint)
		case "$VERSION_ID" in
		    (19.2)
			return
			;;
		    (*)
			break
			;;
		esac
		;;
	    (kali)
		case "$VERSION_ID" in
		    (2019.3)
			return
			;;
		    (*)
			break
			;;
		esac
		;;
	    (opensuse-leap)
		case "$VERSION_ID" in
		    (15.0|15.1)
			return
			;;
		    (*)
			break
			;;
		esac
		;;
	    (opensuse-tumbleweed)
		case "$VERSION_ID" in
		    (2019*)
			return
			;;
		    (*)
			break
			;;
		esac
		;;
	    (rhel|ol)
		case "$VERSION_ID" in
		    (8.[01])
			return
			;;
		    (*)
			break
			;;
		esac
		;;
	    (ubuntu)
		case "$VERSION_ID" in
		    (19.10)
			return
			;;
		    (*)
			break
			;;
		esac
		;;
	    (freebsd)
		case "$VERSION_ID" in
		    (11.*)
			return
			;;
		    (12.*)
			return
			;;
		    (*)
			break
			;;
		esac
		;;
	    (macos)
		case "$VERSION_ID" in
		    (10.14.*)
			return
			;;
		    (*)
			break
			;;
		esac
		;;
	esac
    done

    abort_not_supported "Operating system"
}

if [ $# -gt 0 ]; then
    abort "%s: Too many arguments\n" "$0"
fi

script_dir=$(get_realpath "$(dirname "$0")")

. "$script_dir/common-functions.sh"

set_user_profile "$script_dir"
eval $(get-os-release -x)
install_docker

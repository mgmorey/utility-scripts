#!/bin/sh -eu

# install-oracle-odbc: install Oracle ODBC packages
# Copyright (C) 2020  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

COMPONENTS="basic odbc"
DRIVER_FILE=/etc/odbcinst.ini

MACHINE_TYPE_RPM=$(uname -m)
MACHINE_TYPE_ZIP=$(uname -m | sed 's/x86_64/x64/')

PREFIX_RPM="oracle-instantclient%s-%s"
PREFIX_ZIP="instantclient-%s"

SUFFIX_RPM="%s.0.0.0-1.$MACHINE_TYPE_RPM.rpm"
SUFFIX_ZIP="linux.$MACHINE_TYPE_ZIP-%s.0.0.0dbru.zip"

abort() {
    printf "$@" >&2
    exit 1
}

abort_not_supported() {
    abort "%s: %s: %s not supported\n" "$0" "$PRETTY_NAME" "$*"
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$0" "$*"
}

cat_odbc_driver_entry() {
	cat <<EOF
[$DRIVER_NAME]
Description=$DRIVER_DESC
Driver=$DRIVER_OBJECT
Setup=
FileUsage=
CPTimeout=
CPReuse=

EOF
}

get_package_pathname() {
    assert [ $# -eq 3 ]
    assert [ -n "$1" ]
    assert [ -n "$2" ]
    assert [ -n "$3" ]

    case "$ID" in
	(debian|ubuntu)
	    printf "%s/$PREFIX_ZIP-$SUFFIX_ZIP\n" "$3" "$1" "$2"
	    ;;
	(rhel|ol|centos)
	    printf "%s/$PREFIX_RPM-$SUFFIX_RPM\n" "$3" "$2" "$1" "$2"
	    ;;
    esac
}

get_package_pathnames() {
    for component in $COMPONENTS; do
	get_package_pathname $component "$CLIENT_VERSION" "$(pwd)"
    done
}

get_package_prefix() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]

    case "$ID" in
	(debian|ubuntu)
	    printf "$PREFIX_ZIP\n" "$1"
	    ;;
	(rhel|ol|centos)
	    printf "$PREFIX_RPM\n" "$1"
	    ;;
    esac
}

get_package_suffix() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]

    case "$ID" in
	(debian|ubuntu)
	    printf "$SUFFIX_ZIP\n" "$1"
	    ;;
	(rhel|ol|centos)
	    printf "$SUFFIX_RPM\n" "$1"
	    ;;
    esac
}

get_packages() {
    (get-odbc-development-packages
     get-oracle-client-packages) | sort -u
}

install_oracle_odbc() {
    validate_platform
    install-packages $(get_packages)
    install_platform
}

install_platform() {
    package_pathnames=$(get_package_pathnames)

    if [ -z "$package_pathnames" ]; then
	return 0
    fi

    case "$ID" in
	(debian|ubuntu)
	    install_zip_files $package_pathnames
	    ;;
	(rhel|ol|centos)
	    install_rpm_files $package_pathnames
	    ;;
    esac

    if ! grep -q "\[$DRIVER_NAME\]" $DRIVER_FILE; then
	cat_odbc_driver_entry >$DRIVER_FILE
    fi
}

install_rpm_files() {
    suffix=$(get_package_suffix "$CLIENT_VERSION")

    for package_pathname; do
	if ! rpm -q $(basename ${package_pathname%-$suffix}); then
	    rpm -iv $package_pathname
	fi
    done
}

install_zip_files() (
    dirname=$(get_package_prefix "$CLIENT_VERSION")
    tmp_dirname=$(printf '%s\n' $dirname | tr -- '-.' '__')
    mkdir -p /opt/oracle/$dirname
    /bin/rm -rf /tmp/$tmp_dirname
    cd /tmp

    for package_pathname; do
	if [ -r $package_pathname ]; then
	    unzip $package_pathname
	fi
    done

    /bin/cp -R $tmp_dirname/* /opt/oracle/$dirname
    /bin/rm -r $tmp_dirname
)

usage_error() {
    printf "$@" >&2
    exit 2
}

validate_platform() {
    case "$ID" in
	(centos)
	    case "$VERSION_ID" in
		(8)
		    true
		    ;;
		(*)
		    abort_not_supported Release
		    ;;
	    esac
	    ;;
	(debian|raspbian)
	    case "$VERSION_ID" in
		(10)
		    true
		    ;;
		(*)
		    abort_not_supported Release
		    ;;
	    esac
	    ;;
	(rhel|ol)
	    case "$VERSION_ID" in
		(8.*)
		    true
		    ;;
		(*)
		    abort_not_supported Release
		    ;;
	    esac
	    ;;
	(ubuntu)
	    case "$VERSION_ID" in
		(18.04)
		    true
		    ;;
		(*)
		    abort_not_supported Release
		    ;;
	    esac
	    ;;
	(*)
	    abort_not_supported "Operating system"
	    ;;
    esac
}

if [ $# -gt 0 ]; then
    usage_error "%s: Too many arguments\n" "$0"
fi

script_basename="$(basename "$0")"
script_dirname="$(cd "$(dirname "$0")" && pwd)"

. "$script_dirname/common-functions.sh"
. "$script_dirname/oracle-config.sh"

set_user_profile "$script_dirname"
eval $(get-os-release -x)
install_oracle_odbc

#!/bin/sh -eu

# set-oss-parameters: print shell commands to set OSS parameters
# Copyright (C) 2022  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

ALL_PARAMETERS="CPPFLAGS INFOPATH LDFLAGS LD_LIBRARY_PATH LD_RUN_PATH \
MANPATH PATH PKG_CONFIG_PATH"

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort '%s: Assertion failed: %s\n' "$script" "$*"
}

get_dirs() {
    find -L $(eval ls -d "$@" 2>/dev/null) -maxdepth 2 -type d
}

get_count() {
    eval ls "$@" 2>/dev/null | wc -l
}

parse_arguments() {
    no_export=false
    shell=$SHELL

    while getopts ns:h opt; do
	case $opt in
	    (n)
		no_export=true
		;;
	    (s)
		parse_shell "$OPTARG"
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -lt 1 ]; then
	usage_error '%s: Not enough arguments\n' "$script"
    fi

    dirs="$@"
}

set_oss_dir() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]

    case "$(basename "$1" "$bits")" in
        (include)
	    if is_to_be_included "-I$1" "${CPPFLAGS-}"; then
		CPPFLAGS="-I$1${CPPFLAGS+ $CPPFLAGS}"
	    fi
	    ;;
        (info)
	    if is_to_be_included "$1" "${INFOPATH-}"; then
		INFOPATH="$1${INFOPATH+:$INFOPATH}"
	    fi
	    ;;
        (lib)
	    if [ "$(get_count "$1/*.a" "$1/*.la")" -gt 0 ]; then
		if is_to_be_included "-L$1" "${LDFLAGS-}"; then
		    LDFLAGS="-L$1${LDFLAGS+ $LDFLAGS}"
		fi
	    fi
	    if [ "$(get_count "$1/*.so" "$1/*.so.*")" -gt 0 ]; then
		if is_to_be_included "$1" "${LD_LIBRARY_PATH-}"; then
		    LD_LIBRARY_PATH="$1${LD_LIBRARY_PATH+:$LD_LIBRARY_PATH}"
		fi
		if is_to_be_included "$1" "${LD_RUN_PATH-}"; then
		    LD_RUN_PATH="$1${LD_RUN_PATH+:$LD_RUN_PATH}"
		fi
	    fi
	    ;;
        (man)
	    if is_to_be_included "$1" "${MANPATH-}"; then
		MANPATH="$1${MANPATH+:$MANPATH}"
	    fi
	    ;;
        (bin)
	    if is_to_be_included "$1" "${PATH-}"; then
		PATH="$1${PATH+:$PATH}"
	    fi
	    ;;
        (pkgconfig)
	    if is_to_be_included "$1" "${PKG_CONFIG_PATH-}"; then
		PKG_CONFIG_PATH="$1${PKG_CONFIG_PATH+:$PKG_CONFIG_PATH}"
	    fi
	    ;;
    esac
}

set_oss_parameters() {
    bits="$(uname -m | sed 's/x86_//')"

    for dir in $(get_dirs $dirs | sort -r); do
	set_oss_dir "$dir"
    done

    print_parameters $ALL_PARAMETERS
}

usage() {
    cat <<-EOF >&2
Usage: $script: [-s SHELL] [DIR [...]]
       $script: -n
       $script: -h
EOF
}

script=$(basename "$0")

case "$0" in
    (*/*)
	script_dir=$(cd "$(dirname "$0")" && pwd)
	;;
    (*)
	script_dir=
	;;
esac

script_prefix=${script_dir:+$script_dir/}

. "${script_prefix}parameter-functions.sh"

eval $("${script_prefix}get-os-release" -x)
parse_arguments "$@"
set_oss_parameters

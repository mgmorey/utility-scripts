#!/bin/sh -eu

# configure-docker-proxy: configure Docker proxy settings
# Copyright (C) 2021  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

INPUT=-
OUTPUT=/etc/systemd/system/docker.service.d/http-proxy.conf
PROXY_PARAMETER_RE='^(HTTP|NO)_PROXY='

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$script" "$*"
}

clean_up() {
    eval rm -f ${tmpfiles-}
}

configure_docker_proxy()
{
    if [ "$action" = query -o "$(id -u)" -eq 0 ]; then
	output=$OUTPUT
    else
	output=-
    fi

    eval ${action}_proxy
}

create_tmpfile() {
    trap clean_up EXIT INT QUIT TERM
    tmpfile=$(mktemp "$@")
    assert [ -n "${tmpfile}" ]
    tmpfiles="${tmpfiles+$tmpfiles }'$tmpfile'"
}

filter_proxy_parameters() {
    grep -E "$PROXY_PARAMETER_RE"
}

get_realpath() (
    assert [ $# -ge 1 ]
    realpath=$(which realpath || true)

    if [ -n "$realpath" ]; then
	$realpath "$@"
    else
	for file; do
	    if expr "$file" : '/.*' >/dev/null; then
		printf "%s\n" "$file"
	    else
		printf "%s\n" "$PWD/${file#./}"
	    fi
	done
    fi
)

install_file() {
    if mkdir -p "$(dirname "$2")"; then
	if chmod a+r $"$1"; then
	    /bin/mv -f $"$1" "$2"
	fi
    fi
}

install_proxy() {
    create_tmpfile
    read_proxy_parameters | \
	filter_proxy_parameters | \
	print_proxy_configuration >$tmpfile

    if [ "$(wc -l <$tmpfile)" -le 1 ]; then
	return 0
    fi

    case "$output" in
	(-)
	    cat $tmpfile
	    ;;
	(*)
	    if install_file $tmpfile "$output"; then
		restart_daemon
	    fi
	    ;;
    esac
}

is_valid_input_file() {
    case "$1" in
	(-)
	    true
	    ;;
	(*)
	    test -f "$1" -a -r "$1"
	    ;;
    esac
}

parse_arguments() {
    action=install
    input=$INPUT
    no_proxy=
    proxy=

    while getopts i:n:o:rqh opt; do
	case $opt in
	    (i)
		parse_input_file "$OPTARG"
		;;
	    (n)
		no_proxy="$OPTARG"
		;;
	    (o)
		output="$OPTARG"
		;;
	    (q)
		action=query
		;;
	    (r)
		action=remove
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -gt 0 ]; then
	proxy="$1"
	shift
    fi

    if [ $# -gt 0 ]; then
	usage_error "%s: Too many arguments\n" "$script"
    fi
}

parse_input_file() {
    if is_valid_input_file "$1"; then
	input="$1"
    else
	usage_error "%s: %s: No such file or no permissions\n" "$script" "$1"
    fi
}

print_prompt() {
    cat <<EOF >&2
Enter proxy parameters, one per line.
Type ^D to submit or ^C to quit:
EOF
}

print_proxy_configuration() {
    printf '[%s]\n' "Service"

    while read parameter; do
	printf 'Environment="%s"\n' "$parameter"
    done
}

query_proxy() {
    docker info | grep -E '^(Http|Https|No) Proxy'
}

read_proxy_parameters() {
    if [ -n "${proxy-}" ]; then
	"${script_prefix}generate-proxy-parameters" \
	    ${no_proxy:+-n "$no_proxy"} \
	    "$proxy"
	return 0
    fi

    case "$input" in
	(-)
	    print_prompt
	    cat
	    ;;
	(*)
	    cat "$input"
	    ;;
    esac
}

remove_proxy() {
    if [ "$output" != - ]; then
	if /bin/rm -f "$output"; then
	    restart_daemon
	fi
    fi
}

restart_daemon() {
    if which systemctl >/dev/null 2>&1; then
	if systemctl daemon-reload; then
	    if systemctl status docker >/dev/null; then
		systemctl restart docker
	    fi
	fi
    fi
}

usage() {
    cat <<EOF >&2
Usage: $script [-n NO-PROXY] [-o OUTPUT] PROXY-URL
       $script [-i INPUT] [-o OUTPUT]
       $script -q [-o OUTPUT]
       $script -r [-o OUTPUT]
       $script -h

Configure Docker Engine HTTP/HTTPS proxy parameters.

  -h           print this help text (all other options are ignored)
  -i INPUT     read parameters from file INPUT
  -n NO-PROXY  interpret NO-PROXY as a comma-separated list of exceptions
  -o OUTPUT    write to configuration file OUTPUT
               (default value is $OUTPUT)
  -q           query proxy configuration
  -r           remove query configuration

Example input parameters:

  HTTP_PROXY=http://proxy.com:80
  NO_PROXY=localhost,127.0.0.0/8

Example NO-PROXY:

  localhost,127.0.0.0/8

Example PROXY-URL:

  http://proxy.com:80
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf '%s\n' '' >&2
    usage
    exit 2
}

script=$(basename "$0")

case "$0" in
    (*/*)
	script_dir=$(get_realpath "$(dirname "$0")")
	;;
    (*)
	script_dir=
	;;
esac

script_prefix=${script_dir:+$script_dir/}

parse_arguments "$@"
configure_docker_proxy

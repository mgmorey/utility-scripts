#!/bin/sh -eu

# run-image: run container image
# Copyright (C) 2020  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$0" "$*"
}

get_buildah_from_options() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    capabilities=$(get_default_capabilities "$1")

    if [ -n "$capabilities" ]; then
	printf -- "--cap-add=%s\n" $capabilities
    fi

    printf -- "%s\n" $from_options
}

get_default_capabilities() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]

    case "$1" in
	(*-ibm-db2-*)
	    capabilities=$("${script_prefix}get-db2-capabilities")

	    if [ -n "$capabilities" ]; then
		printf "%s\n" $capabilities
	    fi
	    ;;
    esac
}

get_default_method() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]

    case "$1" in
	(*-ibm-db2-*)
	    printf "%s\n" buildah
	    ;;
	(*)
	    printf "%s\n" docker
	    ;;
    esac
}

get_image_dir_prefix() {
    printf "%s\n" "${IMAGE_DIR_PREFIX-docker}-"
}

get_image_dir_root() {
    printf "%s\n" "$(cd "${IMAGE_DIR_ROOT-$HOME}" && pwd)"
}

get_image_method() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    printf "%s\n" "${method:-$(get_default_method "$1")}"
}

get_image_name() {
    dir_prefix=$(get_image_dir_prefix)
    name_prefix=${IMAGE_NAME_PREFIX+$IMAGE_NAME_PREFIX-}
    sed -e 's|^.*/'"$dir_prefix"'\(.*\)/|'"${name_prefix}"'\1-|' \
	-e 's/\.0$//'
}

get_image_run_options() {
    assert [ $# -eq 2 ]
    assert [ -n "$1" ]
    assert [ -n "$2" ]

    case "$1" in
	(docker)
	    case "$2" in
		(*-ibm-db2-*)
		    options="${options:+--privileged }$options"
		    ;;
	    esac
	    ;;
    esac

    printf "%s\n" $options
}

get_remote_image_name() {
    if [ "$is_remote" = true ]; then
	printf "%s%s%s%s\n" \
	       "${IMAGE_REMOTE_BASE_URL:+${IMAGE_REMOTE_BASE_URL#*//}/}" \
	       "${IMAGE_REMOTE_DIR:+$IMAGE_REMOTE_DIR/}" \
	       "${image#*/}" \
	       "${tag:+:$tag}"
    else
	printf "%s%s\n" \
	       "${image#*/}" \
	       "${tag:+:$tag}"
    fi
}

parse_arguments() {
    command=sh
    dockerfile=
    from_options=
    is_remote=false
    method=
    options=
    tag=

    while getopts M:c:f:o:rt:h opt; do
	case $opt in
	    (M)
		case "$OPTARG" in
		    (buildah)
			method="$OPTARG"
			;;
		    (docker)
			method="$OPTARG"
			;;
		    (podman)
			method="$OPTARG"
			;;
		    (*)
			usage_error "%s: %s: Invalid method\n" "$0" "$OPTARG"
			;;
		esac
		;;
	    (c)
		command="$OPTARG"
		;;
	    (f)
		from_options="$OPTARG"
		;;
	    (o)
		options="$OPTARG"
		;;
	    (r)
		is_remote=true
		;;
	    (t)
		tag="$OPTARG"
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		usage_error
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -lt 1 ]; then
	usage_error "%s: Not enough arguments\n" "$0"
    elif [ $# -gt 1 ]; then
	usage_error "%s: Too many arguments\n" "$0"
    fi

    file=$1
    shift

    if [ -f "$file" ]; then
	case "$file" in
	    (*/Dockerfile|Dockerfile)
		dockerfile="$file"
		;;
	    (*)
		abort "%s: %s: Not a Dockerfile\n" "$0" "$file"
		;;
	esac
    elif [ -e "$file" ]; then
	abort "%s: %s: Not a Dockerfile\n" "$0" "$file"
    else
	abort "%s: %s: No such file\n" "$0" "$file"
    fi
}

run_image() {
    dir=$(cd "$(dirname "$dockerfile")" && pwd)
    image=$(printf "%s\n" "$dir" | get_image_name)
    image_method=$(get_image_method $image)
    remote_image=$(get_remote_image_name)

    case "$method" in
	(buildah)
	    container=$($image_method from \
				      $(get_buildah_from_options $image) \
				      $remote_image)
	    $image_method run $options $container $command
	    $image_method rm $container
	    ;;
	(*)
	    $image_method run \
			  $(get_image_run_options $method $image) \
			  $remote_image
	    ;;
    esac
}

usage() {
    cat <<EOF >&2
Usage: $0 [-M METHOD] [-c COMMAND] [-f FROM-OPTIONS] [-o OPTIONS] [-r] \
[-t TAG] DOCKERFILE
       $0 -h
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf "%s\n" '' >&2
    usage
    exit 2
}

case "$0" in
    (*/*)
	script_dir=$(cd "$(dirname "$0")" && pwd)
	;;
    (*)
	script_dir=
	;;
esac

script_prefix=${script_dir:+$script_dir/}

parse_arguments "$@"
run_image ${dockerfile}

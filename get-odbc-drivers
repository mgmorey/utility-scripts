#!/usr/bin/env python3
# pylint: disable=bad-continuation,invalid-name,missing-docstring

# get-odbc-driver-info: print installed ODBC driver details
# Copyright (C) 2019  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import argparse
import configparser
import json
import os
import re
import sys

DRIVER_MSSQL_UNICODE = re.compile(r'libmsodbcsql-\d+\.\d+\.so\.\d+\.\d+')
DRIVER_MYSQL_ANSI = re.compile(r'libmyodbc\d+a\.so')
DRIVER_MYSQL_UNICODE = re.compile(r'libmyodbc\d+w\.so')
DRIVER_ORACLE_UNICODE = re.compile(r'libsqora\.so\.\d+\.\d+')
DRIVER_POSTGRES_ANSI = re.compile(r'psqlodbca\.so')
DRIVER_POSTGRES_UNICODE = re.compile(r'psqlodbcw\.so')

ODBC_DATA = {
    DRIVER_MSSQL_UNICODE: ('mssql', 'unicode'),
    DRIVER_MYSQL_ANSI: ('mysql', 'ansi'),
    DRIVER_MYSQL_UNICODE: ('mysql', 'unicode'),
    DRIVER_ORACLE_UNICODE: ('oracle', 'unicode'),
    DRIVER_POSTGRES_ANSI: ('postgres', 'ansi'),
    DRIVER_POSTGRES_UNICODE: ('postgres', 'unicode'),
}

ODBC_DIALECTS = ['mssql', 'mysql', 'oracle', 'postgres']
ODBC_ENCODINGS = ['ansi', 'unicode']
ODBC_INST_FILE = '/etc/odbcinst.ini'


def filter_drivers(drivers_in: dict, dialect: list, encoding: str) -> dict:
    drivers_out = {}

    for name in drivers_in:
        if ((not dialect or drivers_in[name]['dialect'] in dialect) and
            (not encoding or drivers_in[name]['encoding'] == encoding)):
            drivers_out[name] = drivers_in[name]

    return drivers_out


def get_data(section: configparser.SectionProxy) -> str:
    driver = os.path.basename(section['driver'])

    for pattern in ODBC_DATA:
        if pattern.fullmatch(driver):
            return ODBC_DATA[pattern]

    return 'unknown', 'unknown'


def get_dictionary(section: configparser.SectionProxy) -> dict:
    dialect, encoding = get_data(section)
    parameters = {key: section[key] for key in section}
    return dict(dialect=dialect, encoding=encoding, parameters=parameters)


def get_odbc_drivers(pathname: str, name: list) -> dict:
    config = configparser.ConfigParser()
    config.read(pathname)
    return {section: get_dictionary(config[section]) for section in
            config.sections() if (not name or section in name)}


def parse_args() -> argparse.Namespace:
    description = 'Print ODBC driver configuration'
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('--dialect',
                        choices=ODBC_DIALECTS,
                        metavar='DIALECT',
                        nargs='+',
                        help='select SQL dialect DIALECT')
    parser.add_argument('--encoding',
                        choices=ODBC_ENCODINGS,
                        metavar='ENCODING',
                        nargs='?',
                        help='select encoding ENCODING')
    parser.add_argument('--name',
                        metavar='NAME',
                        nargs='+',
                        help='select ODBC driver NAME')
    parser.add_argument('--text',
                        action="store_true",
                        help='print plaintext summary')
    return parser.parse_args()


def main():
    args = parse_args()
    drivers = get_odbc_drivers(ODBC_INST_FILE, args.name)

    if args.dialect or args.encoding:
        drivers = filter_drivers(drivers, args.dialect, args.encoding)

    if args.text:
        for name in drivers:
            print(name)
    else:
        json.dump(drivers, fp=sys.stdout, indent=4, sort_keys=True)
        print('')


if __name__ == '__main__':
    main()

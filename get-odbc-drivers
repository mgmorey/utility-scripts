#!/usr/bin/env run-python
# -*- Mode: Python -*-
# pylint: disable=bad-continuation,invalid-name,missing-docstring

# get-odbc-drivers: describe installed ODBC drivers
# Copyright (C) 2020  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import argparse
import configparser
import json
import os
import re
import sys

DRIVER_MSSQL_UNICODE = re.compile(r'libmsodbcsql-\d+\.\d+\.so\.\d+\.\d+')
DRIVER_MYSQL_ANSI = re.compile(r'libmyodbc\d+a\.so')
DRIVER_MYSQL_UNICODE = re.compile(r'libmyodbc\d+w\.so')
DRIVER_ORACLE_UNICODE = re.compile(r'libsqora\.so\.\d+\.\d+')
DRIVER_POSTGRES_ANSI = re.compile(r'psqlodbca\.so')
DRIVER_POSTGRES_UNICODE = re.compile(r'psqlodbcw\.so')

ODBC_DATA = {
    DRIVER_MSSQL_UNICODE: ('mssql', 'unicode'),
    DRIVER_MYSQL_ANSI: ('mysql', 'ansi'),
    DRIVER_MYSQL_UNICODE: ('mysql', 'unicode'),
    DRIVER_ORACLE_UNICODE: ('oracle', 'unicode'),
    DRIVER_POSTGRES_ANSI: ('postgres', 'ansi'),
    DRIVER_POSTGRES_UNICODE: ('postgres', 'unicode'),
}

ODBC_INIFILE = '/etc/odbcinst.ini'


def filter_drivers(drivers: dict, dialect: list, encoding: str) -> dict:
    return {name: drivers[name] for name in drivers
            if has_driver(drivers[name], dialect, encoding)}


def get_data(section: configparser.SectionProxy) -> str:
    driver = os.path.basename(section['driver'])

    for pattern in ODBC_DATA:
        if pattern.fullmatch(driver):
            return ODBC_DATA[pattern]

    return 'unknown', 'unknown'


def get_dictionary(section: configparser.SectionProxy) -> dict:
    dialect, encoding = get_data(section)
    parameters = {key: section[key] for key in section}
    return dict(dialect=dialect, encoding=encoding, parameters=parameters)


def get_odbc_drivers(pathname: str) -> dict:
    config = configparser.ConfigParser()
    config.read(pathname)
    return {section: get_dictionary(config[section]) for section in
            config.sections()}


def has_driver(driver: dict, dialect: list, encoding: str) -> bool:
    return ((not dialect or driver['dialect'] in dialect) and
            (not encoding or driver['encoding'] == encoding))


def parse_args() -> argparse.Namespace:
    description = 'Print ODBC driver configuration as JSON or text'
    arg_parser = argparse.ArgumentParser(description=description)
    arg_parser.add_argument('dialect',
                            metavar='DIALECT',
                            nargs='*',
                            help='select SQL dialect DIALECT')
    encoding = arg_parser.add_mutually_exclusive_group()
    encoding.add_argument('--ansi_encoding',
                          action='store_true',
                          help='select driver with ANSI encoding')
    encoding.add_argument('--unicode_encoding',
                          action='store_true',
                          help='select driver with Unicode encoding')
    format = arg_parser.add_mutually_exclusive_group()
    format.add_argument('--json_format',
                        action='store_true',
                        help='format output as JSON (default)')
    format.add_argument('--text_format',
                        action='store_true',
                        help='format output as text')
    return arg_parser.parse_args()


def main():
    args = parse_args()
    drivers = get_odbc_drivers(ODBC_INIFILE)

    if args.ansi_encoding:
        encoding = 'ansi'
    elif args.unicode_encoding:
        encoding = 'unicode'
    else:
        encoding = None

    if args.json_format:
        formatting = 'json'
    else:
        formatting = 'text'

    if args.dialect or encoding:
        drivers = filter_drivers(drivers, args.dialect, encoding)

    if formatting == 'text':
        for name in drivers:
            print(name)
    else:
        json.dump(drivers, fp=sys.stdout, indent=4, sort_keys=True)
        print('')


if __name__ == '__main__':
    main()

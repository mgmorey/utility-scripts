#!/bin/sh -eu

# configure-sbcl: download and configure SBCL
# Copyright (C) 2022  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

SBCL_ARCHIVE_DIR="$HOME/Downloads/SBCL"
SBCL_ARCHIVE_SUFFIX=.tar.bz2

SBCL_PROJECT_NAME=sbcl
SBCL_PROJECT_VERSION=2.2.2

LOCAL_PREFIX=/usr/local
OPENCSW_PREFIX=/opt/csw

abort() {
    printf "$@" >&2
    exit 1
}

abort_invalid_prefix() {
    usage_error '%s: invalid prefix -- %s\n' "$script" "$*"
}

abort_invalid_version() {
    usage_error '%s: invalid version -- %s\n' "$script" "$*"
}

abort_not_supported() {
    abort '%s: %s: %s not supported\n' "$script" "$PRETTY_NAME" "$*"
}

assert() {
    "$@" || abort '%s: Assertion failed: %s\n' "$script" "$*"
}

configure_paths() {
    basename=$SBCL_PROJECT_NAME-$version-source
    filename=$basename$SBCL_ARCHIVE_SUFFIX
    pathname="$SBCL_ARCHIVE_DIR/$filename"
    src_dir="$HOME/Documents/src/SBCL/${basename%-source}"
}

configure_sbcl() {
    mkdir -p "$(dirname "$src_dir")" "$SBCL_ARCHIVE_DIR"
    extract_files
    cd "$src_dir"

    if [ "$build" = true ]; then
	sh make.sh --prefix=$prefix
    fi
}

extract_files() {
    if [ ! -r "$src_dir/make.sh" ]; then
	cd "$(dirname "$src_dir")"

	case "$pathname" in
	    (*.tar.bz2)
		bzip2 -dc "$pathname" | tar -xvf -
		;;
	    (*.tar.gz)
		gzip -dc "$pathname" | tar -xvf -
		;;
	    (*.tar.xz)
		xz -dc "$pathname" | tar -xvf -
		;;
	    (*.zip)
		unzip "$pathname"
		;;
	esac
    fi
}

get_dependencies() {
    get-packages bootstrap sbcl-build
}

install_dependencies() {
    for id in $ID $ID_LIKE; do
	case "$id" in
	    (windows)
		return 0
		;;
	esac
    done

    packages="$(get_dependencies | sort -u)"
    pattern="$(get-packages -s pattern development)"
    install-packages ${pattern:+-p "$pattern" }$packages
}

install_sbcl() {
    if [ "$install" = true ]; then
	if [ "$ID" = macos -o "$ID" = windows -o "$(id -u)" -eq 0 ]; then
	    umask 0022
	    cd "$src_dir"
	    sh install.sh
	fi
    fi
}

parse_arguments() {
    build=true
    force=false
    install=false
    prefix=$LOCAL_PREFIX
    version=$SBCL_PROJECT_VERSION

    while getopts bfinp:v:h opt; do
	case $opt in
	    (b)
		build=true
		;;
	    (f)
		force=true
		;;
	    (i)
		install=true
		;;
	    (n)
		build=false
		;;
	    (p)
		case $OPTARG in
		    ($HOME|/opt/%s|/usr|/usr/local)
			prefix=$(printf "$OPTARG" "$SBCL_PROJECT_NAME-$version")
			;;
		    (*)
			abort_invalid_prefix $OPTARG
			;;
		esac
		;;
	    (v)
		case $OPTARG in
		    (4.[1-9]|4.[1-9][0-9])
			version=$OPTARG
			;;
		    (*)
			abort_invalid_version $OPTARG
			;;
		esac
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -gt 0 ]; then
	usage_error '%s: Too many arguments\n' "$script"
    fi
}

usage() {
    cat <<EOF >&2
Usage: $script [-b] [-f] [-i] [-n] [-p PREFIX] [-v VERSION]
       $script -h
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf '%s\n' '' >&2
    usage
    exit 2
}

validate_platform() {
    case "$ID" in
	(centos)
	    case "$VERSION_ID" in
		(7)
		    return
		    ;;
		(8)
		    return
		    ;;
		(*)
		    abort_not_supported Release
		    ;;
	    esac
	    ;;
	(debian|raspbian)
	    return
	    ;;
	(fedora)
	    return
	    ;;
	(opensuse-*)
	    return
	    ;;
	(ol)
	    case "$VERSION_ID" in
		(7.*)
		    return
		    ;;
		(8.*)
		    return
		    ;;
		(*)
		    abort_not_supported Release
		    ;;
	    esac
	    ;;
	(rhel)
	    case "$VERSION_ID" in
		(7.*)
		    return
		    ;;
		(8.*)
		    return
		    ;;
		(*)
		    abort_not_supported Release
		    ;;
	    esac
	    ;;
	(rocky)
	    case "$VERSION_ID" in
		(7.*)
		    return
		    ;;
		(8.*)
		    return
		    ;;
		(*)
		    abort_not_supported Release
		    ;;
	    esac
	    ;;
	(ubuntu)
	    return
	    ;;
	(freebsd)
	    return
	    ;;
	(illumos)
	    return
	    ;;
	(macos)
	    return
	    ;;
	(netbsd)
	    return
	    ;;
	(solaris)
	    return
	    ;;
	(windows)
	    return
	    ;;
	(*)
	    abort_not_supported "Operating system"
	    ;;
    esac
}

script=$(basename "$0")

case "$0" in
    (*/*)
	script_dir=$(cd "$(dirname "$0")" && pwd)
	;;
    (*)
	script_dir=
	;;
esac

script_prefix=${script_dir:+$script_dir/}

. "${script_prefix}common-functions.sh"

set_user_profile "$script_dir"
eval $(get-os-release -x)
validate_platform
parse_arguments "$@"
configure_paths
install_dependencies

if [ "$(id -u)" -eq 0 ]; then
    run_unpriv /bin/sh -c "$0 $*"
else
    configure_sbcl
fi

install_sbcl

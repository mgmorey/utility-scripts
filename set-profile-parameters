#!/bin/sh -eu

# set-profile-parameters: print shell commands to set profile parameters
# Copyright (C) 2020  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

ALL_PARAMETERS="CPPFLAGS INFOPATH LDFLAGS LD_LIBRARY_PATH LD_RUN_PATH \
MANPATH PATH PKG_CONFIG_PATH"
AWK_EXPR='{printf("%s/opt/%s\n", prefix, $0)}'

COMMON_BINS="/usr/lib/cups/bin"
PROFILE_BINS="bin .cargo/bin .linuxbrew/bin .local/bin .pyenv/bin"

HOMEBREW_DIRS="/opt/homebrew /home/linuxbrew/.linuxbrew"
PKGSRC_DIRS="/usr/pkg /opt/pkg /opt/local"
SOLARIS_DIRS="/opt/csw /opt/*studio*"
SYSTEM_DIRS="/usr /usr/gnu"

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort '%s: Assertion failed: %s\n' "$script" "$*"
}

configure_platform() {
    realpath=$(get_realpath_command)
    brew=$(get_brew_command)
    bins=

    for id in $ID $ID_LIKE; do
	case $id in
	    (debian|opensuse|freebsd|windows)
		bins="bin sbin"
		break
		;;
	esac
    done

    if [ -z "${bins-}" ]; then
	bins="sbin bin"
    fi
}

get_brew_command() (
    for dir in $(get_brew_dirs | xargs $realpath); do
	if [ -x $dir/bin/brew ]; then
	    printf '%s\n' "$dir/bin/brew"
	fi
    done
)

get_brew_dirs() {
    ls -d $HOMEBREW_DIRS $HOME/.linuxbrew 2>/dev/null || true
}

get_brew_prefix() {
    "$brew" --prefix 2>/dev/null || true
}

get_brew_packages() {
    PATH="$PATH:$(dirname "$brew")" "${script_prefix}brew-list-keg-only"
}

get_brew_pathnames() {
    get_brew_packages | awk -v prefix=$1 "$AWK_EXPR"
}

get_pkgsrc_dirs() {
    ls -d $PKGSRC_DIRS 2>/dev/null || true
}

get_prefix_dirs() {
    printf '%s\n' $SYSTEM_DIRS \
	   $(get_solaris_dirs) \
	   $(get_pkgsrc_dirs) \
	   $(get_brew_dirs)
}

get_profile_bins() {
    printf '%s\n' $PROFILE_BINS
}

get_realpath_command() {
    if [ -x "${script_prefix}get-realpath" ]; then
	printf '%s\n' "${script_prefix}get-realpath"
    elif [ -x /bin/realpath ]; then
	printf '%s\n' /bin/realpath
    fi
}

get_solaris_dirs() {
    ls -d $SOLARIS_DIRS 2>/dev/null || true
}

include_binary_directories() {
    for bindir; do
	if is_to_be_included "$dir/$bindir" "${PATH-}"; then
	    case "$dir" in
		(/opt/csw)
		    PATH="${PATH:+$PATH:}$dir/$bindir"
		    ;;
		(*)
		    PATH="$dir/$bindir${PATH:+:$PATH}"
		    ;;
	    esac
	fi
    done
}

include_common_directories() {
    # add common binary directories to PATH (if they exist)
    for dir in $COMMON_BINS; do
	if is_to_be_included "$dir" "$PATH"; then
	    PATH="$dir${PATH:+:$PATH}"
	fi
    done

    # add common prefix directories to paths (if they exist)

    for dir in $(get_prefix_dirs); do
	case "$dir" in
	    (/opt/local|/opt/pkg|/usr/gnu|/usr/local|/usr/pkg)
		INFOPATH="$(remove_directory "$dir/share/info" "${INFOPATH-}")"
		MANPATH="$(remove_directory "$dir/share/man" "${MANPATH-}")"
		INFOPATH="$(remove_directory "$dir/info" "${INFOPATH-}")"
		MANPATH="$(remove_directory "$dir/man" "${MANPATH-}")"
		PATH="$(remove_directory "$dir/sbin" "${PATH-}")"
		PATH="$(remove_directory "$dir/bin" "${PATH-}")"
		;;
	    (*)
		if [ ! -d "$dir" ]; then
		    continue
		fi
	esac

	if is_to_be_included "$dir/info" "${INFOPATH-}"; then
	    INFOPATH="$dir/info${INFOPATH:+:$INFOPATH}"
	elif is_to_be_included "$dir/share/info" "${INFOPATH-}"; then
	    INFOPATH="$dir/share/info${INFOPATH:+:$INFOPATH}"
	fi

	if is_to_be_included "$dir/man" "${MANPATH-}"; then
	    MANPATH="$dir/man${MANPATH:+:$MANPATH}"
	elif is_to_be_included "$dir/share/man" "${MANPATH-}"; then
	    MANPATH="$dir/share/man${MANPATH:+:$MANPATH}"
	fi

	include_binary_directories $bins
	include_pkgconf_directories $dir
    done
}

include_brew_directories() {
    if [ -z "${brew-}" ]; then
	return
    fi

    brew_prefix=$(get_brew_prefix)
    dirnames="$brew_prefix $(get_brew_pathnames $brew_prefix)"

    if [ -n "$dirnames" ]; then
	eval "$(${script_prefix}set-oss-parameters $dirnames)"
    fi
}

include_pkgconf_directories() {
    pkgdir=$1/lib/pkgconfig

    if is_to_be_included $pkgdir "${PKG_CONFIG_PATH-}"; then
	case "$1" in
	    (/opt/csw)
		true
		;;
	    (/opt/local)
		PKG_CONFIG_PATH="${PKG_CONFIG_PATH:+$PKG_CONFIG_PATH:}$pkgdir"
		;;
	    (*)
		PKG_CONFIG_PATH="$pkgdir${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH}"
		;;
	esac
    fi
}

include_profile_directories() {
    # add user info directory to INFOPATH (if it exists)
    if ! is_included "$HOME/info" "${PATH-}"; then
	INFOPATH="$HOME/info${INFOPATH:+:$INFOPATH}"
    fi

    # add user man directory to MANPATH (if it exists)
    if ! is_included "$HOME/man" "${PATH-}"; then
	MANPATH="$HOME/man${MANPATH:+:$MANPATH}"
    fi

    # add user binary directories to PATH (if they exist)
    for bin in $(get_profile_bins); do
	if ! is_included "$HOME/$bin" "${PATH-}"; then
	    PATH="$HOME/$bin${PATH:+:$PATH}"
	fi
    done
}

parse_arguments() {
    no_export=false
    shell=$SHELL

    while getopts ns:h opt; do
	case $opt in
	    (n)
		no_export=true
		;;
	    (s)
		parse_shell "$OPTARG"
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -gt 0 ]; then
	usage_error '%s: Too many arguments\n' "$script"
    fi
}

set_profile_parameters() {
    configure_platform
    include_brew_directories
    include_common_directories
    include_profile_directories
    print_parameters $ALL_PARAMETERS
}

usage() {
    cat <<-EOF >&2
Usage: $script: [-s SHELL]
       $script: -n
       $script: -h
EOF
}

script=$(basename "$0")

case "$0" in
    (*/*)
	script_dir=$(cd "$(dirname "$0")" && pwd)
	;;
    (*)
	script_dir=
	;;
esac

script_prefix=${script_dir:+$script_dir/}

. "${script_prefix}parameter-functions.sh"

eval $("${script_prefix}get-os-release" -x)
parse_arguments "$@"
set_profile_parameters

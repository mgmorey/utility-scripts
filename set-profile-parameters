#!/bin/sh -eu

# set-profile-parameters: print shell commands to set profile parameters
# Copyright (C) 2020  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

ALL_PARAMETERS="CPPFLAGS INFOPATH LDLIBS MANPATH PATH PKG_CONFIG_PATH"

COMMON_BINDIRS="/usr/lib/cups/bin"
PROFILE_BINDIRS="bin .cargo/bin .linuxbrew/bin .local/bin .pyenv/bin"

HOMEBREW_DIRS="/home/linuxbrew/.linuxbrew /opt/homebrew /usr/local"
SYSTEM_DIRS="/usr /usr/gnu"

PKGSRC_DIRS="/usr/pkg /opt/pkg /opt/local"
SOLARIS_DIRS="/opt/csw /opt/*studio*"

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort '%s: Assertion failed: %s\n' "$script" "$*"
}

configure_platform() {
    bindirs=
    brew=$(get_homebrew_binary)

    for id in $ID $ID_LIKE; do
	case $id in
	    (debian|opensuse|freebsd|windows)
		bindirs="bin sbin"
		break
		;;
	esac
    done

    if [ -z "${bindirs-}" ]; then
	bindirs="sbin bin"
    fi
}

get_directory() {
    printf '%s\n' "$1" | sed 's/^-[IL]//'
}

get_homebrew_binary() (
    for dir in $HOME/.linuxbrew $(get_homebrew_dirs); do
	if [ -x $dir/bin/brew ]; then
	    printf '%s\n' "$dir/bin/brew"
	fi
    done
)

get_homebrew_dirs() {
    ls -d $HOMEBREW_DIRS 2>/dev/null || true
}

get_homebrew_keg_only() (
    export PATH="$PATH:$(dirname $brew)"
    "${script_prefix}brew-list-keg-only"
)

get_homebrew_prefix() (
    if [ -z "$brew" ]; then
	return
    fi

    dir="$(cd "$(dirname "$brew")/../opt" && pwd)"

    if [ -d "$dir" ]; then
	printf '%s\n' "$dir"
	break
    fi
)

get_macos_python_bindir() (
    case "$ID" in
	 (macos)
	     for version in 3.7 3.8 3.9; do
		 if [ -d "$HOME/Library/Python/$version/bin" ]; then
		     printf '%s\n' "Library/Python/$version/bin"
		 fi
	     done
	     ;;
    esac
)

get_pkgsrc_dirs() {
    ls -d $PKGSRC_DIRS 2>/dev/null || true
}

get_profile_bindirs() (
    macos_python_bindir="$(get_macos_python_bindir)"

    if [ -n "$macos_python_bindir" ]; then
	printf '%s\n' "$macos_python_bindir"
    fi

    printf '%s\n' $PROFILE_BINDIRS
)

get_solaris_dirs() {
    ls -d $SOLARIS_DIRS 2>/dev/null || true
}

include_binary_directories() {
    for bindir; do
	if is_to_be_included "$dir/$bindir" "${PATH-}"; then
	    case "$dir" in
		(/opt/csw)
		    PATH="${PATH:+$PATH:}$dir/$bindir"
		    ;;
		(*)
		    PATH="$dir/$bindir${PATH:+:$PATH}"
		    ;;
	    esac
	fi
    done
}

include_base_directories() {
    include_homebrew_keg_directories
}

include_common_directories() {
    # add common binary directories to PATH (if they exist)
    for dir in $COMMON_BINDIRS; do
	if is_to_be_included "$dir" "$PATH"; then
	    PATH="$dir${PATH:+:$PATH}"
	fi
    done

    # add common prefix directories to paths (if they exist)

    dirs="$SYSTEM_DIRS $(get_solaris_dirs)"
    dirs="$dirs $(get_pkgsrc_dirs) $(get_homebrew_dirs)"

    for dir in $dirs; do
	case "$dir" in
	    (/opt/local|/opt/pkg|/usr/gnu|/usr/local|/usr/pkg)
		INFOPATH="$(remove_directory "$dir/share/info" "${INFOPATH-}")"
		MANPATH="$(remove_directory "$dir/share/man" "${MANPATH-}")"
		INFOPATH="$(remove_directory "$dir/info" "${INFOPATH-}")"
		MANPATH="$(remove_directory "$dir/man" "${MANPATH-}")"
		PATH="$(remove_directory "$dir/sbin" "${PATH-}")"
		PATH="$(remove_directory "$dir/bin" "${PATH-}")"
		;;
	    (*)
		if [ ! -d "$dir" ]; then
		    continue
		fi
	esac

	if is_to_be_included "$dir/info" "${INFOPATH-}"; then
	    INFOPATH="$dir/info${INFOPATH:+:$INFOPATH}"
	elif is_to_be_included "$dir/share/info" "${INFOPATH-}"; then
	    INFOPATH="$dir/share/info${INFOPATH:+:$INFOPATH}"
	fi

	if is_to_be_included "$dir/man" "${MANPATH-}"; then
	    MANPATH="$dir/man${MANPATH:+:$MANPATH}"
	elif is_to_be_included "$dir/share/man" "${MANPATH-}"; then
	    MANPATH="$dir/share/man${MANPATH:+:$MANPATH}"
	fi

	include_binary_directories $bindirs
	include_pkgconf_directories $dir
    done
}

include_homebrew_keg_directories() {
    if [ -z "${brew-}" ]; then
	return
    fi

    prefix=$(get_homebrew_prefix)

    if [ -z "${prefix-}" ]; then
	return
    fi

    for pkg in $(get_homebrew_keg_only 2>/dev/null | sort -r || true); do
	if is_to_be_included -I$prefix/$pkg/include "${CPPFLAGS-}"; then
	    CPPFLAGS="-I$prefix/$pkg/include${CPPFLAGS:+ $CPPFLAGS}"
	fi

	if is_to_be_included -L$prefix/$pkg/lib "${LDLIBS-}"; then
	    LDLIBS="-L$prefix/$pkg/lib${LDLIBS:+ $LDLIBS}"
	fi

	if is_to_be_included $prefix/$pkg/lib/$pkg/man "${MANPATH-}"; then
	    MANPATH="$prefix/$pkg/lib/$pkg/man${MANPATH:+:$MANPATH}"
	fi

	if is_to_be_included $prefix/$pkg/share/man "${MANPATH-}"; then
	    MANPATH="$prefix/$pkg/share/man${MANPATH:+:$MANPATH}"
	fi

	if is_to_be_included $prefix/$pkg/bin "${PATH-}"; then
	    PATH="$prefix/$pkg/bin${PATH:+:$PATH}"
	fi

	for pkgdir in $prefix/$pkg/lib/pkgconfig /usr/share/pkgconfig; do
	    if is_to_be_included $pkgdir "${PKG_CONFIG_PATH-}"; then
		PKG_CONFIG_PATH="$pkgdir${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH}"
	    fi
	done
    done
}

include_pkgconf_directories() {
    pkgdir=$1/lib/pkgconfig

    if is_to_be_included $pkgdir "${PKG_CONFIG_PATH-}"; then
	case "$1" in
	    (/opt/csw)
		true
		;;
	    (/opt/local)
		PKG_CONFIG_PATH="${PKG_CONFIG_PATH:+$PKG_CONFIG_PATH:}$pkgdir"
		;;
	    (*)
		PKG_CONFIG_PATH="$pkgdir${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH}"
		;;
	esac
    fi
}

include_profile_directories() {
    INFOPATH="$(remove_directory "$HOME/info" "${INFOPATH-}")"
    MANPATH="$(remove_directory "$HOME/man" "${MANPATH-}")"
    PATH="$(remove_directory "$HOME/bin" "${PATH-}")"
    profile_bindirs="$(get_profile_bindirs)"

    for dir in $profile_bindirs; do
	PATH="$(remove_directory "$HOME/$dir" "${PATH-}")"
    done

    # add user info directory to INFOPATH (if it exists)
    if ! is_included "$HOME/info" "${PATH-}"; then
	INFOPATH="$HOME/info${INFOPATH:+:$INFOPATH}"
    fi

    # add user man directory to MANPATH (if it exists)
    if ! is_included "$HOME/man" "${PATH-}"; then
	MANPATH="$HOME/man${MANPATH:+:$MANPATH}"
    fi

    # add user binary directories to PATH (if they exist)
    for dir in $profile_bindirs; do
	if ! is_included "$HOME/$dir" "${PATH-}"; then
	    PATH="$HOME/$dir${PATH:+:$PATH}"
	fi
    done
}

include_xcode_directories() {
    if [ -x /usr/bin/xcrun ]; then
	dir=$(/usr/bin/xcrun --show-sdk-path)
	CPPFLAGS="-I$dir/usr/include"
	LDLIBS="-L$dir/usr/lib"
    fi
}

is_included() {
    assert [ $# -eq 2 ]
    assert [ -n "$1" ]
    printf '%s\n' "$2" | grep -Eq '(^|[: ])'"$1"'([: ]|$)'
}

is_to_be_included() {
    assert [ $# -eq 2 ]
    assert [ -n "$1" ]
    test -d "$(get_directory "$1")" && ! is_included "$1" "$2"
}

parse_arguments() {
    no_export=false
    shell=$SHELL

    while getopts ns:h opt; do
	case $opt in
	    (n)
		no_export=true
		;;
	    (s)
		parse_shell "$OPTARG"
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -gt 0 ]; then
	usage_error '%s: Too many arguments\n' "$script"
    fi
}

parse_shell() {
    case $(basename "${1%.exe}") in
	(*bash|ksh*|zsh)
	    shell=${1%.exe}
	    ;;
	(csh|tcsh)
	    shell=${1%.exe}
	    ;;
	(fish)
	    shell=${1%.exe}
	    ;;
	(sh)
	    shell=${1%.exe}
	    ;;
	(*)
	    usage_error '%s: %s: Unsupported shell\n' "$script" "$1"
	    ;;
    esac
}

print_parameter() {
    assert [ $# -gt 0 ]
    assert [ -n "$1" ]

    if [ -z "${2-}" ]; then
	continue
    elif [ "$no_export" = true ]; then
	printf '%s=%s\n' "$1" "$2"
    else
	case "$(basename ${shell%.exe})" in
	    (*bash|ksh*|zsh)
		printf 'export %s="%s"\n' "$1" "$2"
		;;
	    (csh|tcsh)
		printf 'setenv %s "%s";\n' "$1" "$2"
		;;
	    (fish)
		printf 'set -x %s "%s";\n' "$1" "$2"
		;;
	    (*)
		printf '%s="%s"\n' "$1" "$2"
		printf 'export %s\n' "$1"
		;;
	esac
    fi
}

print_parameters() {
    assert [ $# -gt 0 ]

    for var; do
	eval $(printf 'value="${%s-}"\n' "$var")
	print_parameter "$var" "$value"
    done
}

remove_directory() {
    assert [ $# -eq 2 ]
    printf '%s\n' "$2" | sed '
s|:'"$1"':|:|g
s|^'"$1"':||
s|:'"$1"'$||
s|^'"$1"'$||
'
}

set_profile_parameters() {
    configure_platform
    include_base_directories
    include_common_directories
    include_profile_directories
    print_parameters $ALL_PARAMETERS
}

usage() {
    cat <<-EOF >&2
Usage: $script: [-s SHELL]
       $script: -n
       $script: -h
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf '%s\n' '' >&2
    usage
    exit 2
}

script=$(basename "$0")

case "$0" in
    (*/*)
	script_dir=$(cd "$(dirname "$0")" && pwd)
	;;
    (*)
	script_dir=
	;;
esac

script_prefix=${script_dir:+$script_dir/}

eval $("${script_prefix}get-os-release" -x)

parse_arguments "$@"
set_profile_parameters

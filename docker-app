#!/bin/sh -eu

# docker-app: wrap Docker CLI commands for Python Flask application
# Copyright (C) 2019  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

PROXY_PARAMETERS="FTP_PROXY HTTP_PROXY HTTPS_PROXY \
ftp_proxy http_proxy https_proxy no_proxy"

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$0" "$*"
}

get_default_remote_image() {
    printf "%s\n" "${GITHUB_USERNAME-$(get_real_user)}/$APP_NAME"
}

get_default_run_options() {
    printf "%s\n" -dp $APP_PORT:$APP_PORT --rm
}

get_default_tag() {
    date +%Y%m%d%H%M
}

get_build_argument() {
    eval value=\${$var-}

    case "$var" in
	(no_proxy)
	    printf "%s %s=%s\n" --build-arg "$var" "${value:-*}"
	    ;;
	(*)
	    if [ -n "$value" ]; then
		printf "%s %s\n" --build-arg "$var"
	    fi
	    ;;
    esac
}

get_build_options() {
    for var in $PROXY_PARAMETERS; do
	get_build_argument $var
    done
}

get_realpath() (
    assert [ $# -ge 1 ]
    realpath=$(which realpath)

    if [ -n "$realpath" ]; then
	$realpath "$@"
    else
	for file; do
	    if expr "$file" : '/.*' >/dev/null; then
		printf "%s\n" "$file"
	    else
		printf "%s\n" "$PWD/${file#./}"
	    fi
	done
    fi
)

docker_app() {
    eval $("${script_prefix}get-configuration" app.ini)
    image=$(get_default_remote_image)

    case "$action" in
	(build)
	    build_opts=$(get_build_options)
	    docker build ${build_opts+$build_opts }-t $image${tag:+:$tag} .
	    docker tag $image${tag:+:$tag} $image:latest
	    ;;
	(pull)
	    docker pull $image${tag:+:$tag}
	    ;;
	(push)
	    docker push $image${tag:+:$tag}
	    ;;
	(run)
	    run_opts=$(get_default_run_options)
	    docker run ${run_opts+$run_opts }$image${tag:+:$tag}
	    ;;
	(*)
	    usage_error "%s: invalid argument -- %s\n" "$0" "$1"
	    ;;
    esac
}

parse_arguments() {
    tag=

    while getopts dlt:h opt; do
	case $opt in
	    (d)
		tag=$(get_default_tag)
		;;
	    (l)
		tag=latest
		;;
	    (t)
		tag=$OPTARG
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -lt 1 ]; then
	usage_error "%s: Not enough arguments\n" "$0"
    elif [ $# -gt 1 ]; then
	usage_error "%s: Too many arguments\n" "$0"
    fi

    action="$1"
}

usage() {
    cat <<EOF >&2
Usage: $0 [-t TAG] pull
       $0 [-t TAG] push
       $0 [-t TAG] tag
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf "%s\n" '' >&2
    usage
    exit 2
}

case "$0" in
    (*/*)
	script_dir=$(get_realpath "$(dirname "$0")")
	;;
    (*)
	script_dir=
	;;
esac

script_prefix=${script_dir:+$script_dir/}

. "${script_prefix}common-functions.sh"

parse_arguments "$@"
docker_app

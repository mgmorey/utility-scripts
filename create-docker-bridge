#!/bin/sh -eu

# create-docker-bridge: create Docker bridge network
# Copyright (C) 2020  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

create_docker_bridge() {
    docker network create $(get_options) $network
}

get_gw() {
    subnet=$(get_net $1)
    octet=$(get_octets $subnet 4)
    printf '%s.%s\n' $(get_octets $subnet 1,2,3) $((octet + 1))
}

get_net() {
    printf '%s\n' $1 | cut -d/ -f 1
}

get_octets() {
    printf '%s\n' $1 | cut -d. -f ${2:-1,2,3,4}
}

get_options() {
    if [ "$dhcp" = true ]; then
	ipam_driver=dhcp
	ipam_opt=${parent:+dhcp_interface=$parent}
    else
	ipam_driver=
	ipam_opt=
    fi

    printf '%s\n' --driver=$driver \
	   ${ipam_driver:+--ipam-driver=$ipam_driver} \
	   ${ipam_opt:+--ipam-opt=$ipam_opt} \
	   ${parent:+--opt=parent=$parent}

    if [ -n "${net-}" ]; then
	printf '%s\n' --subnet=$subnet

	if [ "$first" = true ]; then
	    printf '%s\n' --gateway=$(get_gw $subnet)
	elif [ -n "${gateway-}" ]; then
	    printf '%s\n' --gateway=$gateway
	fi
    fi
}

parse_arguments() {
    dhcp=false
    first=false
    gateway=
    subnet=
    parent=

    while getopts dfg:n:p:h opt; do
	case $opt in
	    (d)
		dhcp=true
		;;
	    (f)
		first=true
		;;
	    (g)
		gateway=$OPTARG
		;;
	    (n)
		subnet=$OPTARG
		;;
	    (p)
		parent=$OPTARG
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		usage_error
		;;
	esac
    done

    shift $(($OPTIND - 1))
    network=$1

    case "$network" in
	(bridge[0-9])
	    driver=bridge
	    ;;
	(ipvlan[0-9])
	    driver=ipvlan
	    ;;
	(macvlan[0-9])
	    driver=macvlan
	    ;;
	(*)
	    usage_error "%s: %s: Invalid network name\n" "$0" "$network" >&2
	    ;;
    esac
}

usage() {
    cat <<EOF >&2
Usage: $0 [-d] [-f] [-g GATEWAY] [-n SUBNET] [-p PARENT] bridgeN
       $0 [-d] [-f] [-g GATEWAY] [-n SUBNET] [-p PARENT] ipvlanN
       $0 [-d] [-f] [-g GATEWAY] [-n SUBNET] [-p PARENT] macvlanN
       $0 -h
EOF
}

usage_error() {
    printf "$@" >&2
    exit 2
}

if [ $# -lt 1 ]; then
    usage_error "%s: Not enough arguments\n" "$0"
fi

parse_arguments "$@"
create_docker_bridge

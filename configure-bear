#!/bin/sh -eu

# configure-cppcheck: download and configure Build EAR
# Copyright (C) 2022  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

BEAR_ARCHIVE_DIR="$HOME/Downloads/Bear"
BEAR_ARCHIVE_SUFFIX=.tar.gz

BEAR_MIRROR_BASE_URL=https://github.com/rizsotto/Bear

BEAR_OPT_PREFIX=/opt/%s
BEAR_PROJECT_NAME=Bear
BEAR_PROJECT_VERSION=3.1.5

abort() {
    printf "$@" >&2
    exit 1
}

abort_invalid_prefix() {
    usage_error '%s: invalid prefix -- %s\n' "$script" "$*"
}

abort_not_supported() {
    abort '%s: %s: %s not supported\n' "$script" "$PRETTY_NAME" "$*"
}

assert() {
    "$@" || abort '%s: Assertion failed: %s\n' "$script" "$*"
}

configure_bear() {
    umask 0022

    if [ "$force" = true ]; then
	rm -rf "$src_dirname" "$archive_pathname"
    fi

    mkdir -p "$archive_dirname" "$build_dirname" "$src_dirname"
    download_archive "$archive_pathname" "$archive_url"
    extract_archive "$archive_pathname" "$src_dirname"

    if [ "$build" = true ]; then
	cmake -DENABLE_UNIT_TESTS=OFF \
	      -DENABLE_FUNC_TESTS=OFF \
	      -B "$build_dirname" \
	      -S "$src_dirname"
	cd "$build_dirname"
	make_build $(get_bear_make_options) all
    fi

    if [ "$check" = true ]; then
	make_check $(get_bear_make_options) "check"
    fi
}

configure_paths() {
    archive_dirname="$BEAR_ARCHIVE_DIR"
    archive_basename=$version
    build_dirname="$HOME/Documents/build/$BEAR_PROJECT_NAME-$archive_basename"
    src_dirname="$HOME/Documents/src/Bear/$BEAR_PROJECT_NAME-$archive_basename"
    archive_filename=$archive_basename$BEAR_ARCHIVE_SUFFIX
    archive_pathname="$BEAR_ARCHIVE_DIR/$BEAR_PROJECT_NAME-$archive_filename"
    archive_url=$BEAR_MIRROR_BASE_URL/archive/refs/tags/$archive_filename
}

get_bear_make_options() (
    prefix=$(get_prefix)
    printf '%s\n' \
	   FILESDIR="$prefix/share" \
	   HAVE_RULES=yes \
	   MATCHCOMPILER=yes
)

get_dependencies() {
    get-packages $BEAR_PROJECT_NAME-build $BEAR_PROJECT_NAME-test
}

get_prefix() {
    printf "$prefix" "$BEAR_PROJECT_NAME-$version"
}

install_bear() {
    install_prefix=$(get_prefix)

    if [ "$install" != true ]; then
	return 0
    elif [ "$ID" != windows -a "$(id -u)" -gt 0 ]; then
	if [ ! -w "$install_prefix" ]; then
	    return 0
	fi
    fi

    umask 0022
    cd "$build_dirname"
    make_install $(get_bear_make_options) install

    if [ "$(id -u)" -eq 0 ]; then
	find "$src_dirname" -user root -type d | xargs chown-real-user
	find "$src_dirname" -user root -type f | xargs chown-real-user
    fi
}

parse_arguments() {
    build=true
    check=false
    force=false
    install=false
    keep=false
    prefix=$BEAR_OPT_PREFIX
    version=$BEAR_PROJECT_VERSION

    while getopts bcfiknp:v:h opt; do
	case $opt in
	    (b)
		build=true
		;;
	    (c)
		check=true
		;;
	    (f)
		force=true
		;;
	    (i)
		install=true
		;;
	    (k)
		keep=true
		;;
	    (n)
		build=false
		;;
	    (p)
		case $OPTARG in
		    ($HOME/.local|$LOCAL_PREFIX|$BEAR_OPT_PREFIX)
			prefix=$OPTARG
			;;
		    (*)
			abort_invalid_prefix $OPTARG
			;;
		esac
		;;
	    (v)
		case $OPTARG in
		    (3.[0-9]|3.[0-9].[1-9][0-9])
			version=$OPTARG
			;;
		    (*)
			abort_invalid_version $OPTARG
			;;
		esac
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -gt 0 ]; then
	usage_error '%s: Too many arguments\n' "$script"
    fi
}

usage() {
    cat <<EOF >&2
Usage: $script [-b] [-c] [-f] [-i] [-k] [-n] [-p PREFIX] [-v VERSION]
       $script -h
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf '%s\n' '' >&2
    usage
    exit 2
}

validate_platform() {
    case "$ID" in
	(centos)
	    case "$VERSION_ID" in
		(7)
		    return
		    ;;
		(8)
		    return
		    ;;
		(*)
		    abort_not_supported Release
		    ;;
	    esac
	    ;;
	(debian|raspbian)
	    return
	    ;;
	(fedora)
	    return
	    ;;
	(opensuse-*)
	    return
	    ;;
	(rhel|ol|almalinux)
	    case "$VERSION_ID" in
		(7.*)
		    return
		    ;;
		(8.*)
		    return
		    ;;
		(9.*)
		    return
		    ;;
		(*)
		    abort_not_supported Release
		    ;;
	    esac
	    ;;
	(rocky)
	    case "$VERSION_ID" in
		(7.*)
		    return
		    ;;
		(8.*)
		    return
		    ;;
		(*)
		    abort_not_supported Release
		    ;;
	    esac
	    ;;
	(ubuntu)
	    return
	    ;;
	(freebsd)
	    return
	    ;;
	(illumos)
	    return
	    ;;
	(macos)
	    return
	    ;;
	(netbsd)
	    return
	    ;;
	(solaris)
	    return
	    ;;
	(windows)
	    return
	    ;;
	(*)
	    abort_not_supported "Operating system"
	    ;;
    esac
}

script=$(basename "$0")

case "$0" in
    (*/*)
	script_dir=$(cd "$(dirname "$0")" && pwd)
	;;
    (*)
	script_dir=
	;;
esac

script_prefix=${script_dir:+$script_dir/}

. "${script_prefix}common-functions.sh"
. "${script_prefix}config-functions.sh"

set_user_profile "$script_dir"
eval $(get-os-release -x)
validate_platform
configure_platform
parse_arguments "$@"
configure_paths

if [ "$keep" != true ]; then
    install_dependencies
fi

if [ "$(id -u)" -eq 0 ]; then
    run_unpriv /bin/sh -c "$0 $*"
else
    configure_bear
fi

install_bear

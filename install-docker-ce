#!/bin/sh -eu

# install-docker-ce: install Docker Community Edition
# Copyright (C) 2018  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

DOCKER_BASE_URL=https://download.docker.com
DOCKER_GROUP_ID=docker

DOCKER_PKGS_DEBIAN=docker-ce
DOCKER_PKGS_REDHAT="docker-ce docker-ce-cli containerd.io"

abort() {
    printf "$@" >&2
    exit 1
}

abort_not_supported() {
    abort "%s: %s: %s not supported\n" "$0" "$PRETTY_NAME" "$*"
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$0" "$*"
}

get_realpath() (
    assert [ $# -ge 1 ]
    realpath=$(which realpath)

    if [ -n "$realpath" ]; then
	$realpath "$@"
    else
	for file; do
	    if expr "$file" : '/.*' >/dev/null; then
		printf "%s\n" "$file"
	    else
		printf "%s\n" "$PWD/${file#./}"
	    fi
	done
    fi
)

grep_docker() {
    grep -q '^\(docker\|docker.io\)$'
}

grep_docker_ce() {
    grep -q '^\(docker-ce\|docker-ce-cli\)$'
}

install_dependencies() {
    dependencies=$("$script_dir/get-docker-packages")

    if [ -n "$dependencies" ]; then
	"$script_dir/install-packages" $dependencies
    fi
}

install_docker_ce() {
    case "$kernel_name" in
	(Linux|GNU)
	    case "$ID" in
		(debian|raspbian)
		    case "$VERSION_ID" in
			(10)
			    packages=$DOCKER_PKGS_DEBIAN
			    ;;
			(*)
			    abort_not_supported Release
			    ;;
		    esac
		    ;;
		(ubuntu|neon)
		    case "$VERSION_ID" in
			(18.04)
			    packages=$DOCKER_PKGS_DEBIAN
			    ;;
			(19.04)
			    packages=$DOCKER_PKGS_DEBIAN
			    ;;
			(*)
			    abort_not_supported Release
			    ;;
		    esac
		    ;;
		(linuxmint)
		    case "$VERSION_ID" in
			(19.2)
			    packages=$DOCKER_PKGS_DEBIAN
			    ;;
			(*)
			    abort_not_supported Release
			    ;;
		    esac
		    ;;
		(kali)
		    case "$VERSION_ID" in
			(2019.3)
			    packages=$DOCKER_PKGS_DEBIAN
			    ;;
			(*)
			    abort_not_supported Release
			    ;;
		    esac
		    ;;
		(ol)
		    case "$VERSION_ID" in
			(7.7)
			    yum-config-manager --enable ol7_optional_latest
			    yum-config-manager --enable ol7_addons
			    packages=$DOCKER_PKGS_REDHAT
			    ;;
			(*)
			    abort_not_supported Distro
			    ;;
		    esac
		    ;;
		(centos)
		    case "$VERSION_ID" in
			(7)
			    packages=$DOCKER_PKGS_REDHAT
			    ;;
			(*)
			    abort_not_supported Distro
			    ;;
		    esac
		    ;;
		(*)
		    abort_not_supported Distro
		    ;;
	    esac
	    ;;
	(*)
	    abort_not_supported "Operating system"
	    ;;
    esac

    installed_packages=$("$script_dir/get-installed-docker-packages")

    if printf "%s\n" $installed_packages | grep_docker; then
	printf "Removing native Docker packages\n"

	if ! "$script_dir/uninstall-packages" $installed_packages; then
	    exit $?
	fi
    elif printf "%s\n" $installed_packages | grep_docker_ce; then
	printf "Docker CE packages are installed\n"
	exit 0
    else
	printf "No Docker packages installed\n"
    fi

    install_dependencies
    install_docker_repo

    if ! "$script_dir/install-packages" $packages; then
	exit $?
    fi

    case "$kernel_name" in
	(Linux|GNU)
	    case "$ID" in
		(ol)
		    semanage permissive -a container_runtime_t
		    ;;
	    esac
	    ;;
    esac

    if [ -n "${SUDO_USER-}" ] && [ "$(id -u)" -eq 0 ]; then
	install_docker_group
    fi
}

install_docker_group() {
    if ! getent group docker >/dev/null; then
	groupadd $DOCKER_GROUP_ID
    fi

    members="$(getent group $DOCKER_GROUP_ID | awk -F: '{print $4}')"

    if ! printf "%s\n" "$members" | grep -q "\<$SUDO_USER\>"; then
	usermod -a -G $DOCKER_GROUP_ID $SUDO_USER
	printf "Please restart the machine before using docker\n"
    fi
}

install_docker_repo() {
    distro_codename="$(lsb_release -cs)"
    docker_url="$DOCKER_BASE_URL/linux/$ID"

    case "$kernel_name" in
	(Linux|GNU)
	    case "$ID" in
		(debian|raspbian|ubuntu)
		    docker_repo="deb [arch=amd64] $docker_url $distro_codename stable"
		    curl -fsSL $docker_url/gpg | apt-key add -
		    add-apt-repository "$docker_repo"
		    apt-get update
		    ;;
		(ol|centos)
		    docker_url="$DOCKER_BASE_URL/linux/centos"
		    yum-config-manager --add-repo $docker_url/docker-ce.repo
		    ;;
	    esac
	    ;;
    esac
}

script_dir=$(get_realpath "$(dirname "$0")")

eval $("$script_dir/get-os-release" -X)

install_docker_ce "$@"

#!/bin/sh -eu

# install-docker-ce: install Docker Community Edition
# Copyright (C) 2018  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

DOCKER_BASE_URL=https://download.docker.com
ORACLE_LINUX_REPOS="ol7_addons ol7_optional_latest"

abort() {
    printf "$@" >&2
    exit 1
}

abort_not_supported() {
    abort "%s: %s: %s not supported\n" "$0" "$PRETTY_NAME" "$*"
}

add_gpg_key() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]

    case "$kernel_name" in
	(Linux|GNU)
	    case "$ID" in
		(debian|raspbian|ubuntu)
		    curl -fsSL $1/gpg | apt-key add - >/dev/null 2>&1
		    ;;
	    esac
	    ;;
    esac
}

add_repositories() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    repo="$(get_docker_repo $1)"

    case "$kernel_name" in
	(Linux|GNU)
	    case "$ID" in
		(debian|raspbian|ubuntu)
		    add-apt-repository "$repo"
		    ;;
		(rhel|ol|centos)
		    yum-config-manager --add-repo "$repo" >/dev/null
		    ;;
	    esac
	    ;;
    esac
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$0" "$*"
}

enable_additional_repositories() {
    case "$kernel_name" in
	(Linux|GNU)
	    case "$ID" in
		(ol)
		    case "$VERSION_ID" in
			(7.*)
			    for repo in $ORACLE_LINUX_REPOS; do
				yum-config-manager --enable $repo >/dev/null
			    done
			    ;;
		    esac
		    ;;
	    esac
	    ;;
    esac
}

get_architecture() {
    machine=$(uname -m)

    case "$machine" in
	(x86_64)
	    printf "%s\n" amd64
	    ;;
	(armv7l)
	    printf "%s\n" armhf
	    ;;
	(*)
	    printf "%s\n" $machine
	    ;;
    esac
}

get_codename() {
    lsb_release -cs
}

get_difference() (
    assert [ $# -eq 2 ]

    for item in $1; do
	if ! printf "%s\n" $2 | grep -Eq '^'"$item"'$'; then
	    printf "%s\n" "$item"
	fi
    done
)

get_docker_origin() {
    for package; do
	case $package in
	    (docker-ce|docker-ce-cli)
		origin=docker.com
		;;
	    (docker|docker.io)
		origin=native
		;;
	    (podman-docker)
		origin=podman
		;;
	esac

	if [ -n "${origin-}" ]; then
	    printf "%s\n" "$origin"
	    return
	fi
    done
}

get_docker_repo() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    arch=$(get_architecture)

    case "$kernel_name" in
	(Linux|GNU)
	    case "$ID" in
		(debian|raspbian|ubuntu)
		    printf "%s\n" "deb [arch=$arch] $1 $(get_codename) stable"
		    ;;
		(rhel|ol|centos)
		    printf "%s\n" "$DOCKER_BASE_URL/linux/centos/docker-ce.repo"
		    ;;
	    esac
	    ;;
    esac
}

get_docker_url() {
    printf "%s\n" "$DOCKER_BASE_URL/linux/$ID"
}

get_realpath() (
    assert [ $# -ge 1 ]
    realpath=$(which realpath)

    if [ -n "$realpath" ]; then
	$realpath "$@"
    else
	for file; do
	    if expr "$file" : '/.*' >/dev/null; then
		printf "%s\n" "$file"
	    else
		printf "%s\n" "$PWD/${file#./}"
	    fi
	done
    fi
)

install_dependencies() {
    dependencies=$("$script_dir/get-docker-ce-dependencies")

    if [ -n "$dependencies" ]; then
	"$script_dir/install-packages" $dependencies
    fi
}

install_docker_ce() {
    validate_platform
    installed_packages=$("$script_dir/get-installed-docker-packages")
    origin=$(get_docker_origin $installed_packages)

    if [ -n "$origin" ]; then
	case "$origin" in
	    (docker.com)
		printf "Docker Community Edition is installed.\n"
		;;
	    (native)
		printf "Native Docker is installed.\n"
		;;
	    (podman)
		printf "Podman is installed.\n"
		;;
	esac
    else
	printf "Docker is not installed.\n"
    fi

    selected_packages=$("$script_dir/get-docker-ce-packages")
    packages=$(get_difference "$installed_packages" "$selected_packages")

    if [ -n "$packages" ]; then
	if ! "$script_dir/uninstall-packages" $packages; then
	    return $?
	fi
    fi

    if [ -n "$selected_packages" ]; then
	if "$script_dir/install-packages" $selected_packages; then
	    postinstall_docker $selected_packages
	else
	    return $?
	fi
    fi
}

install_group() {
    assert [ $# -eq 1 ]

    if ! getent group $1 >/dev/null; then
	groupadd $1
    fi
}

modify_user() (
    assert [ $# -eq 1 ]

    if ! getent group $1 >/dev/null; then
	return 0
    fi

    members="$(getent group $1 | awk -F: '{print $4}')"

    if ! printf "%s\n" "$members" | grep -q "\<$SUDO_USER\>"; then
	usermod -a -G $1 $SUDO_USER
	printf "Please restart the machine before using docker.\n"
    fi
)

preinstall_docker() {
    docker_url=$(get_docker_url)
    install_dependencies
    add_gpg_key "$docker_url"
    add_repositories "$docker_url"
    enable_additional_repositories
}

postinstall_docker() {
    case "$kernel_name" in
	(Linux|GNU)
	    case "$ID" in
		(ol)
		    semanage permissive -a container_runtime_t
		    ;;
	    esac
	    ;;
    esac

    if [ -z "${SUDO_USER-}" ] || [ "$(id -u)" -gt 0 ]; then
	return 0
    fi

    group=$("$script_dir/get-docker-group" "$@")

    if [ -n "$group" ]; then
	install_group $group
	modify_user $group
    fi
}

remove_native_docker_packages() {
    if ! "$script_dir/uninstall-packages" "$@"; then
	exit $?
    fi
}

validate_platform() {
    arch=$(get_architecture)

    case "$arch" in
	(amd64)
	    :
	    ;;
	(*)
	    abort "%s: %s: Architecture not supported" "$0" "$arch"
	    ;;
    esac

    # Refer to https://docs.docker.com/install/#supported-platforms

    case "$ID" in
	(centos)
	    return
	    ;;
	(debian)
	    return
	    ;;
	(fedora)
	    return
	    ;;
	(ubuntu)
	    if [ "${VERSION_ID%.*}" -gt 18 ]; then
		return
	    fi
	    ;;
    esac

    abort_not_supported "Operating system"
}

if [ $# -gt 0 ]; then
    abort "%s: Too many arguments\n" "$0"
fi

script_dir=$(get_realpath "$(dirname "$0")")

eval $("$script_dir/get-os-release" -x)

install_docker_ce "$@"

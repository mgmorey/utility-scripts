#!/bin/sh -eu

TAG=latest

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$0" "$*"
}

get_default_local_image() {
    printf "%s\n" "$APP_NAME"
}

get_default_remote_image() {
    printf "%s\n" "$(get_user_name)/$APP_NAME"
}

get_realpath() (
    assert [ $# -ge 1 ]
    realpath=$(which realpath)

    if [ -n "$realpath" ]; then
	$realpath "$@"
    else
	for file; do
	    if expr "$file" : '/.*' >/dev/null; then
		printf "%s\n" "$file"
	    else
		printf "%s\n" "$PWD/${file#./}"
	    fi
	done
    fi
)

get_user_name() {
    printf "%s\n" "${SUDO_USER-${USER-$LOGIN}}}"
}

docker_repo() {
    eval $(get-configuration app.ini)
    local_image=$(get_default_local_image)
    remote_image=$(get_default_remote_image)

    case "$1" in
	(pull)
	    docker pull $remote_image:$TAG
	    ;;
	(push)
	    docker push $remote_image:$TAG
	    ;;
	(tag)
	    docker tag $local_image:$TAG $remote_image:$TAG
	    ;;
	(*)
	    usage "%s: invalid argument -- %s\n" "$0" "$1"
	    exit 1
	    ;;
    esac
}

usage() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
	printf "%s\n" "" >&2
    fi

    cat <<EOF >&2
Usage: $0 pull
       $0 push
       $0 tag
EOF
}

script_dir=$(get_realpath "$(dirname "$0")")

. "$script_dir/common-functions.sh"

set_user_profile "$script_dir"
docker_repo "$@"

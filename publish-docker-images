#!/bin/sh -eu

BASE_URL=artifactory.prod.tableautools.com:6555/dataservices

DATABASES="ibm-db2 mssql mysql oracle postgres presto sap-hana"

IBM_DB2_VERSIONS="11.5.4.0"
MSSQL_VERSIONS="2017 2019"
MYSQL_VERSIONS="5.6 5.7 8.0"
ORACLE_VERSIONS="12 18 19"
POSTGRES_VERSIONS="9.4 11 12"
PRESTO_VERSIONS="336"
SAP_HANA_VERSIONS="ee2"

TAG="$(date +%Y%m%d%H%M)"

abort() {
    printf "$@" >&2
    exit 1
}

build_image() {
    docker $(get_build_command $image)
}

create_builder() {
    case $1 in
	(tableau-ibm-db2-*)
	    if [ "${DOCKER_CLI_EXPERIMENTAL-}" = enabled ]; then
		builder=$(get_insecure_builder)

		if [ "$builder" != insecure-builder ]; then
		    docker $(get_buildx_create_command) \
			   "$(get_buildkitd_flags)"
		fi
	    fi
	    ;;
    esac
}

get_build_command() {
    case "$1" in
	(tableau-ibm-db2-*)
	    if [ "${DOCKER_CLI_EXPERIMENTAL-}" = enabled ]; then
		get_buildx_build_command -t "$1" .
	    else
		printf '%s\n' build -t "$1" .
	    fi
	    ;;
	(tableau-*)
	    printf '%s\n' build -t "$1" .
	    ;;
    esac
}

get_buildkitd_flags() {
    printf '%s\n' "--allow-insecure-entitlement security.insecure"
}

get_buildx_build_command() {
    printf '%s\n' buildx build --allow security.insecure --load "$@"
}

get_buildx_create_command() {
    printf '%s\n' buildx create --use --name insecure-builder --buildkitd-flags
}

get_buildx_ls_command() {
    printf '%s\n' "buildx ls"
}

get_insecure_builder() {
    docker $(get_buildx_ls_command) | \
	awk 'NR > 1 && $1 == "insecure-builder" { print $1 }'
}

get_versions() {
    case $database in
	(ibm-db2)
	    versions_default=$IBM_DB2_VERSIONS
	    ;;
	(mssql)
	    versions_default=$MSSQL_VERSIONS
	    ;;
	(mysql)
	    versions_default=$MYSQL_VERSIONS
	    ;;
	(oracle)
	    versions_default=$ORACLE_VERSIONS
	    ;;
	(postgres)
	    versions_default=$POSTGRES_VERSIONS
	    ;;
	(presto)
	    versions_default=$PRESTO_VERSIONS
	    ;;
	(sap-hana)
	    versions_default=$SAP_HANA_VERSIONS
	    ;;
	(*)
	    abort '%s: %s: DBMS not recognized\n' "$0" "$database"
	    ;;
    esac

    printf '%s\n' "$versions_default"
}

parse_arguments() {
    databases=
    no_build=true
    only_build=false
    tag=
    versions=

    while getopts blnt:v:h opt; do
	case $opt in
	    (b)
		no_build=false
		only_build=true
		;;
	    (l)
		tag=latest
		;;
	    (n)
		no_build=true
		only_build=false
		;;
	    (t)
		tag="$OPTARG"
		;;
	    (v)
		versions="$OPTARG"
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))
    databases="$@"
}

publish_docker_images() {
    for database; do
	for version in ${versions:-$(get_versions)}; do
	    publish_image $database $version
	done
    done
}

publish_image() (
    image=tableau-${1}-${2%.0}
    repo_image=$BASE_URL/$image:${tag:-$TAG}

    if [ -d docker-${1}/$2 ]; then
	cd docker-${1}/$2

	if [ "$no_build" = false ]; then
	    create_builder $image
	    build_image $image
	fi

	if [ "$only_build" = false ]; then
	    docker tag $image $repo_image
	    docker push $repo_image
	fi
    fi
)

usage_error() {
    printf "$@" >&2
    exit 2
}

parse_arguments "$@"
publish_docker_images ${databases:-$DATABASES}

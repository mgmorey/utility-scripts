#!/bin/sh -eu

# run-sql: invoke SQL DBMS command line client
# Copyright (C) 2018  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

ENV_FILE=.env
SQL_DIRS="scripts sql"

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$0" "$*"
}

configure_platform() {
    user=$(get_real_user)
}

exec_sql_command() {
    eval ${1+$1 }$(get_cli_command)
}

format_pathname() {
    printf "$1/$2\n"
}

get_cli_command() {
    case "$DATABASE_DIALECT" in
	(mssql)
	    get_cli_mssql
	    ;;
	(mysql)
	    get_cli_mysql
	    ;;
	(oracle)
	    get_cli_oracle
	    ;;
	(postgresql)
	    get_cli_postgresql
	    ;;
	(sap-hana)
	    get_cli_sap_hana
	    ;;
	(sqlite)
	    get_cli_sqlite
	    ;;
	(*)
	    abort "%s: Invalid SQL dialect '%s'\n" "$DATABASE_DIALECT"
    esac
}

get_cli_mssql() {
    printf "%s\n" sqlcmd \
	   -H ${DATABASE_HOST:-${MSSQL_HOST:-localhost}} \
	   -U ${DATABASE_USER:-${MSSQL_USER:-$user}} \
	   -P ${DATABASE_PASSWORD:-${MYSQL_PASSWORD-}} \
	   # -d ${DATABASE_INSTANCE:-${MYSQL_INSTANCE-}}
}

get_cli_mysql() {
    printf "%s\n" mysql \
	   --protocol=${DATABASE_PROTOCOL:-${MYSQL_PROTOCOL:-TCP}} \
	   --host=${DATABASE_HOST:-${MYSQL_HOST:-localhost}} \
	   --port=${DATABASE_PORT:-${MYSQL_PORT:-3306}} \
	   --user=${DATABASE_USER:-${MYSQL_USER:-$user}} \
	   --password=${DATABASE_PASSWORD:-${MYSQL_PASSWORD-}} \
	   --database=${DATABASE_INSTANCE:-${MYSQL_INSTANCE:-mysql}}

    if [ -n "${command-}" ]; then
	printf "%s\n" --execute="\"$command\""
    fi
}

get_cli_oracle() {
    host=${DATABASE_HOST:-${ORACLE_HOST:-localhost}}
    port=${DATABASE_PORT:-${ORACLE_PORT:-1521}}
    username=${DATABASE_USER:-${ORACLE_USER:-$user}}
    password=${DATABASE_PASSWORD:-${ORACLE_PASSWORD-}}
    instance=${DATABASE_INSTANCE:-${ORACLE_INSTANCE:-ORCLCDB}}
    printf "%s\n" sqlplus "$username/$password@//$host:$port/$instance"
}

get_cli_postgresql() {
    printf "%s\n" psql \
	   --host=${DATABASE_HOST:-${POSTGRES_HOST:-localhost}} \
	   --port=${DATABASE_PORT:-${POSTGRES_PORT:-5432}} \
	   --username=${DATABASE_USER:-${POSTGRES_USER:-$user}} \
	   --password

    if [ -n "${command-}" ]; then
	printf "%s\n" --command="\"$command\""
    fi
}

get_cli_sap_hana() {
    host=${DATABASE_HOST:-${SAP_HANA_HOST-}}
    port=${DATABASE_PORT:-${SAP_HANA_PORT-}}
    username=${DATABASE_USER:-${SAP_HANA_USER:-SYSTEM}}
    password=${DATABASE_PASSWORD:-${SAP_HANA_PASSWORD-}}
    instance=${DATABASE_INSTANCE:-${SAP_HANA_INSTANCE:-SYSTEMDB}}
    printf "%s\n" hdbsql -i 90 \
	   ${host:+-n $host${port:+:$port}} \
	   ${instance:+-d $instance} \
	   ${username:+-u $username} \
	   ${password:+-p $password}
}

get_cli_sqlite() {
    printf "%s\n" sqlite3 ${DATABASE_PATHNAME:-${SQLITE_PATHNAME-}}
}

get_realpath() (
    assert [ $# -ge 1 ]
    realpath=$(which realpath)

    if [ -n "$realpath" ]; then
	$realpath "$@"
    else
	for file; do
	    if expr "$file" : '/.*' >/dev/null; then
		printf "%s\n" "$file"
	    else
		printf "%s\n" "$PWD/${file#./}"
	    fi
	done
    fi
)

has_env_file() {
    if [ "$1" = / ]; then
	return 0
    elif [ -r "$1/$ENV_FILE" ]; then
	return 0
    else
	return 1
    fi
}

parse_argument() {
    script=

    case "$1" in
	(*.sql)
	    name=$1
	    ;;
	(*.sqlite)
	    if [ "$DATABASE_DIALECT" = sqlite ]; then
		DATABASE_PATHNAME=$1
	    else
		abort "%s: Invalid SQL script name: %s\n" "$0" "$1"
	    fi
	    ;;
	(*)
	    name="$1.sql"
	    ;;
    esac

    if [ -z "${name:-}" ]; then
	return 1
    elif [ -e "$name" ]; then
	script="$1"
    else
	for sql_dir in $SQL_DIRS; do
	    file="$(format_pathname $sql_dir $name)"

	    if [ -e "$file" ]; then
		script="$file"
		break
	    fi
	done

	if [ -z "${script}" ]; then
	    abort "%s: No such script file\n" "$name"
	fi
    fi

    scripts="${scripts:+$scripts }$script"
}

parse_arguments() {
    command=
    scripts=

    while getopts c:h opt; do
	case $opt in
	    (c)
		command=$OPTARG
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		usage_error
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -gt 0 ]; then
	for arg; do
	    parse_argument $arg
	done
    fi
}

run_sql() {
    configure_platform

    if [ -n "$scripts" ]; then
	for script in $scripts; do
	    if [ -f $script ]; then
		exec <$script
		exec_sql_command
	    elif [ -d $script ]; then
		abort "%s: %s: Is a directory\n" "$0" "$script"
	    else
		abort "%s: %s: No such script file\n" "$0" "$script"
	    fi
	done
    else
	exec_sql_command exec
    fi
}

usage() {
    cat <<EOF >&2
Usage: $0: [-c COMMAND]
       $0: [SCRIPT ...]
       $0: -h
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf "%s\n" '' >&2
    usage
    exit 2
}

case "$0" in
    (*/*)
	script_dir=$(dirname "$0")
	;;
    (*)
	script_dir=
	;;
esac

script_prefix=${script_dir:+$(get_realpath "$script_dir")/}

. "${script_prefix}common-functions.sh"

env_dir=$(pwd)

until $(has_env_file "$env_dir"); do
    env_dir="$(dirname $env_dir)"
done

if [ "$env_dir" = / ]; then
    env_dir=$HOME
fi

if [ -r "$env_dir/$ENV_FILE" ]; then
    env_file="$env_dir/$ENV_FILE"
else
    env_file=
fi

if [ -n "$env_file" ]; then
    if [ "${VENV_VERBOSE-false}" = true ]; then
	printf "%s\n" "Loading $ENV_FILE environment variables" >&2
    fi

    . "$env_file"
fi

if [ -z "${DATABASE_DIALECT-}" ]; then
    DATABASE_DIALECT=sqlite
fi

parse_arguments "$@"
run_sql

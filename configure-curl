#!/bin/sh -eu

# configure-curl: download and configure cURL
# Copyright (C) 2021  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

CURL_ARCHIVE_DIR="$HOME/Downloads/cURL"
CURL_ARCHIVE_SUFFIX=.tar.gz

CURL_MIRROR_BASE_URL=https://curl.se

CURL_OPT_PREFIX=/opt/%s
CURL_PROJECT_NAME=curl
CURL_PROJECT_VERSION=7.82.0
CURL_TLS_BACKEND=openssl

abort() {
    printf "$@" >&2
    exit 1
}

abort_invalid_prefix() {
    usage_error '%s: invalid prefix -- %s\n' "$script" "$*"
}

abort_invalid_tls_backend() {
    usage_error '%s: invalid TLS backend -- %s\n' "$script" "$*"
}

abort_invalid_version() {
    usage_error '%s: invalid version -- %s\n' "$script" "$*"
}

abort_not_supported() {
    abort '%s: %s: %s not supported\n' "$script" "$PRETTY_NAME" "$*"
}

assert() {
    "$@" || abort '%s: Assertion failed: %s\n' "$script" "$*"
}

configure_curl() {
    mkdir -p "$build_dir" "$(dirname "$src_dir")" "$CURL_ARCHIVE_DIR"
    download_archive
    extract_files
    cd "$build_dir"

    if [ "$force" = true ]; then
	clean_build
    elif [ ! -r config.status ]; then
	true
    else
	return 0
    fi

    command=$(get_configure_command $src_dir)
    printf '%s\n' "$command"
    eval $command

    if [ "$build" = true ]; then
	$make${make_options:+ $make_options}
    fi

    if [ "$check" = true ]; then
	$make${make_options:+ $make_options} check
    fi
}

configure_paths() {
    basename=$CURL_PROJECT_NAME-$version
    build_dir="$HOME/Documents/build/$basename"
    filename=$basename$CURL_ARCHIVE_SUFFIX
    pathname="$CURL_ARCHIVE_DIR/$filename"
    src_dir="$HOME/Documents/src/cURL/$basename"
}

download_archive() {
    url=$CURL_MIRROR_BASE_URL/download/$filename

    if [ ! -r "$pathname" ]; then
	cd "$CURL_ARCHIVE_DIR"
	wget $url
    fi

}

get_configure_options() (
    if [ -n "${prefix-}" ]; then
        options="${options:+$options }--prefix=$(get_prefix)"
    fi

    if [ "${tls_backend-}" = gnutls ]; then
        options="${options:+$options }--with-gnutls"
    fi

    if [ "${with_metalink-}" = true ]; then
        options="${options:+$options }--with-metalink"
    fi

    if [ -n "${options:-}" ]; then
	printf '%s\n' "$options"
    fi
)

get_dependencies() {
    get-packages bootstrap curl-build curl-test
}

get_prefix() {
    printf "$prefix" "$CURL_PROJECT_NAME-$version"
}

install_curl() {
    if [ "$install" != true ]; then
	return 0
    elif [ "$ID" != macos -a "$ID" != windows -a "$(id -u)" -gt 0 ]; then
	return 0
    fi

    umask 0022
    cd "$build_dir"
    install_prefix=$(get_prefix)
    $make${make_options:+ $make_options} prefix="$install_prefix" install
    install_project_link "$install_prefix"
}

parse_arguments() {
    build=true
    check=false
    debug=false
    force=false
    install=false
    prefix=$CURL_OPT_PREFIX
    tls_backend=$CURL_TLS_BACKEND
    version=$CURL_PROJECT_VERSION
    with_metalink=${WITH_METALINK-}

    while getopts bcfimnp:t:v:h opt; do
	case $opt in
	    (b)
		build=true
		;;
	    (c)
		check=true
		;;
	    (f)
		force=true
		;;
	    (i)
		install=true
		;;
	    (m)
		with_metalink=true
		;;
	    (n)
		build=false
		;;
	    (p)
		case $OPTARG in
		    ($HOME/.local|$LOCAL_PREFIX|$CURL_OPT_PREFIX)
			prefix=$OPTARG
			;;
		    (*)
			abort_invalid_prefix $OPTARG
			;;
		esac
		;;
	    (t)
		case $OPTARG in
		    (gnutls|openssl)
			tls_backend=$OPTARG
			;;
		    (*)
			abort_invalid_tls_backend $OPTARG
			;;
		esac
		;;
	    (v)
		case $OPTARG in
		    (7.[1-9][0-9]|7.[1-9][0-9].[1-9])
			version=$OPTARG
			;;
		    (*)
			abort_invalid_version $OPTARG
			;;
		esac
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -gt 0 ]; then
	usage_error '%s: Too many arguments\n' "$script"
    fi
}

usage() {
    cat <<EOF >&2
Usage: $script [-b] [-c] [-f] [-i] [-m] [-n] [-p PREFIX] [-t TLS-BACKEND] \
[-v VERSION]
       $script -h
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf '%s\n' '' >&2
    usage
    exit 2
}

validate_platform() {
    case "$ID" in
	(centos)
	    case "$VERSION_ID" in
		(7)
		    return
		    ;;
		(8)
		    return
		    ;;
		(*)
		    abort_not_supported Release
		    ;;
	    esac
	    ;;
	(debian|raspbian)
	    return
	    ;;
	(fedora)
	    return
	    ;;
	(opensuse-*)
	    return
	    ;;
	(rhel|ol)
	    case "$VERSION_ID" in
		(7.*)
		    return
		    ;;
		(8.*)
		    return
		    ;;
		(*)
		    abort_not_supported Release
		    ;;
	    esac
	    ;;
	(ubuntu)
	    return
	    ;;
	(freebsd)
	    return
	    ;;
	(illumos)
	    return
	    ;;
	(macos)
	    return
	    ;;
	(netbsd)
	    return
	    ;;
	(solaris)
	    return
	    ;;
	(windows)
	    return
	    ;;
	(*)
	    abort_not_supported "Operating system"
	    ;;
    esac
}

script=$(basename "$0")

case "$0" in
    (*/*)
	script_dir=$(cd "$(dirname "$0")" && pwd)
	;;
    (*)
	script_dir=
	;;
esac

script_prefix=${script_dir:+$script_dir/}

. "${script_prefix}common-functions.sh"
. "${script_prefix}config-functions.sh"

set_user_profile "$script_dir"
eval $(get-os-release -x)
validate_platform
configure_platform
parse_arguments "$@"
configure_paths
install_dependencies

if [ "$(id -u)" -eq 0 ]; then
    run_unpriv /bin/sh -c "$0 $*"
else
    configure_curl
fi

install_curl

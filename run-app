#!/bin/sh -eu

# run-app: run Python Flask application
# Copyright (C) 2018  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

APP_ENV_VARS="DATABASE_DIALECT DATABASE_FILENAME DATABASE_HOST \
DATABASE_INSTANCE DATABASE_PASSWORD DATABASE_PORT DATABASE_USER"

FLASK_ENV_VARS="FLASK_APP FLASK_ENV"

ENV_VERBOSE=false

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort '%s: Assertion failed: %s\n' "$script" "$*"
}

configure_platform() {
    case "${uname_kernel=$(uname -s)}" in
	(CYGWIN_NT-*)
	    pypi_utilities=pip
	    ;;
	(MINGW64_NT-*)
	    pypi_utilities=pipenv
	    ;;
	(*)
	    pypi_utilities=
	    ;;
    esac
}

export_parameters() {
    for var; do
	# Export nonempty parameters only
	if [ -n "${var-}" ]; then
	    export $var
	fi
    done
}

run_app() {
    eval $(get-os-release -x)
    eval $("${script_prefix}get-configuration" app.ini)

    while getopts d:h:p: opt; do
	case $opt in
	    (d)
		if [ "$OPTARG" != "$(pwd)" ]; then
		    if [ "${ENV_VERBOSE-false}" = true ]; then
			printf 'Changing directory from: %s\n' "$(pwd)" >&2
			printf 'Changing directory to: %s\n' "$OPTARG" >&2
		    fi

		    cd "$OPTARG"
		fi
		;;
	    (h)
		if [ "$OPTARG" != "$HOME" ]; then
		    if [ "${ENV_VERBOSE-false}" = true ]; then
			printf 'Changing HOME from: %s\n' "$HOME" >&2
			printf 'Changing HOME to: %s\n' "$OPTARG" >&2
		    fi

		    export HOME="$OPTARG"
		fi
		;;
	    (p)
		if [ "$OPTARG" != "$PATH" ]; then
		    if [ "${ENV_VERBOSE-false}" = true ]; then
			printf 'Changing PATH from: %s\n' "$PATH" >&2
			printf 'Changing PATH to: %s\n' "$OPTARG" >&2
		    fi

		    export PATH="$OPTARG"
		fi
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ -z "${FLASK_APP-}" -a -n "${APP_MODULE-}" ]; then
	FLASK_APP=$APP_MODULE
    fi

    export_parameters $FLASK_ENV_VARS

    for utility in ${pypi_utilities:-$PYPI_UTILITIES}; do
	case "$utility" in
	    (pipenv)
		pipenv=$(get_command pipenv || true)

		if [ -n "$pipenv" ]; then
		    run_via_pipenv "$@"
		    return 0
		fi
		;;
	    (pip)
		pip=$(get_command -v "$PYTHON_VERSIONS" pip || true)

		if [ -n "$pip" ]; then
		    run_via_pip "$@"
		    return 0
		fi
		;;
	esac
    done

    abort '%s: Neither pip nor pipenv found in PATH\n' "$script"
}

run_via_pip() {
    pip_install_files=$PIP_INSTALL_ALL
    refresh_via_pip ${VENV_DIRECTORY-venv}

    if [ -r .env ]; then
	if [ "${VENV_VERBOSE-false}" = true ]; then
	    printf '%s\n' "Loading .env environment variables" >&2
	fi

	. ./.env
    fi

    export_parameters $APP_ENV_VARS
    eval "$@"
}

run_via_pipenv() {
    if ! $pipenv --venv >/dev/null 2>&1; then
	create_virtualenv_via_pipenv $pipenv
	$pipenv sync --dev
    fi

    if [ "${PIPENV_ACTIVE:-0}" -gt 0 ]; then
	eval "$@"
    else
	eval $pipenv run "$@"
    fi
}

usage_error() {
    printf "$@" >&2
    exit 2
}

script=$(basename "$0")

case "$0" in
    (*/*)
	script_dir=$(cd "$(dirname "$0")" && pwd)
	;;
    (*)
	script_dir=
	;;
esac

script_prefix=${script_dir:+$script_dir/}

. "${script_prefix}common-functions.sh"
. "${script_prefix}utility-functions.sh"

export LANG=${LANG-en_US.UTF-8}
export LC_ALL=${LC_ALL-en_US.UTF-8}

if [ $# -lt 1 ]; then
    usage_error '%s: Not enough arguments\n' "$script"
fi

if [ -n "${VIRTUAL_ENV:-}" ]; then
    abort '%s: Must not be run within a virtual environment\n' "$script"
fi

real_user=$(get_real_user)
validate_user_name $real_user
set_user_profile "$script_dir"
eval $(get-configuration app.ini)
eval $(get-os-release -x)
configure_platform
run_app "$@"

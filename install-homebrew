#!/bin/sh -eu

# install-homebrew: install the HomeBrew package manager brew
# Copyright (C) 2018  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

BASE_URL=https://raw.githubusercontent.com
HOMEBREW_URL=$BASE_URL/Homebrew/install/master/install
LINUXBREW_URL=$BASE_URL/Linuxbrew/install/master/install.sh

abort() {
    printf "$@" >&2
    exit 1
}

abort_not_supported() {
    abort "%s: %s: %s not supported\n" "$0" "$PRETTY_NAME" "$*"
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$0" "$*"
}

configure_platform() {
    for id in $ID $ID_LIKE; do
	case "$id" in
	    (macos)
		PKG_DIR=/Library/Developer/CommandLineTools/Packages/
		PKG_NAME=macOS_SDK_headers_for_macOS_10.14.pkg
		break
		;;
	esac
    done
}

get_realpath() (
    assert [ $# -ge 1 ]
    realpath=$(which realpath)

    if [ -n "$realpath" ]; then
	$realpath "$@"
    else
	for file; do
	    if expr "$file" : '/.*' >/dev/null; then
		printf "%s\n" "$file"
	    else
		printf "%s\n" "$PWD/${file#./}"
	    fi
	done
    fi
)

install_homebrew() {
    validate_platform
    configure_platform
    brew=$(which brew 2>/dev/null || true)

    if [ -n "$brew" ]; then
	if [ "$kernel_name" = Linux -a "$brew" = /usr/bin/brew ]; then
	    if [ -x $HOME/.linuxbrew ]; then
		return
	    elif [ -x /home/linuxbrew ]; then
		return
	    fi
	else
	    return
	fi
    fi

    preinstall_homebrew

    for id in $ID $ID_LIKE; do
	case "$id" in
	    (centos)
		case "$VERSION_ID" in
		    (7)
			install_linuxbrew
			break
			;;
		    (8)
			install_linuxbrew
			break
			;;
		esac
		;;
	    (debian)
		case "$VERSION_ID" in
		    (10)
			install_linuxbrew
			break
			;;
		esac
		;;
	    (fedora)
		install_linuxbrew
		break
		;;
	    (kali)
		case "$VERSION_ID" in
		    (2019.3)
			install_linuxbrew
			break
			;;
		esac
		;;
	    (linuxmint)
		case "$VERSION_ID" in
		    (19.2)
			install_linuxbrew
			break
			;;
		esac
		;;
	    (opensuse)
		install_linuxbrew
		break
		;;
	    (rhel|ol)
		case "$VERSION_ID" in
		    (7.*)
			install_linuxbrew
			break
			;;
		    (8.*)
			install_linuxbrew
			break
			;;
		esac
		;;
	    (ubuntu)
		case "$VERSION_ID" in
		    (18.04)
			run_unpriv brew
			break
			;;
		    (19.10)
			run_unpriv brew
			break
			;;
		esac
		;;
	    (macos)
		run_unpriv /usr/bin/ruby -e "$(curl -fsSL $HOMEBREW_URL)"
		break
		;;
	esac
    done
}

install_linuxbrew() {
    run_unpriv /bin/sh -c "$(curl -fsSL $LINUXBREW_URL)"
}

preinstall_homebrew() {
    case "$kernel_name" in
	(Linux)
	    packages="$(get-homebrew-packages)"
	    pattern="$(get-development-pattern)"
	    install-packages ${pattern:+-p "$pattern" }$packages
	    ;;
	(Darwin)
	    installer -allowUntrusted -pkg $PKG_DIR/$PKG_NAME -target /
	    ;;
    esac
}

validate_platform() {
    for id in $ID $ID_LIKE; do
	case "$id" in
	    (centos)
		case "$VERSION_ID" in
		    (7)
			return
			;;
		    (8)
			return
			;;
		esac
		;;
	    (debian)
		case "$VERSION_ID" in
		    (10)
			return
			;;
		esac
		;;
	    (fedora)
		return
		;;
	    (kali)
		case "$VERSION_ID" in
		    (2019.3)
			return
			;;
		esac
		;;
	    (linuxmint)
		case "$VERSION_ID" in
		    (19.2)
			return
			;;
		esac
		;;
	    (opensuse)
		return
		;;
	    (rhel|ol)
		case "$VERSION_ID" in
		    (7.*)
			return
			;;
		    (8.*)
			return
			;;
		esac
		;;
	    (ubuntu)
		case "$VERSION_ID" in
		    (18.04)
			return
			;;
		    (19.10)
			return
			;;
		esac
		;;
	    (macos)
		return
		;;
	esac
    done

    abort_not_supported "Operating system"
}

if [ $# -gt 0 ]; then
    abort "%s: Too many arguments\n" "$0"
fi

script_dir=$(get_realpath "$(dirname "$0")")

. "$script_dir/common-functions.sh"

set_user_profile "$script_dir"
eval $(get-os-release -x)
install_homebrew

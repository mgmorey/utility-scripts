#!/bin/sh -eu

# configure-git: download and configure Git
# Copyright (C) 2020  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

BASE_URL=https://github.com/git/git/archive

LOCAL_PREFIX=/usr/local
OPENCSW_PREFIX=/opt/csw
PREFIX=/usr/local

abort() {
    printf "$@" >&2
    exit 1
}

abort_invalid_prefix() {
    usage_error '%s: invalid prefix -- %s\n' "$script" "$*"
}

abort_invalid_toolkit() {
    usage_error '%s: invalid toolkit -- %s\n' "$script" "$*"
}

abort_not_supported() {
    abort '%s: %s: %s not supported\n' "$script" "$PRETTY_NAME" "$*"
}

assert() {
    "$@" || abort '%s: Assertion failed: %s\n' "$script" "$*"
}

chown_real_user() {
    user_name=$(get_real_user)

    if [ -n "$user_name" ]; then
	user_id=$(get_user_id $user_name)
	group_id=$(get_group_id $user_name)
	chown "$user_id${group_id:+:$group_id}" "$@"
    fi
}

clean_build() {
    if [ -r Makefile ]; then
	$make distclean
    fi
}

configure_compiler() {
    if [ -n "${1-}" ]; then
	cc="$(get_compiler $1)"
	cflags="$(get_compiler_flags $1)"
    fi

    if [ -n "${2-}" ]; then
	cppflags="$(get_include_flags "$2")"
    fi

    if [ -n "${3-}" ]; then
	ldflags="$(get_linker_flags "$3")"
    fi

    pkg_config_path="$(get_pkg_config_path)"
}

configure_git() {
    basename=master
    command=$(get_configure_command $src_dir)
    filename=$basename.zip
    pathname=$archive_dir/$filename
    mkdir -p "$(dirname "$src_dir")" "$archive_dir"
    download_archive
    extract_files
    cd "$src_dir"

    if [ "$force" = true ]; then
	clean_build
    elif [ ! -r config.status ]; then
	true
    else
	exit 0
    fi

    $make configure
    printf '%s\n' "$command"
    eval $command

    if [ "$build" = true ]; then
	$make ${ncpu:+-j $ncpu }all doc
    fi
}

configure_platform() {
    archive_dir="$HOME/Downloads/Git"
    make=make
    ncpu=$(lscpu | awk '$1 == "CPU(s):" {print $2}')
    prefix=$PREFIX
    src_dir="$HOME/Documents/src/Git/git-master"

    for id in $ID $ID_LIKE; do
	case "$id" in
	    (rhel|ol)
		case "$VERSION_ID" in
		   (8.*)
			configure_platform_linux_redhat_8
			break
			;;
		esac
		;;
	    (illumos)
		configure_platform_unix_illumos
		break
		;;
	    (netbsd)
		configure_platform_bsd_netbsd
		break
		;;
	    (solaris)
		configure_platform_unix_solaris
		break
		;;
	esac
    done

    if [ -n "${cc-}" ] && [ ! -x $cc ]; then
	abort '%s: %s: No such compiler\n' "$script" "$cc"
    fi

    if [ -n "${libgif-}" ] && [ ! -x $libgif ]; then
	abort '%s: %s: No such shared object\n' "$script" "$libgif"
    fi
}

configure_platform_bsd_netbsd() {
    make=gmake
    include_prefix /usr/pkg
    configure_compiler "/usr/bin/gcc" "${incdirs-}" "${libdirs-}"
    libgif="$libdir/libgif.so"
}

configure_platform_linux_redhat_8() {
    include_prefix $LOCAL_PREFIX
    configure_compiler "/usr/bin/gcc" "${incdirs-}" "${libdirs-}"
    libgif="$libdir/libgif.so"
}

configure_platform_unix_illumos() {
    include_prefix $LOCAL_PREFIX
    configure_compiler "/usr/bin/gcc -m64" "${incdirs-}" "${libdirs-}"
    libgif="$libdir/libgif.so"
}

configure_platform_unix_solaris() {
    include_prefix $OPENCSW_PREFIX amd64
    configure_compiler "/opt/developerstudio12.6/bin/cc -m64" "${incdirs-}" "${libdirs-}"
    libgif="$libdir/libgif.so"
}

download_archive() {
    url=$BASE_URL/$filename

    if [ ! -r "$pathname" ]; then
	cd "$archive_dir"
	wget $url
    fi

}

extract_files() {
    if [ ! -r "$src_dir/configure" ]; then
	cd "$(dirname "$src_dir")"

	case "$pathname" in
	    (*.zip)
		unzip "$pathname"
		;;
	esac
    fi
}

get_compiler() {
    printf '%s\n' "$1"
}

get_compiler_flags() {
    shift
    printf '%s\n' "$*"
}

get_configure_command() {
    options=$(get_configure_options)
    printf '%s' "$1/configure"

    if [ -n "${options-}" ]; then
	printf ' %s' "$options"
    fi

    if [ -n "${cc-}" ]; then
	printf ' CC=\"%s\"' "${cc-}"
    fi

    if [ -n "${cflags-}" ]; then
	printf ' CFLAGS=\"%s\"' "${cflags-}"
    fi

    if [ -n "${cppflags-}" ]; then
	printf ' CPPFLAGS=\"%s\"' "${cppflags-}"
    fi

    if [ -n "${ldflags-}" ]; then
	printf ' LDFLAGS=\"%s\"' "${ldflags-}"
    fi

    if [ -n "${pkg_config_path-}" ]; then
	printf ' PKG_CONFIG_PATH=\"%s\"' "${pkg_config_path-}"
    fi

    printf '\n'
}

get_configure_options() {
    if [ -n "${options:-}" ]; then
	printf '%s\n' "$options"
    fi
}

get_dependencies() {
    get-packages bootstrap git-build
}

get_include_flags() {
    assert [ $# -ge 1 ]
    printf -- "-I%s\n" "$@"
}

get_linker_flags() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    ldflags=

    for libdir; do
	case "$os_family" in
	    (gnu-*)
		ldflags="-Wl,--rpath=$libdir"
		;;
	    (unix)
		ldflags="-L$libdir -R$libdir"
		;;
	esac
    done

    if [ "${ldflags-}" ]; then
	printf '%s\n' "$ldflags"
    fi
}

get_pkg_config_path() {
    for pkgdir in ${pkgdirs-}; do
	pkg_config_path=${pkg_config_path+$pkg_config_path:}$pkgdir
    done

    if [ "${pkg_config_path-}" ]; then
	printf '%s\n' "$pkg_config_path"
    fi
}

include_prefix() {
    assert [ $# -ge 1 -a $# -le 2 ]
    assert [ -n "$1" ]
    incdir="$1/include"
    libdir="$1/lib${2+/$2}"
    incdirs="${incdirs+$incdirs }$incdir"
    libdirs="${libdirs+$libdirs }$libdir"

    if [ -d "$libdir/pkgconfig" ]; then
	pkgdirs="${pkgdirs+$pkgdirs }$libdir/pkgconfig"
    fi
}

install_dependencies() {
    for id in $ID $ID_LIKE; do
	case "$id" in
	    (windows)
		return 0
		;;
	esac
    done

    packages="$(get_dependencies | sort -u)"
    pattern="$(get-packages -s pattern development)"
    install-packages ${pattern:+-p "$pattern" }$packages
}

parse_arguments() {
    build=true
    force=false
    prefix=$PREFIX

    while getopts bfnp:h opt; do
	case $opt in
	    (b)
		build=true
		;;
	    (f)
		force=true
		;;
	    (n)
		build=false
		;;
	    (p)
		case $OPTARG in
		    ($HOME|/opt/*|/usr|/usr/local)
			if [ -d $OPTARG ]; then
			    prefix=$OPTARG
			else
			    abort_invalid_prefix $OPTARG
			fi
			;;
		    (*)
			abort_invalid_prefix $OPTARG
			;;
		esac
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -gt 0 ]; then
	usage_error '%s: Too many arguments\n' "$script"
    fi
}

usage() {
    cat <<EOF >&2
Usage: $script [-b] [-f] [-n] [-p PREFIX]
       $script -h
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf '%s\n' '' >&2
    usage
    exit 2
}

validate_platform() {
    case "$ID" in
	(centos)
	    case "$VERSION_ID" in
		(7)
		    return
		    ;;
		(8)
		    return
		    ;;
		(*)
		    abort_not_supported Release
		    ;;
	    esac
	    ;;
	(debian|raspbian)
	    return
	    ;;
	(fedora)
	    return
	    ;;
	(opensuse-*)
	    return
	    ;;
	(rhel|ol)
	    case "$VERSION_ID" in
		(7.*)
		    return
		    ;;
		(8.*)
		    return
		    ;;
		(*)
		    abort_not_supported Release
		    ;;
	    esac
	    ;;
	(freebsd)
	    return
	    ;;
	(illumos)
	    return
	    ;;
	(netbsd)
	    return
	    ;;
	(solaris)
	    return
	    ;;
	(windows)
	    return
	    ;;
	(*)
	    abort_not_supported "Operating system"
	    ;;
    esac
}

script=$(basename "$0")

case "$0" in
    (*/*)
	script_dir=$(cd "$(dirname "$0")" && pwd)
	;;
    (*)
	script_dir=
	;;
esac

script_prefix=${script_dir:+$script_dir/}

. "${script_prefix}common-functions.sh"

set_user_profile "$script_dir"
eval $(get-os-release -x)
validate_platform
configure_platform
parse_arguments "$@"

if [ "$(id -u)" -eq 0 ]; then
    install_dependencies
    run_unpriv "$0"
    cd "$src_dir"

    if [ "$build" = true ]; then
	$make ${ncpu:+-j $ncpu }install install-doc install-html
	find . -user root -type d | xargs chown-real-user
	find . -user root -type f | xargs chown-real-user
    fi
else
    install_dependencies
    configure_git
fi

#!/bin/sh -eu

# create-docker-volume-devices: create Docker volume devices
# Copyright (C) 2021  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

VOLUME_ARCHIVE=docker-volumes.tar
VOLUME_COMMENT='Docker Volume Account'
VOLUME_FILE=docker-volumes.txt
VOLUME_GID=500
VOLUME_HOME=/local/volumes
VOLUME_SHELL=/sbin/nologin
VOLUME_UID=500
VOLUME_USER=docker-volume

VOLUME_NAME_RE='[a-z][0-9_a-z-]+'
VOLUME_PATH_RE="([/]${VOLUME_NAME_RE})+"
VOLUME_RE="[.]?(${VOLUME_PATH_RE})?:${VOLUME_PATH_RE}(|:${VOLUME_NAME_RE})"

create_volume_devices() {
    if [ -z "$template_dir" ]; then
	template_dir=$(get_template_dir)
    fi

    volume_file=$(find_file $VOLUME_FILE)

    get_volumes | while read device mount name; do
	if ! expr "$device" : "$volume_home"'/' >/dev/null; then
	    continue
	elif [ -d $device ]; then
	    continue
	fi

	mkdir -m u=rwx,go=rx -p $device
	sub_dir=$(basename $device)

	if [ -d $template_dir/$sub_dir ]; then
	    /bin/cp -f $template_dir/$sub_dir/* $device
	fi
    done

    create_volume_group
    create_volume_user

    if [ -d $volume_home -a -w $volume_home ]; then
	chown -R $VOLUME_UID:$VOLUME_GID $volume_home
	chmod -R go+r $volume_home
    fi

    usermod -aG $volume_user ${SUDO_USER-$USER}
}

create_volume_group() {
    volume_group_args=$(print_volume_group_args)
    volume_group_data=$(get_volume_group_data || true)

    if [ -z "$volume_group_data" ]; then
	eval groupadd $volume_group_args
    elif [ "$volume_group_data" != "$(print_volume_group_data)" ]; then
	eval groupmod $volume_group_args
    fi
}

create_volume_user() {
    volume_user_args=$(print_volume_user_args)
    volume_user_data=$(get_volume_user_data || true)

    if [ -z "$volume_user_data" ]; then
	eval useradd -Nr $volume_user_args
    elif [ "$volume_user_data" != "$(print_volume_user_data)" ]; then
	eval usermod $volume_user_args
    fi
}

find_file() {
    for dir in . .. "$HOME"; do
	file="$dir/$1"

	if [ -f "$file" ]; then
	    printf '%s\n' "$file"
	    return 0
	fi
    done

    printf '%s\n' "$1"
}

get_template_dir() {
    user_home=$(getent passwd ${SUDO_USER-$USER} | cut -d: -f 6)
    printf '%s\n' $user_home/docker-volumes
}

get_volume_group_data() {
    getent group $VOLUME_GID | cut -d: -f 1-3
}

get_volume_user_data() {
    getent passwd $VOLUME_UID
}

get_volumes() {
    awk -F: '/^'"$VOLUME_RE"'$/ {print $1, $2, $3}' $volume_file
}

parse_arguments() {
    template_dir=
    volume_comment="$VOLUME_COMMENT"
    volume_home=$VOLUME_HOME
    volume_user=$VOLUME_USER

    while getopts c:d:n:t:h opt; do
	case $opt in
	    (c)
		volume_comment="$OPTARG"
		;;
	    (d)
		volume_home=$OPTARG
		;;
	    (n)
		volume_user=$OPTARG
		;;
	    (t)
		template_dir=$OPTARG
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -gt 0 ]; then
	usage_error "%s: Too many arguments\n" "$0"
    fi
}

print_volume_group_args() {
    printf '%s\n' \
	   -g $VOLUME_GID \
	   $volume_user
}

print_volume_group_data() {
    printf '%s:%s:%s\n' \
	   "$volume_user" \
	   "x" \
	   "$VOLUME_GID"
}

print_volume_user_args() {
    printf '%s\n' \
	   -c '"'"$volume_comment"'"' \
	   -d $volume_home \
	   -g $VOLUME_GID \
	   -s $VOLUME_SHELL \
	   -u $VOLUME_UID \
	   $volume_user
}

print_volume_user_data() {
    printf '%s:%s:%s:%s:%s:%s:%s\n' \
	   "$volume_user" \
	   "x" \
	   "$VOLUME_UID" \
	   "$VOLUME_GID" \
	   "$volume_comment" \
	   "$volume_home" \
	   "$VOLUME_SHELL"
}

usage() {
    cat <<EOF >&2
Usage: $0 [-d VOLUME-HOME] [-n VOLUME-USER] [-t TEMPLATE-DIR]
       $0 -h
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf '%s\n' '' >&2
    usage
    exit 2
}

parse_arguments "$@"
create_volume_devices

#!/bin/sh -eu

# create-docker-volume-devices: create Docker volume devices
# Copyright (C) 2021  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

AWK_VERSION=4.0.0
VOLUME_GID=500
VOLUME_UID=500

VOLUME_COMMENT='Docker Volume Account'
VOLUME_FILE=docker-volumes.txt
VOLUME_HOME=/local/volumes
VOLUME_SHELL=/sbin/nologin
VOLUME_USER=docker-volume

VOLUME_NAME_RE='[a-z][0-9_a-z-]+'
VOLUME_PATH_RE="([/]${VOLUME_NAME_RE})+"
VOLUME_RE="\\.{,2}(${VOLUME_PATH_RE})?:${VOLUME_PATH_RE}(:${VOLUME_NAME_RE})?"

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$script" "$*"
}

compare_versions() (
    assert [ $# -eq 3 ]
    assert [ -n "$3" ]

    if [ -z "$1" -a -z "$2" -o "$3" -le 0 ]; then
	printf '%s\n' 0
    else
	m=$(printf '%s\n' "${1:-0}" | cut -d. -f1)
	n=$(printf '%s\n' "${2:-0}" | cut -d. -f1)
	delta=$((m - n))

	if [ "$delta" -ne 0 ]; then
	    printf '%s\n' $delta
	else
	    printf '%s\n' "$(compare_versions ${1#*.} ${2#*.} $(($3 - 1)))"
	fi
    fi
)

create_volume_devices() {
    validate_platform
    mkdir -p "$volume_home"
    volume_file=$(find_file $VOLUME_FILE)

    if [ ! -f $volume_file ]; then
	abort '%s: %s: No such volume file\n' "$script" "$volume_file"
    fi

    if [ -n "$template_dir" -a -d "$template_dir" ]; then
	/bin/cp -R $template_dir/* "$volume_home"
    fi

    get_volumes | while read device mount name; do
	if expr "$device" : "$volume_home"'/' >/dev/null; then
	    mkdir -p $device
	fi
    done

    create_volume_group
    create_volume_user

    chown -R $VOLUME_UID:$VOLUME_GID "$volume_home"
    usermod -aG $VOLUME_GID ${SUDO_USER-$USER}
}

create_volume_group() {
    volume_group_args=$(print_volume_group_args)
    volume_group_data=$(get_volume_group_data || true)

    if [ -z "$volume_group_data" ]; then
	eval groupadd $volume_group_args
    elif [ "$volume_group_data" != "$(print_volume_group_data)" ]; then
	eval groupmod $volume_group_args
    fi
}

create_volume_user() {
    volume_user_args=$(print_volume_user_args)
    volume_user_data=$(get_volume_user_data || true)

    if [ -z "$volume_user_data" ]; then
	eval useradd -Nr $volume_user_args
    elif [ "$volume_user_data" != "$(print_volume_user_data)" ]; then
	eval usermod $volume_user_args
    fi
}

find_file() {
    for dir in . .. "$HOME"; do
	file="$dir/$1"

	if [ -f "$file" ]; then
	    printf '%s\n' "$file"
	    return 0
	fi
    done

    printf '%s\n' "$1"
}

get_awk_version_number() {
    expr "${1-}" : 'GNU Awk \([1-9][0-9]*\(\.[0-9][0-9]*\)*\)'
}

get_awk_version_string() {
    awk --version 2>/dev/null | head -n 1
}

get_length() {
    printf '%s\n' "${1-}" | wc -c
}

get_volume_group_data() {
    getent group $VOLUME_GID | cut -d: -f 1-3
}

get_volume_user_data() {
    getent passwd $VOLUME_UID
}

get_volumes() {
    if [ -n "$volume_home" ]; then
	sed -e 's|^\.\./volumes/|'"$volume_home"'/|' \
	    -e 's|^~/|'"$volume_home"'/|' $volume_file
    else
	cat $volume_file
    fi | awk -F: '/^'"$VOLUME_RE"'$/ {print $1, $2, $3}'
}

is_valid_name() {
    expr "${1-}" : '[a-z][0-9_a-z-]*$' >/dev/null
}

parse_arguments() {
    template_dir=
    volume_comment="$VOLUME_COMMENT"
    volume_home=$VOLUME_HOME
    volume_user=$VOLUME_USER

    while getopts c:d:n:t:h opt; do
	case $opt in
	    (c)
		volume_comment="$OPTARG"
		;;
	    (d)
		volume_home="$OPTARG"
		;;
	    (n)
		parse_volume_user "$OPTARG"
		;;
	    (t)
		parse_template_dir "$OPTARG"
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -gt 0 ]; then
	usage_error "%s: Too many arguments\n" "$script"
    fi
}

parse_template_dir() {
    if [ -d "$1" ]; then
	template_dir="$1"
    else
	usage_error "%s: %s: No such directory\n" "$script" "$1"
    fi
}

parse_volume_user() {
    if is_valid_name "$1" && [ "$(get_length "$1")" -le 16 ]; then
	volume_user="$1"
    else
	usage_error "%s: %s: Invalid user name\n" "$script" "$1"
    fi
}

print_volume_group_args() {
    printf '%s\n' \
	   -g $VOLUME_GID \
	   "$volume_user"
}

print_volume_group_data() {
    printf '%s:%s:%s\n' \
	   "$volume_user" \
	   "x" \
	   "$VOLUME_GID"
}

print_volume_user_args() {
    printf '%s\n' \
	   -c '"'"$volume_comment"'"' \
	   -d "$volume_home" \
	   -g $VOLUME_GID \
	   -s $VOLUME_SHELL \
	   -u $VOLUME_UID \
	   "$volume_user"
}

print_volume_user_data() {
    printf '%s:%s:%s:%s:%s:%s:%s\n' \
	   "$volume_user" \
	   "x" \
	   "$VOLUME_UID" \
	   "$VOLUME_GID" \
	   "$volume_comment" \
	   "$volume_home" \
	   "$VOLUME_SHELL"
}

validate_platform() {
    awk_version_string=$(get_awk_version_string)

    if [ -n "$awk_version_string" ]; then
	awk_version=$(get_awk_version_number "$awk_version_string")

	if [ -n "$awk_version" ]; then
	    delta=$(compare_versions "${awk_version:-0.0.0}" "$AWK_VERSION" 3)

	    if [ -n "$delta" -a "$delta" -ge 0 ]; then
		return 0
	    fi
	fi
    fi

    abort '%s: GNU Awk version %s or greater is required\n' \
	  "$script" \
	  $AWK_VERSION
}

usage() {
    cat <<EOF >&2
Usage: $script [-d VOLUME-HOME] [-n VOLUME-USER] [-t TEMPLATE-DIR]
       $script -h
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf '%s\n' '' >&2
    usage
    exit 2
}

script=$(basename "$0")
parse_arguments "$@"
create_volume_devices

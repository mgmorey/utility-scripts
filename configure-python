#!/bin/sh -eu

# configure-python: download and configure python
# Copyright (C) 2018  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

PYTHON_BASE_URL=https://www.python.org/ftp

if [ -z "${PYTHON_PREFIX-}" ]; then
    PYTHON_PREFIX=/usr/local
fi

if [ -z "${PYTHON_VERSION-}" ]; then
    PYTHON_VERSION=3.6.9
fi

abort() {
    printf "$@" >&2
    exit 1
}

abort_invalid_prefix() {
    usage "%s: invalid prefix -- %s\n" "$0" "$*"
    exit 2
}

abort_invalid_version() {
    usage "%s: invalid version -- %s\n" "$0" "$*"
    exit 2
}

abort_not_supported() {
    abort "%s: %s: %s not supported\n" "$0" "$PRETTY_NAME" "$*"
}

abort_too_many_arguments() {
    usage "%s: too many arguments -- %s\n" "$0" "$*"
    exit 2
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$0" "$*"
}


configure_python() {
    validate_platform
    parse_arguments "$@"
    basename=Python-$python_version

    archive_dir="$HOME/Downloads/Python"
    build_dir="$HOME/Documents/build/$basename"
    src_dir="$HOME/Documents/src/Python/$basename"

    command=$(get_command $src_dir/configure)
    filename=$basename.tar.xz

    pathname=$archive_dir/$filename

    mkdir -p "$build_dir" "$(dirname "$src_dir")" "$archive_dir"
    download_archive
    extract_files

    if [ "$is_forcing" = true ]; then
	/bin/rm -f "$build_dir/config.status"
    elif [ -r "$build_dir/config.status" ]; then
	exit 0
    fi

    printf "%s\n" "$command"
    cd "$build_dir"
    $command
}

download_archive() {
    url=$PYTHON_BASE_URL/python/$python_version/$filename

    if [ ! -r "$pathname" ]; then
	cd "$archive_dir"
	wget $url
    fi

}

extract_files() {
    if [ ! -r "$src_dir/configure" ]; then
	cd "$(dirname "$src_dir")"
	tar -xvf "$pathname"
    fi
}

get_command() {
    compiler=$(get_compiler)
    ldflags=$(get_ldflags)
    options=$(get_options)
    printf "%s\n" "$1 $options CC=$compiler LDFLAGS=$ldflags"
}

get_compiler() {
    compiler=

    for id in $ID $ID_LIKE; do
	case "$id" in
	    (solaris)
		compiler=cc
		break
		;;
	esac
    done

    printf "%s\n" "${compiler:-gcc}"
}

get_ldflags() {
    case "$os_family" in
	(gnu-*)
	    ldflags="-Wl,--rpath=$python_prefix/lib"
	    ;;
	(unix)
	    ldflags="-R$python_prefix/lib"
	    ;;
	(*)
	    ldflags=
	    ;;
    esac

    printf "%s\n" "$ldflags"
}

get_options() {
    if [ "$is_optimizing" = true ]; then
	options="--enable-optimizations"
    else
	options="--disable-optimizations"
    fi

    options="$options --enable-shared --prefix=$python_prefix"
    printf "%s\n" "$options"
}

get_realpath() (
    assert [ $# -ge 1 ]
    realpath=$(which realpath)

    if [ -n "$realpath" ]; then
    	$realpath "$@"
    else
	for file; do
	    if expr "$file" : '/.*' >/dev/null; then
		printf "%s\n" "$file"
	    else
		printf "%s\n" "$PWD/${file#./}"
	    fi
	done
    fi
)

parse_arguments() {
    is_forcing=false
    is_optimizing=false
    python_prefix=$PYTHON_PREFIX
    python_version=$PYTHON_VERSION

    while getopts defp:v:h opt; do
	case $opt in
	    (d)
		is_optimizing=false
		;;
	    (e)
		is_optimizing=true
		;;
	    (f)
		is_forcing=true
		;;
	    (p)
		case $OPTARG in
		    ($HOME|/opt/*|/usr|/usr/local)
			if [ -d $OPTARG ]; then
			    python_prefix=$OPTARG
			else
			    abort_invalid_prefix $OPTARG
			fi
			;;
		    (*)
			abort_invalid_prefix $OPTARG
			;;
		esac
		;;
	    (v)
		case $OPTARG in
		    (3.[0-9].[0-9])
			python_version=$OPTARG
			;;
		    (3.[0-9].[1-9][0-9])
			python_version=$OPTARG
			;;
		    (3.[1-9][0-9].[0-9])
			python_version=$OPTARG
			;;
		    (3.[1-9][0-9].[1-9][0-9])
			python_version=$OPTARG
			;;
		    (*)
			abort_invalid_version $OPTARG
			;;
		esac
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		printf "%s\n" "" >&2
		usage
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -gt 0 ]; then
	abort_too_many_arguments "$@"
    fi
}

usage() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
	printf "%s\n" "" >&2
    fi

    cat <<-EOF >&2
	Usage: $0 [-d|-e][-f][-p PREFIX][-v VERSION]
	       $0 -h
	EOF
}

validate_platform() {
    case "$kernel_name" in
	(Linux|GNU)
	    case "$ID" in
		(debian|raspbian|ubuntu|linuxmint|neon|kali)
		    :
	    	    ;;
		(opensuse-*|fedora|rhel|ol|centos)
		    :
	    	    ;;
		(*)
		    abort_not_supported Distro
		    ;;
	    esac
	    ;;
	(FreeBSD|SunOS|CYGWIN_NT-*)
	    :
    	    ;;
	(*)
	    abort_not_supported "Operating system"
	    ;;
    esac
}

script_dir=$(get_realpath "$(dirname "$0")")

eval $("$script_dir/get-os-release" -x)

configure_python "$@"

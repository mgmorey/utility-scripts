#!/bin/sh -eu

# configure-python: download and configure python
# Copyright (C) 2018  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

PYTHON_VERSION=3.9.4

ARCHIVE_DIR="$HOME/Downloads/Python"
BASE_URL=https://www.python.org/ftp

abort() {
    printf "$@" >&2
    exit 1
}

abort_invalid_prefix() {
    usage_error '%s: invalid prefix -- %s\n' "$script" "$*"
}

abort_invalid_version() {
    usage_error '%s: invalid version -- %s\n' "$script" "$*"
}

abort_not_supported() {
    abort '%s: %s: %s not supported\n' "$script" "$PRETTY_NAME" "$*"
}

assert() {
    "$@" || abort '%s: Assertion failed: %s\n' "$script" "$*"
}

configure_paths() {
    # https://www.python.org/ftp/python/3.6.13/Python-3.6.13.tar.xz
    basename=Python-$python_version
    build_dir="$HOME/Documents/build/$basename"
    filename=$basename.tar.xz
    pathname="$ARCHIVE_DIR/$filename"
    src_dir="$HOME/Documents/src/Python/$basename"
}

configure_platform() {
    make=make
    make_options=$(get_make_options)

    for id in $ID $ID_LIKE; do
	case "$id" in
	    # (freebsd)
	    #	configure_platform_unix_freebsd
	    #	break
	    #	;;
	    # (illumos)
	    #	configure_platform_unix_illumos
	    #	break
	    #	;;
	    (netbsd)
		configure_platform_unix_netbsd
		break
		;;
	    (solaris)
		configure_platform_unix_solaris
		break
		;;
	esac
    done

    if [ -n "${cc-}" ] && [ ! -x $cc ]; then
	abort '%s: %s: No such compiler\n' "$script" "$cc"
    fi
}

configure_platform_unix_freebsd() {
    make=gmake
    configure_compiler /usr/local/bin/clang "${incdirs-}" "" "${libdirs-}"
}

configure_platform_unix_illumos() {
    include_prefix $LOCAL_PREFIX
    configure_compiler "/usr/bin/gcc -m64" "${incdirs-}" "" "${libdirs-}"
}

configure_platform_unix_netbsd() {
    make=gmake
    include_prefix /usr/pkg
    configure_compiler /usr/bin/gcc "${incdirs-}" "" "${libdirs-}"
}

configure_platform_unix_solaris() {
    include_prefix $OPENCSW_PREFIX amd64
    configure_compiler "/usr/bin/gcc -m64" "${incdirs-}" -m64 "${libdirs-}"
}

configure_python() {
    mkdir -p "$build_dir" "$(dirname "$src_dir")" "$ARCHIVE_DIR"
    download_archive
    extract_files
    cd "$build_dir"

    if [ "$force" = true ]; then
	clean_build
    elif [ ! -r config.status ]; then
	true
    else
	return 0
    fi

    command=$(get_configure_command $src_dir)
    printf '%s\n' "$command"
    eval $command

    if [ "$build" = true ]; then
	$make${make_options:+ $make_options}

	if [ "$make_test" = true ]; then
	    $make${make_options:+ $make_options} test
	fi
    fi
}

download_archive() {
    url=$BASE_URL/python/$python_version/$filename

    if [ ! -r "$pathname" ]; then
	cd "$ARCHIVE_DIR"
	wget $url
    fi

}

get_dependencies() {
    get-packages bootstrap python-build
}

get_prefix() {
    printf "$prefix" "python-$version"
}

install_python() {
    if [ "$install" != true ]; then
	return 0
    elif [ "$ID" != macos -a "$ID" != windows -a "$(id -u)" -gt 0 ]; then
	return 0
    fi

    umask 0022
    cd "$build_dir"
    $make${make_options:+ $make_options} prefix="$(get_prefix)" install
}

parse_arguments() {
    build=true
    force=false
    make_install=false
    make_test=false
    optimize=false
    prefix=$LOCAL_PREFIX
    python_version=$PYTHON_VERSION

    while getopts bdefip:tv:h opt; do
	case $opt in
	    (b)
		build=true
		;;
	    (d)
		optimize=false
		;;
	    (e)
		optimize=true
		;;
	    (f)
		force=true
		;;
	    (i)
		make_install=true
		;;
	    (p)
		case $OPTARG in
		    ($HOME|/opt/*|/opt/%s|/usr/local)
			prefix=$OPTARG
			;;
		    (*)
			abort_invalid_prefix $OPTARG
			;;
		esac
		;;
	    (t)
		make_test=true
		;;
	    (v)
		case $OPTARG in
		    (3.[0-9].[0-9])
			python_version=$OPTARG
			;;
		    (3.[0-9].[1-9][0-9])
			python_version=$OPTARG
			;;
		    (3.[1-9][0-9].[0-9])
			python_version=$OPTARG
			;;
		    (3.[1-9][0-9].[1-9][0-9])
			python_version=$OPTARG
			;;
		    (*)
			abort_invalid_version $OPTARG
			;;
		esac
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -gt 0 ]; then
	usage_error '%s: Too many arguments\n' "$script"
    fi
}

usage() {
    cat <<EOF >&2
Usage: $script [-b] [-d|-e] [-f] [-p PREFIX] [-t] [-v VERSION]
       $script -h
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf '%s\n' '' >&2
    usage
    exit 2
}

validate_platform() {
    case "$ID" in
	(debian|raspbian)
	    return
	    ;;
	(opensuse-*)
	    return
	    ;;
	(rhel|centos|fedora)
	    return
	    ;;
	(freebsd)
	    return
	    ;;
	(macos)
	    return
	    ;;
	(netbsd)
	    return
	    ;;
	(solaris)
	    return
	    ;;
	(windows)
	    return
	    ;;
	(*)
	    abort_not_supported "Operating system"
	    ;;
    esac
}

script=$(basename "$0")

case "$0" in
    (*/*)
	script_dir=$(cd "$(dirname "$0")" && pwd)
	;;
    (*)
	script_dir=
	;;
esac

script_prefix=${script_dir:+$script_dir/}

. "${script_prefix}common-functions.sh"
. "${script_prefix}config-functions.sh"

set_user_profile "$script_dir"
eval $(get-os-release -x)
validate_platform
configure_platform
parse_arguments "$@"
configure_paths
install_dependencies

if [ "$(id -u)" -eq 0 ]; then
    run_unpriv /bin/sh -c "$0 $*"
else
    configure_python
fi

install_python

#!/bin/sh -eux

# configure-python: download and configure python
# Copyright (C) 2018  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

BASE_URL=https://www.python.org/ftp
PYTHON_VERSION=3.6.10

LOCAL_PREFIX=/usr/local
OPENCSW_PREFIX=/opt/csw
PREFIX=/usr/local

abort() {
    printf "$@" >&2
    exit 1
}

abort_invalid_prefix() {
    usage_error "%s: invalid prefix -- %s\n" "$0" "$*"
}

abort_invalid_version() {
    usage_error "%s: invalid version -- %s\n" "$0" "$*"
}

abort_not_supported() {
    abort "%s: %s: %s not supported\n" "$0" "$PRETTY_NAME" "$*"
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$0" "$*"
}

clean_build() {
    if [ -r Makefile ]; then
	$make distclean
    fi
}

configure_compiler() {
    if [ -n "${1-}" ]; then
	cc="$(get_compiler $1)"
	cflags="$(get_compiler_flags $1)"
    fi

    if [ -n "${2-}" ]; then
	cppflags="$(get_include_flags "$2")"
    fi

    if [ -n "${3-}" -o -n "${4-}" ]; then
	ldflags="$(get_linker_flags "$3" "$4")"
    fi

    pkg_config_path="$(get_pkg_config_path)"
}

configure_platform() {
    python_version=$PYTHON_VERSION
    force=false
    make=make
    prefix=$PREFIX

    for id in $ID $ID_LIKE; do
	case "$id" in
	    # (freebsd)
	    #	configure_platform_unix_freebsd
	    #	break
	    #	;;
	    # (illumos)
	    #	configure_platform_unix_illumos
	    #	break
	    #	;;
	    (netbsd)
		configure_platform_unix_netbsd
		break
		;;
	    (solaris)
		configure_platform_unix_solaris
		break
		;;
	esac
    done

    if [ -n "${cc-}" ] && [ ! -x $cc ]; then
	abort "%s: %s: No such compiler\n" "$0" "$cc"
    fi
}

configure_platform_unix_freebsd() {
    make=gmake
    configure_compiler /usr/local/bin/clang "${incdirs-}" "" "${libdirs-}"
}

configure_platform_unix_illumos() {
    include_prefix $LOCAL_PREFIX
    configure_compiler "/usr/bin/gcc -m64" "${incdirs-}" "" "${libdirs-}"
}

configure_platform_unix_netbsd() {
    make=gmake
    include_prefix /usr/pkg
    configure_compiler /usr/bin/gcc "${incdirs-}" "" "${libdirs-}"
}

configure_platform_unix_solaris() {
    include_prefix $OPENCSW_PREFIX amd64
    configure_compiler "/usr/bin/gcc -m64" "${incdirs-}" -m64 "${libdirs-}"
}

configure_python() {
    basename=Python-$python_version

    archive_dir="$HOME/Downloads/Python"
    build_dir="$HOME/Documents/build/$basename"
    src_dir="$HOME/Documents/src/Python/$basename"

    command=$(get_configure_command $src_dir)
    filename=$basename.tar.xz

    pathname=$archive_dir/$filename

    mkdir -p "$build_dir" "$(dirname "$src_dir")" "$archive_dir"
    download_archive
    extract_files
    cd "$build_dir"

    if [ "$force" = true ]; then
	clean_build
    elif [ ! -r config.status ]; then
	:
    else
	exit 0
    fi

    printf "%s\n" "$command"
    eval $command
}

download_archive() {
    url=$BASE_URL/python/$python_version/$filename

    if [ ! -r "$pathname" ]; then
	cd "$archive_dir"
	wget $url
    fi

}

extract_files() {
    if [ ! -r "$src_dir/configure" ]; then
	cd "$(dirname "$src_dir")"

	case "$pathname" in
	    (*.tar.gz)
		gzip -dc "$pathname" | tar -xvf -
		;;
	    (*.tar.xz)
		xz -dc "$pathname" | tar -xvf -
		;;
	esac
    fi
}

get_compiler() {
    printf "%s\n" "$1"
}

get_compiler_flags() {
    shift
    printf "%s\n" "$*"
}

get_configure_command() {
    options=$(get_configure_options)
    printf '%s' "$1/configure"

    if [ -n "${options-}" ]; then
	printf ' %s' "$options"
    fi

    if [ -n "${cc-}" ]; then
	printf ' CC=\"%s\"' "${cc-}"
    fi

    if [ -n "${cflags-}" ]; then
	printf ' CFLAGS=\"%s\"' "${cflags-}"
    fi

    if [ -n "${cppflags-}" ]; then
	printf ' CPPFLAGS=\"%s\"' "${cppflags-}"
    fi

    if [ -n "${ldflags-}" ]; then
	printf ' LDFLAGS=\"%s\"' "${ldflags-}"
    fi

    if [ -n "${pkg_config_path-}" ]; then
	printf ' PKG_CONFIG_PATH=\"%s\"' "${pkg_config_path-}"
    fi

    printf '\n'
}

get_configure_options() {
    options=

    if [ -n "${options:-}" ]; then
	printf "%s\n" "$options"
    fi
}

get_include_flags() {
    assert [ $# -ge 1 ]
    printf -- "-I%s\n" "$@"
}

get_linker_flags() {
    assert [ $# -eq 2 ]
    assert [ -n "$2" ]
    ldflags="$1"

    for libdir in $2; do
	for id in $ID $ID_LIKE $os_family; do
	    case "$id" in
		(freebsd|gnu-*)
		    ldflags="${ldflags+$ldflags }-Wl,--rpath=$libdir"
		    break
		    ;;
		(unix)
		    ldflags="${ldflags+$ldflags }-L$libdir -R$libdir"
		    break
		    ;;
	    esac
	done
    done

    if [ "${ldflags-}" ]; then
	printf "%s\n" "$ldflags"
    fi
}

get_packages() {
    get-bootstrap-packages
    get-python-build-packages
}

get_pkg_config_path() {
    for pkgdir in ${pkgdirs-}; do
	pkg_config_path=${pkg_config_path+$pkg_config_path:}$pkgdir
    done

    if [ "${pkg_config_path-}" ]; then
	printf "%s\n" "$pkg_config_path"
    fi
}

get_realpath() (
    assert [ $# -ge 1 ]
    realpath=$(which realpath)

    if [ -n "$realpath" ]; then
	$realpath "$@"
    else
	for file; do
	    if expr "$file" : '/.*' >/dev/null; then
		printf "%s\n" "$file"
	    else
		printf "%s\n" "$PWD/${file#./}"
	    fi
	done
    fi
)

include_prefix() {
    assert [ $# -ge 1 -a $# -le 2 ]
    assert [ -n "$1" ]

    if [ ! -d "$1" ]; then
	return 0
    fi

    incdir="$1/include"
    libdir="$1/lib${2+/$2}"
    incdirs="${incdirs+$incdirs }$incdir"
    libdirs="${libdirs+$libdirs }$libdir"

    if [ -d "$libdir/pkgconfig" ]; then
	pkgdirs="${pkgdirs+$pkgdirs }$libdir/pkgconfig"
    fi
}

install_dependencies() {
    for id in $ID $ID_LIKE; do
	case "$id" in
	    (windows)
		return 0
		;;
	esac
    done

    packages="$(get_packages | sort -u)"
    pattern="$(get-development-pattern)"
    install-packages ${pattern:+-p "$pattern" }$packages

    if [ -n "${package:-}" ]; then
	install-build-deps "$@" $package || true
    fi
}

parse_arguments() {
    while getopts defp:v:h opt; do
	case $opt in
	    (d)
		optimize=false
		;;
	    (e)
		optimize=true
		;;
	    (f)
		force=true
		;;
	    (p)
		case $OPTARG in
		    ($HOME|/opt/*|/usr|/usr/local)
			if [ -d $OPTARG ]; then
			    prefix=$OPTARG
			else
			    abort_invalid_prefix $OPTARG
			fi
			;;
		    (*)
			abort_invalid_prefix $OPTARG
			;;
		esac
		;;
	    (v)
		case $OPTARG in
		    (3.[0-9].[0-9])
			python_version=$OPTARG
			;;
		    (3.[0-9].[1-9][0-9])
			python_version=$OPTARG
			;;
		    (3.[1-9][0-9].[0-9])
			python_version=$OPTARG
			;;
		    (3.[1-9][0-9].[1-9][0-9])
			python_version=$OPTARG
			;;
		    (*)
			abort_invalid_version $OPTARG
			;;
		esac
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		usage_error
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -gt 0 ]; then
	usage_error "%s: Too many arguments\n" "$0"
    fi
}

usage() {
    cat <<EOF >&2
Usage: $0 [-d|-e][-f] [-p PREFIX] [-v VERSION]
       $0 -h
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf "%s\n" '' >&2
    usage
    exit 2
}

validate_platform() {
    case "$ID" in
	(debian|raspbian)
	    return
	    ;;
	(opensuse-*)
	    return
	    ;;
	(rhel|centos|fedora)
	    return
	    ;;
	(freebsd)
	    return
	    ;;
	(macos)
	    return
	    ;;
	(netbsd)
	    return
	    ;;
	(solaris)
	    return
	    ;;
	(windows)
	    return
	    ;;
	(*)
	    abort_not_supported "Operating system"
	    ;;
    esac
}

case "$0" in
    (*/*)
	script_dir=$(get_realpath "$(dirname "$0")")
	;;
    (*)
	script_dir=
	;;
esac

script_prefix=${script_dir:+$script_dir/}

. "${script_prefix}common-functions.sh"

set_user_profile "$script_dir"
eval $(get-os-release -x)
validate_platform
configure_platform
parse_arguments "$@"

if [ "$(id -u)" -eq 0 ]; then
    install_dependencies
    run_unpriv "$0"
else
    install_dependencies
    configure_python
fi

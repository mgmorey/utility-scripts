#!/bin/sh -eu

# set-parameters: print statements to set profile parameters
# Copyright (C) 2019  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

ALL_PARAMETERS="CPPFLAGS INFOPATH LDFLAGS MANPATH PATH PKG_CONFIG_PATH"

COMMON_BINDIRS="/usr/local/sbin /usr/lib/cups/bin /usr/gnu/bin"
PKGSRC_PKGDIRS="/opt/local /opt/pkg /usr/pkg"

PROFILE_BINDIRS="bin .cargo/bin .local/bin .pyenv/bin"

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$0" "$*"
}

get_realpath() (
    assert [ $# -ge 1 ]
    realpath=$(which realpath)

    if [ -n "$realpath" ]; then
	$realpath "$@"
    else
	for file; do
	    if expr "$file" : '/.*' >/dev/null; then
		printf "%s\n" "$file"
	    else
		printf "%s\n" "$PWD/${file#./}"
	    fi
	done
    fi
)

include_common_directories() {
    # initialize INFOPATH parameter
    if [ -z "${INFOPATH-}" ]; then
	INFOPATH=/usr/share/info

	for dir in /usr/share/local/info /usr/local/info; do
	    if [ -d $dir ]; then
		INFOPATH=$dir:$INFOPATH
	    fi
	done
    fi

    # initialize MANPATH parameter
    if [ -z "${MANPATH-}" ]; then
	MANPATH=/usr/share/man

	for dir in /usr/share/local/man /usr/local/man; do
	    if [ -d $dir ]; then
		MANPATH=$dir:$MANPATH
	    fi
	done
    fi

    # add common binary directories to PATH (if they exist)
    for dir in $COMMON_BINDIRS; do
	if is_to_be_included $dir "${PATH-}"; then
	    PATH="$dir${PATH:+:$PATH}"
	fi
    done
}

include_macos_directories() {
    # configure environment for Homebrew packages
    MANPATH=${MANPATH:-$(manpath)}

    prefix=/usr/local/opt

    for pkg in $($HOME/bin/brew-list-keg-only 2>/dev/null || true); do
	if [ -d $prefix/$pkg/include ]; then
	    CPPFLAGS="-I$prefix/$pkg/include${CPPFLAGS:+ $CPPFLAGS}"
	fi
	if [ -d $prefix/$pkg/lib ]; then
	    LDFLAGS="-L$prefix/$pkg/lib${LDFLAGS:+ $LDFLAGS}"
	fi
	if is_to_be_included $prefix/$pkg/lib/$pkg/man "${MANPATH-}"; then
	    MANPATH="$prefix/$pkg/lib/$pkg/man${MANPATH:+:$MANPATH}"
	fi
	if is_to_be_included $prefix/$pkg/share/man "${MANPATH-}"; then
	    MANPATH="$prefix/$pkg/share/man${MANPATH:+:$MANPATH}"
	fi
	if is_to_be_included $prefix/$pkg/bin "${PATH-}"; then
	    PATH="$prefix/$pkg/bin${PATH:+:$PATH}"
	fi
	if is_to_be_included $prefix/$pkg/lib/pkgconfig "${PKG_CONFIG_PATH-}"; then
	    PKG_CONFIG_PATH="$prefix/$pkg/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH}"
	fi
    done

    # set PATH so it includes user's private Python 3 bin if it exists
    for version in 3.8 3.7 3.6; do
	if [ -d "$HOME/Library/Python/$version/bin" ] ; then
	    PATH="$HOME/Library/Python/$version/bin${PATH:+:$PATH}"
	    break
	fi
    done
}

include_pkgsrc_directories() {
    # add pkgsrc directory to INFOPATH, MANPATH and PATH (if it exists)
    for dir in $(ls -d $PKGSRC_PKGDIRS 2>/dev/null || true); do
	if is_to_be_included "$dir/info" "${PATH-}"; then
	    INFOPATH="$dir/info${INFOPATH:+:$INFOPATH}"
	fi
	if is_to_be_included "$dir/man" "${PATH-}"; then
	    MANPATH="$dir/man${MANPATH:+:$MANPATH}"
	fi
	if is_to_be_included "$dir/bin" "${PATH-}"; then
	    PATH="$dir/bin${PATH:+:$PATH}"
	fi
	if is_to_be_included "$dir/sbin" "${PATH-}"; then
	    PATH="$dir/sbin${PATH:+:$PATH}"
	fi
    done
}

include_platform_directories() {
    case "$kernel_name" in
	(Darwin)
	    include_macos_directories
	    ;;
    esac
}

include_profile_directories() {
    # add user info directory to INFOPATH (if it exists)
    if ! is_included "$HOME/info" "${PATH-}"; then
	INFOPATH="$HOME/info${INFOPATH:+:$INFOPATH}"
    fi

    # add user man directory to MANPATH (if it exists)
    if ! is_included "$HOME/man" "${PATH-}"; then
	MANPATH="$HOME/man${MANPATH:+:$MANPATH}"
    fi

    # add user binary directories to PATH (if they exist)
    for dir in $PROFILE_BINDIRS; do
	if ! is_included "$HOME/$dir" "${PATH-}"; then
	    PATH="$HOME/$dir${PATH:+:$PATH}"
	fi
    done
}

is_included() {
    assert [ $# -eq 2 ]
    assert [ -n "$1" ]
    printf "%s\n" "$2" | grep -Eq '(^|:)'$1'(:|$)'
}

is_to_be_included() {
    assert [ $# -eq 2 ]
    assert [ -n "$1" ]
    test -d $1 && ! is_included $1 "$2"
}

print_parameters() {
    assert [ $# -gt 0 ]

    for var; do
	eval value=\${$var-}

	if [ -z "$value" ]; then
	    continue
	fi

	case ${SHELL##*/} in
	    (bash|fish|ksh|ksh93|rbash|zsh)
		printf 'export %s="%s"\n' "$var" "$value"
		;;
	    (csh|tcsh)
		printf 'setenv %s "%s";\n' "$var" "$value"
		;;
	    (sh)
		printf '%s="%s"\n' "$var" "$value"
		printf 'export %s\n' "$var"
		;;
	esac
    done
}

set_askpass_parameters() {
    $script_dir/set-askpass || true
}

set_profile_parameters() {
    validate_parameters
    include_common_directories
    include_pkgsrc_directories
    include_platform_directories
    include_profile_directories
    print_parameters $ALL_PARAMETERS
}

validate_parameters() {
    case ${SHELL##*/} in
	(bash|fish|ksh|ksh93|rbash|zsh)
	    :
	    ;;
	(csh|tcsh)
	    :
	    ;;
	(sh)
	    :
	    ;;
	(*)
	    abort "%s: %s: Shell not supported\n" "$0" "$SHELL"
	    ;;
    esac
}

script_dir=$(get_realpath "$(dirname "$0")")

eval $("$script_dir/get-os-release" -X)

set_askpass_parameters
set_profile_parameters

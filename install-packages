#!/bin/sh -eu

# install-packages: install packages
# Copyright (C) 2018  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

abort() {
    printf "$@" >&2
    exit 1
}

abort_not_supported() {
    abort '%s: %s: %s not supported\n' "$script" "$PRETTY_NAME" "$*"
}

assert() {
    "$@" || abort '%s: Assertion failed: %s\n' "$script" "$*"
}

configure_platform() {
    is_pattern_supported=false

    for id in $ID $ID_LIKE; do
	case "$id" in
	    (centos)
		is_pattern_supported=true

		case "$VERSION_ID" in
		    (7)
			"${script_prefix}install-epel"
			;;
		    (8)
			"${script_prefix}install-epel"
			;;
		    (*)
			"${script_prefix}install-epel"
			;;
		esac
		break
		;;
	    (debian)
		is_pattern_supported=true
		break
		;;
	    (fedora)
		is_pattern_supported=true
		break
		;;
	    (opensuse)
		is_pattern_supported=true
		break
		;;
	    (rhel|ol)
		is_pattern_supported=true
		break
		;;
	    (solaris)
		is_pattern_supported=true
		set-publisher-sfe
		break
		;;
	esac
    done
}

get_options() {
    "${script_prefix}get-package-install-options" $options
}

get_package_manager() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    assert [ $1 -ge 1 -a -$1 -le 2 ]
    printf '%s\n' $package_managers | awk 'NR == '"$1"' {print $0}'
}

get_package_managers() {
    "${script_prefix}get-package-managers"
}

get_packages() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    assert [ $1 -ge 1 -a -$1 -le 2 ]

    case "$1" in
	(1)
	    awk_expr='NF == 1 {print $0} NF == 2 {print $1}'
	    ;;
	(2)
	    awk_expr='NF == 2 {print $2}'
	    ;;
    esac

    printf '%s\n' $packages | awk -F: "$awk_expr"
}

install_packages() {
    validate_platform
    configure_platform
    package_managers=$(get_package_managers)
    package_options=$(get_options)
    pattern_options=$(get_options)
    create_tmpfile

    for id in $ID $ID_LIKE; do
	case "$id" in
	    (debian)
		move_pattern_to_packages
		break
		;;
	    (solaris)
		move_pattern_to_packages
		break
		;;
	esac
    done

    if [ -n "$packages" ]; then
	packages="$("${script_prefix}get-uninstalled-packages" $packages)"
    fi

    if [ -z "$packages" -a -z "$pattern" ]; then
	return
    fi

    if [ "$is_pattern_supported" = true ]; then
	install_pattern_from_args || true
    fi

    install_packages_from_args
}

install_packages_from_args() (
    if [ -z "$packages" ]; then
	return
    fi

    index=1

    while [ $index -le 2 ]; do
	package_manager=$(get_package_manager $index)

	if [ -z "$package_manager" ]; then
	    break
	fi

	install_packages_using \
	    "$package_manager" \
	    "$package_options" \
	    $(get_packages $index)
	index=$((index + 1))
    done
)

install_packages_using() (
    assert [ $# -ge 2 ]

    if [ $# -eq 2 ]; then
	return
    elif [ -z "$1" ]; then
	return
    fi

    manager=$1
    options=$2
    shift 2

    install=$("${script_prefix}get-install-command" $manager)

    case "$(basename $manager)" in
	(brew)
	    run_unpriv /bin/sh -c "$manager $install $*"
	    ;;
	(*)
	    $manager $install $options $*
	    ;;
    esac
)

install_pattern_from_args() (
    if [ -z "$pattern" ]; then
	return
    fi

    package_manager=$(get_package_manager 1)
    install_pattern_using \
	"$package_manager" \
	"$pattern_options" \
	"$pattern"
)

install_pattern_using() (
    assert [ $# -ge 2 ]

    if [ $# -eq 2 ]; then
	return
    elif [ -z "$1" ]; then
	return
    fi

    manager=$1
    options=$2
    pattern=$3

    case "$(basename $manager)" in
	(dnf|yum)
	    $manager groupinfo "$pattern" >$tmpfile
	    ;;
	(zypper)
	    $manager -nq info -t pattern "$pattern" >$tmpfile
	    ;;
	(*)
	    false
	    ;;
    esac

    if [ $? -eq 0 ]; then
	sed -e '/^$/d' \
	    -e '/^Loaded plugins: .*$/d' \
	    -e '/^pattern .* not found.$/d' -i $tmpfile
    fi

    if [ ! -s $tmpfile ]; then
	install=$("${script_prefix}get-pattern-install-command" $manager)

	case "$(basename $manager)" in
	    (brew)
		run_unpriv /bin/sh -c "$manager $install $options \"$pattern\""
		;;
	    (*)
		$manager $install $options "$pattern"
		;;
	esac
    fi
)

move_pattern_to_packages() {
    packages="${pattern:+$pattern }$packages"
    pattern=
}

parse_arguments() {
    options=
    pattern=

    while getopts o:p:h opt; do
	case $opt in
	    (o)
		options=$OPTARG
		;;
	    (p)
		parse_pattern "$OPTARG"
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))
    packages="$@"
}

parse_pattern() {
    pattern=$(printf '%s\n' "$1" | sed 's/^@development$/Development Tools/')
}

usage() {
    cat <<EOF >&2
Usage: $script: [-o OPTIONS] [-p PATTERN] PACKAGE [PACKAGE [...]]
       $script: -h
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf '%s\n' '' >&2
    usage
    exit 2
}

validate_platform() {
    for id in $ID $ID_LIKE; do
	case "$id" in
	    (centos)
		case "$VERSION_ID" in
		    (7)
			return
			;;
		    (8)
			return
			;;
		    (*)
			break
			;;
		esac
		;;
	    (debian)
		return
		;;
	    (fedora)
		return
		;;
	    (opensuse)
		return
		;;
	    (rhel|ol)
		case "$VERSION_ID" in
		    (7.*)
			return
			;;
		    (8.*)
			return
			;;
		    (9.*)
			return
			;;
		    (*)
			break
			;;
		esac
		;;
	    (freebsd)
		return
		;;
	    (macos)
		return
		;;
	    (netbsd)
		return
		;;
	    (solaris)
		return
		;;
	    (windows)
		case "$kernel_name" in
		    (MINGW64_NT)
			return
			;;
		    (*)
			break
			;;
		esac
		;;
	esac
    done

    abort_not_supported "Operating system"
}

script=$(basename "$0")

case "$0" in
    (*/*)
	script_dir=$(cd "$(dirname "$0")" && pwd)
	;;
    (*)
	script_dir=
	;;
esac

script_prefix=${script_dir:+$script_dir/}

. "${script_prefix}common-functions.sh"

eval $("${script_prefix}get-os-release" -x)
parse_arguments "$@"
install_packages

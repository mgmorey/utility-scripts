#!/bin/sh -eu

# generate-docker-compose: print configuration file docker-compose.yaml
# Copyright (C) 2021  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

COMPOSE_VERSION=3.3

ENVIRONMENT_FILE=docker-environment.txt
NAME_FILE=docker-names.txt
PORT_FILE=docker-ports.txt
VOLUME_FILE=docker-volumes.txt

ENVIRONMENT_NAME_RE="[A-Za-z][0-9A-Z_a-z]+"
ENVIRONMENT_RE="${ENVIRONMENT_NAME_RE}=.+"
PORT_NUMBER_RE="[0-9]{1,5}"
PORT_RANGE_RE="${PORT_NUMBER_RE}(|-${PORT_NUMBER_RE})"
PORT_RE="(${PORT_RANGE_RE}:|)${PORT_RANGE_RE}(|[/](tcp|udp))"
VOLUME_NAME_RE='[a-z][0-9_a-z-]+'
VOLUME_RE="${VOLUME_NAME_RE}:.+"

SERVICE_PARAMS="container_name hostname image"

generate_docker_compose() {
    printf '%s: "%s"\n' "version" "$COMPOSE_VERSION"
    print_services
    print_volumes
}

get_environment_var_count() {
    get_environment_vars | wc -l
}

get_environment_var_value() {
    awk -F= '$1 == "'"$1"'" {print $2}' $ENVIRONMENT_FILE
}

get_environment_vars() {
    if [ -e $ENVIRONMENT_FILE ]; then
	awk -F= '/^'"$ENVIRONMENT_RE"'$/ {print $1}' $ENVIRONMENT_FILE
    fi
}

get_name_value() {
    awk -F= '$1 == "'"$1"'" {print $2}' $NAME_FILE
}

get_port_count() {
    get_ports | wc -l
}

get_ports() {
    if [ -e $PORT_FILE ]; then
	awk '/^'"$PORT_RE"'$/ {print $0}' $PORT_FILE
    fi
}

get_volume_count() {
    get_volume_names | wc -l
}

get_volume_device() {
    awk -F: '$1 == "'"$1"'" {print $3}' $VOLUME_FILE
}

get_volume_mount() {
    awk -F: '$1 == "'"$1"'" {print $2}' $VOLUME_FILE
}

get_volume_names() {
    if [ -e $VOLUME_FILE ]; then
	awk -F: '/^'"$VOLUME_RE"'$/ {print $1}' $VOLUME_FILE
    fi
}

print_service_environment() {
    if [ "$(get_environment_var_count)" -eq 0 ]; then
	return 0
    fi

    printf '        %s:\n' "environment"

    get_environment_vars | while read var; do
	value=$(get_environment_var_value $var)
	printf '            - %s=%s\n' "$var" "$value"
    done
}

print_service_ports() {
    if [ "$(get_port_count)" -eq 0 ]; then
	return 0
    fi

    printf '        %s:\n' "ports"

    get_ports | while read port; do
	if expr "$port" : '^[0-9-]*$' >/dev/null; then
	    printf '            - %s:%s\n' "$port" "$port"
	else
	    printf '            - %s\n' "$port"
	fi
    done
}

print_service_volumes() {
    if [ "$(get_volume_count)" -eq 0 ]; then
	return 0
    fi

    printf '        %s:\n' "volumes"

    get_volume_names | while read volume_name; do
	volume_mount=$(get_volume_mount $volume_name)
	printf '            - %s:%s\n' "$volume_name" "$volume_mount"
    done
}

print_services() {
    printf '%s\n' ""
    printf '%s:\n' "services"
    printf '%s\n' ""
    service=$(get_name_value service)
    printf '    %s:\n' "$service"

    for param in $SERVICE_PARAMS; do
	value=$(get_name_value $param)

	if [ -n "$value" ]; then
	    printf '        %s: %s\n' "$param" "$value"
	fi
    done

    print_service_environment
    print_service_ports
    print_service_volumes
}

print_volumes() {
    if [ "$(get_volume_count)" -eq 0 ]; then
	return 0
    fi

    printf '%s\n' ""
    printf '%s:\n' "volumes"

    get_volume_names | while read volume_name; do
	volume_device=$(get_volume_device $volume_name)
	printf '%s\n' ""
	printf '    %s:\n' "$volume_name"
	printf '        %s: %s\n' "driver" "local"
	printf '        %s:\n' "driver_opts"
	printf '            %s: %s\n' "o" "bind"
	printf '            %s: %s\n' "type" "none"
	printf '            %s: %s\n' "device" "$volume_device"
    done
}

generate_docker_compose

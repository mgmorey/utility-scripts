#!/bin/sh -eu

# generate-docker-compose: print configuration file docker-compose.yaml
# Copyright (C) 2021  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

FILE_VERSION=3.3
NAMED_VOLUMES=true

VOLUME_GID=500
VOLUME_UID=500

ENV_FILE=docker-environment.txt
NETWORK_FILE=docker-networks.txt
PORT_FILE=docker-ports.txt
SERVICE_FILE=docker-service.txt
VOLUME_FILE=docker-volumes.txt

ENV_NAME_RE='[A-Za-z][0-9A-Z_a-z]+'
ENV_RE="${ENV_NAME_RE}=.+"

IPV4_RE='[0-9]{1,3}(\.[0-9]{1,3}){3}'

NETWORK_NAME_RE='[a-z][0-9_a-z-]*'
NETWORK_RE="${NETWORK_NAME_RE}"

PATH_ELEMENT_RE='[a-z][0-9_a-z-]*'
PATH_NAME_ABS_RE="(\\/${PATH_ELEMENT_RE})+"
PATH_NAME_REL_RE="\\.{,2}${PATH_NAME_ABS_RE}"

PORT_NUMBER_RE='[0-9]{1,5}'
PORT_RANGE_RE="${PORT_NUMBER_RE}(-${PORT_NUMBER_RE})?"
PORT_RE="(${IPV4_RE}:)?(${PORT_RANGE_RE}:)?\
${PORT_RANGE_RE}([/](tcp|udp))?"

SERVICE_PARAM_RE='[a-z][0-9_a-z]*'
SERVICE_RE="${SERVICE_PARAM_RE}=.+"

VOLUME_MODE_RE='(ro|rw)?'
VOLUME_NAME_RE='[a-z][0-9_a-z-]*'
VOLUME_RE="(${PATH_NAME_REL_RE})?:${PATH_NAME_ABS_RE}\
(:${VOLUME_MODE_RE}(:${VOLUME_NAME_RE})?)?"

BSD_AWK_VERSION=20190529
GNU_AWK_VERSION=4.0.0

BSD_AWK_RE='awk version \([1-9][0-9]*\)'
GNU_AWK_RE='GNU Awk \([1-9][0-9]*\(\.[0-9][0-9]*\)*\)'

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$script" "$*"
}

check_device() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]

    if [ ! -d "$1" ]; then
	printf '%s: WARNING: %s: No such directory\n' "$script" "$1" >&2
    fi
}

compare_string_versions() {
    assert [ $# -eq 3 ]
    assert [ -n "$1" ]
    assert [ -n "$2" ]
    assert [ -n "$3" ]
    compare_versions "$(expr "$1" : "$2")" "$3" "$(get_field_count "$3" '.')"
}

compare_versions() (
    assert [ $# -eq 3 ]
    m=$(printf '%s\n' ${1:-0} | cut -d. -f 1)
    n=$(printf '%s\n' ${2:-0} | cut -d. -f 1)
    delta=$((m - n))
    nfields=${3:-1}

    if [ $nfields -le 1 -o $delta -ne 0 ]; then
	printf '%s\n' $delta
	return 0
    fi

    compare_versions "${1#*.}" "${2#*.}" $((nfields - 1))
)

find_file() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]

    for dir in . .. "$HOME"; do
	file="$dir/$1"

	if [ -f "$file" ]; then
	    printf '%s\n' "$file"
	    return 0
	fi
    done

    printf '%s\n' "$1"
}

generate_docker_compose() {
    validate_platform
    env_file=$(find_file $ENV_FILE)
    network_file=$(find_file $NETWORK_FILE)
    port_file=$(find_file $PORT_FILE)
    service_file=$(find_file $SERVICE_FILE)
    volume_file=$(find_file $VOLUME_FILE)

    if [ -z "$volume_home" ]; then
	volume_home="$(get_default_volume_home)"
    fi

    print_file_version
    print_services
    print_networks
    print_volumes
}

get_default_service_name() {
    image=$(get_service_param_value image | sed 's/:.*$//')

    if [ -n "$image" ]; then
	printf '%s\n' "$(basename $image)"
    else
	printf '%s\n' app
    fi
}

get_default_volume_home() {
    volume_user=$(get_volume_user $VOLUME_UID)
    volume_gid=$(get_volume_gid $volume_user)

    if [ -z "$volume_gid" ]; then
	volume_gid=$VOLUME_GID
    fi

    volume_group=$(get_volume_group $volume_gid)
    get_volume_home $VOLUME_UID
}

get_default_volume_name() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    printf '%s\n' "$1" | awk -F/ '
NF >= 3 {printf("%s-%s\n", $(NF - 1), $NF)}
NF <= 2 {printf("%s\n", $NF)}
'
}

get_environment_var_count() {
    get_environment_vars | wc -l
}

get_environment_vars() {
    if [ -f $env_file ]; then
	awk -F= '/^'"$ENV_RE"'$/ {print $1, $2}' $env_file
    fi
}

get_field_count() {
    printf '%s\n' "${1-}" | awk ${2:+-F$2 }'{print NF}'
}

get_network_count() {
    get_networks | wc -l
}

get_networks() {
    if [ -f $network_file ]; then
	awk '/^'"$NETWORK_RE"'$/ {print $0}' $network_file
    fi
}

get_port_count() {
    get_ports | wc -l
}

get_ports() {
    if [ -f $port_file ]; then
	awk '/^'"$PORT_RE"'$/ {print $0}' $port_file
    fi
}

get_service_param_value() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    awk -F= '$1 == "'"$1"'" {print $2}' $service_file
}

get_service_params() {
    awk -F= '/^'"$SERVICE_RE"'$/ {print $1, $2}' $service_file
}

get_version_string() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    "$1" --version 2>/dev/null | head -n 1
}

get_volume_count() {
    get_volumes | wc -l
}

get_volume_gid() {
    if [ -n "${1-}" ]; then
	getent passwd $1 | cut -d: -f 4
    fi
}

get_volume_group() {
    if [ -n "${1-}" ]; then
	getent group $1 | cut -d: -f 1
    fi
}

get_volume_home() {
    if [ -n "${1-}" ]; then
	getent passwd $1 | cut -d: -f 6
    fi
}

get_volume_user() {
    if [ -n "${1-}" ]; then
	getent passwd $1 | cut -d: -f 1
    fi
}

get_volumes() {
    if [ -n "$volume_home" ]; then
	sed -e 's|^\.\./volumes/|'"$volume_home"'/|' \
	    -e 's|^~/|'"$volume_home"'/|' $volume_file
    else
	cat $volume_file
    fi | awk -F: -v OFS=':' '/^'"$VOLUME_RE"'$/ {print $1, $2, $3, $4}'
}

parse_arguments() {
    named_volumes=$NAMED_VOLUMES
    volume_home=

    while getopts d:nuh opt; do
	case $opt in
	    (d)
		volume_home=$OPTARG
		;;
	    (n)
		named_volumes=true
		;;
	    (u)
		named_volumes=false
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -gt 0 ]; then
	usage_error "%s: Too many arguments\n" "$script"
    fi
}

print_file_version() {
    printf '%s: "%s"\n' "version" "$FILE_VERSION"
}

print_network() {
    printf '%s\n' ''
    printf '    %s:\n' "$1"
    printf '        %s: %s\n' "external" "true"
}

print_networks() {
    if [ "$(get_network_count)" -eq 0 ]; then
	return 0
    fi

    printf '%s\n' ''
    printf '%s:\n' "networks"

    get_networks | while read network; do
	print_network "$network"
    done
}

print_service_environment() {
    if [ "$(get_environment_var_count)" -eq 0 ]; then
	return 0
    fi

    printf '        %s:\n' "environment"

    get_environment_vars | sort | while read var value; do
	printf '            - %s=%s\n' "$var" "$value"
    done
}

print_service_network_mode() {
    get_service_params | sort | while read param value; do
	case "$param" in
	    (network_mode)
		printf '        %s: %s\n' "$param" "$value"
		;;
	esac
    done
}

print_service_networks() {
    if [ "$(get_network_count)" -eq 0 ]; then
	return 0
    fi

    printf '        %s:\n' "networks"

    get_networks | while read network; do
	printf '            - %s\n' "$network"
    done
}

print_service_port() {
    if expr "$1" : '^[0-9-]*$' >/dev/null; then
	printf '            - %s:%s\n' "$1" "$1"
    else
	printf '            - %s\n' "$1"
    fi
}

print_service_ports() {
    if [ "$(get_port_count)" -eq 0 ]; then
	return 0
    fi

    printf '        %s:\n' "ports"

    get_ports | while read port; do
	print_service_port "$port"
    done
}

print_service_volume_item() {
    assert [ $# -ge 2 ]
    assert [ $# -le 3 ]
    assert [ -n "$2" ]

    if [ $# -eq 3 -a -n "$3" ]; then
	printf '            - %s:%s:%s\n' "$1" "$2" "$3"
    else
	printf '            - %s:%s\n' "$1" "$2"
    fi
}

print_service_volume_mount() (
    device="$1"
    mount="$2"
    mode="$3"
    name="$4"

    if [ -n "$device" ]; then
	check_device "$device"
    fi

    if [ "$named_volumes" = true ]; then
	if [ -z "$name" ]; then
	    name=$(get_default_volume_name "$mount")
	fi

	print_service_volume_item "$name" "$mount" "$mode"
    elif [ -n "$device" ]; then
	print_service_volume_item "$device" "$mount" "$mode"
    fi
)

print_service_volumes() (
    if [ "$(get_volume_count)" -eq 0 ]; then
	return 0
    fi

    printf '        %s:\n' "volumes"

    get_volumes | while IFS=':' read device mount mode name; do
	print_service_volume_mount "$device" "$mount" "$mode" "$name"
    done
)

print_services() {
    printf '%s\n' ''
    printf '%s:\n' "services"
    printf '%s\n' ''
    service_name=$(get_service_param_value service_name)
    printf '    %s:\n' "${service_name:-$(get_default_service_name)}"

    get_service_params | sort | while read param value; do
	case "$param" in
	    (network_mode)
		true
		;;
	    (service_name)
		true
		;;
	    (*)
		printf '        %s: %s\n' "$param" "$value"
		;;
	esac
    done

    print_service_environment
    print_service_network_mode
    print_service_networks
    print_service_ports
    print_service_volumes
}

print_volume() {
    printf '%s\n' ''
    printf '    %s:\n' "${4:-$(get_default_volume_name $2)}"

    if [ -n "${1-}" ]; then
	printf '        %s: %s\n' "driver" "local"
	printf '        %s:\n' "driver_opts"
	printf '            %s: %s\n' "o" "bind"
	printf '            %s: %s\n' "type" "none"
	printf '            %s: %s\n' "device" "$1"
    else
	printf '        %s: %s\n' "external" "true"
    fi
}

print_volumes() {
    if [ "$named_volumes" = false ]; then
	return 0
    fi

    if [ "$(get_volume_count)" -eq 0 ]; then
	return 0
    fi

    printf '%s\n' ''
    printf '%s:\n' "volumes"

    get_volumes | while IFS=':' read device mount mode name; do
	if [ -n "$device" ]; then
	    check_device "$device"
	fi

	print_volume "$device" "$mount" "$mode" "$name"
    done
}

usage() {
    cat <<EOF >&2
Usage: $script [-d VOLUME-HOME]
       $script -n [-d VOLUME-HOME]
       $script -u [-d VOLUME-HOME]
       $script -h

Generate Docker Compose YAML.

  -d VOLUME-HOME  substitute VOLUME-HOME for tilde ("~") in volume devices
  -h              print this help text (all other options are ignored)
  -n              define named volumes
  -u              define unnamed volumes
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf '%s\n' '' >&2
    usage
    exit 2
}

validate_bsd_awk() {
    validate_version "$1" "$BSD_AWK_RE" $BSD_AWK_VERSION 'BSD Awk'
}

validate_gnu_awk() {
    validate_version "$1" "$GNU_AWK_RE" $GNU_AWK_VERSION 'GNU Awk'
}

validate_platform() {
    case "${uname_kernel=$(uname -s)}" in
	(FreeBSD)
	    true
	    ;;
	(Linux)
	    true
	    ;;
	(*)
	    abort '%s: %s: Operating system not supported\n' \
		  "$script" \
		  "$uname_kernel"
	    ;;
    esac

    version_string=$(get_version_string awk)

    if expr "$version_string" : "$GNU_AWK_RE" >/dev/null; then
	validate_gnu_awk "$version_string"
    elif expr "$version_string" : "$BSD_AWK_RE" >/dev/null; then
	validate_bsd_awk "$version_string"
    else
	abort '%s: BSD/GNU Awk is required\n' "$script"
    fi
}

validate_version() {
    assert [ $# -eq 4 ]
    assert [ -n "$1" ]
    assert [ -n "$2" ]
    assert [ -n "$3" ]
    assert [ -n "$4" ]
    delta=$(compare_string_versions "$1" "$2" "$3")

    if [ -n "$delta" -a "$delta" -ge 0 ]; then
	return 0
    fi

    abort '%s: %s version %s or greater is required\n' \
	  "$script" \
	  "$4" \
	  "$3"
}

script=$(basename "$0")
parse_arguments "$@"
generate_docker_compose

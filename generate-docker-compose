#!/bin/sh -eu

# generate-docker-compose: print configuration file docker-compose.yaml
# Copyright (C) 2021  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

COMPOSE_VERSION=3.3

ENV_FILE=docker-environment.txt
PORT_FILE=docker-ports.txt
SERVICE_FILE=docker-service.txt
VOLUME_FILE=docker-volumes.txt

ENV_NAME_RE="[A-Za-z][0-9A-Z_a-z]+"
ENV_RE="${ENV_NAME_RE}=.+"
IPV4_RE="([0-9]{1,3}[.]){3}[0-9]{1,3}"
PORT_NUMBER_RE="[0-9]{1,5}"
PORT_RANGE_RE="${PORT_NUMBER_RE}(|-${PORT_NUMBER_RE})"
PORT_RE="(${IPV4_RE}:|)(${PORT_RANGE_RE}:|)${PORT_RANGE_RE}(|[/](tcp|udp))"
SERVICE_NAME_RE="[a-z][0-9_a-z]+"
SERVICE_RE="${SERVICE_NAME_RE}=.+"
VOLUME_NAME_RE='[a-z][0-9_a-z-]+'
VOLUME_RE="${VOLUME_NAME_RE}:.+"

generate_docker_compose() {
    printf '%s: "%s"\n' "version" "$COMPOSE_VERSION"
    print_services
    print_volumes
}

get_environment_var_count() {
    if [ -e $ENV_FILE ]; then
	awk -F= '/^'"$ENV_RE"'$/ {++n} END {print n}' $ENV_FILE
    else
	printf '%d\n' 0
    fi
}

get_environment_vars_and_values() {
    if [ -e $ENV_FILE ]; then
	awk -F= '/^'"$ENV_RE"'$/ {print $1, $2}' $ENV_FILE
    fi
}

get_port_count() {
    get_ports | wc -l
}

get_ports() {
    if [ -e $PORT_FILE ]; then
	awk '/^'"$PORT_RE"'$/ {print $0}' $PORT_FILE
    fi
}

get_service_param_value() {
    awk -F= '$1 == "'"$1"'" {print $2}' $SERVICE_FILE
}

get_service_params() {
    awk -F= '/^'"$SERVICE_RE"'$/ {print $1}' $SERVICE_FILE
}

get_service_params_and_values() {
    awk -F= '/^'"$SERVICE_RE"'$/ {print $1, $2}' $SERVICE_FILE
}

get_volume_count() {
    if [ -e $VOLUME_FILE ]; then
	awk -F: '/^'"$VOLUME_RE"'$/ {++n} END {print n}' $VOLUME_FILE
    else
	printf '%d\n' 0
    fi
}

get_volume_names_and_devices() {
    if [ -e $VOLUME_FILE ]; then
	awk -F: '/^'"$VOLUME_RE"'$/ {print $1, $3}' $VOLUME_FILE
    fi
}

get_volume_names_and_mounts() {
    if [ -e $VOLUME_FILE ]; then
	awk -F: '/^'"$VOLUME_RE"'$/ {print $1, $2}' $VOLUME_FILE
    fi
}

print_service_environment() {
    if [ "$(get_environment_var_count)" -eq 0 ]; then
	return 0
    fi

    printf '        %s:\n' "environment"

    get_environment_vars_and_values | sort | while read var value; do
	printf '            - %s=%s\n' "$var" "$value"
    done
}

print_service_ports() {
    if [ "$(get_port_count)" -eq 0 ]; then
	return 0
    fi

    printf '        %s:\n' "ports"

    get_ports | while read port; do
	if expr "$port" : '^[0-9-]*$' >/dev/null; then
	    printf '            - %s:%s\n' "$port" "$port"
	else
	    printf '            - %s\n' "$port"
	fi
    done
}

print_service_volumes() {
    if [ "$(get_volume_count)" -eq 0 ]; then
	return 0
    fi

    printf '        %s:\n' "volumes"

    get_volume_names_and_mounts | while read name mount; do
	printf '            - %s:%s\n' "$name" "$mount"
    done
}

print_services() {
    printf '%s\n' ''
    printf '%s:\n' "services"
    printf '%s\n' ''
    service_name=$(get_service_param_value service_name)
    printf '    %s:\n' "${service_name:-default}"

    get_service_params_and_values | sort | while read param value; do
	if [ "$param" != service_name ]; then
	    printf '        %s: %s\n' "$param" "$value"
	fi
    done

    print_service_environment
    print_service_ports
    print_service_volumes
}

print_volumes() {
    if [ "$(get_volume_count)" -eq 0 ]; then
	return 0
    fi

    printf '%s\n' ''
    printf '%s:\n' "volumes"

    get_volume_names_and_devices | while read name device; do
	printf '%s\n' ''
	printf '    %s:\n' "$name"
	printf '        %s: %s\n' "driver" "local"
	printf '        %s:\n' "driver_opts"
	printf '            %s: %s\n' "o" "bind"
	printf '            %s: %s\n' "type" "none"
	printf '            %s: %s\n' "device" "$device"
    done
}

generate_docker_compose

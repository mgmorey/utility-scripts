#!/bin/sh -eu

# clean-up-kernel-packages: uninstall all but current kernel packages
# Copyright (C) 2020  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

KERNEL_REGEX='(kernel(|-core|-default|-default-devel|-devel|-modules)|linux-image)-[0-9]+\.[0-9]+'

abort() {
    printf "$@" >&2
    exit 1
}

abort_not_supported() {
    abort "%s: %s: %s not supported\n" "$0" "$PRETTY_NAME" "$*"
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$0" "$*"
}

clean_up_kernel_dumps() {
    kernel_dumps=$(get_kernel_dumps || true)

    for file in $kernel_dumps; do
	kernel_file=$(get_kernel_file $file)

	if [ ! -f $kernel_file ]; then
	    /bin/rm $file
	fi
    done
}

clean_up_kernel_packages() {
    validate_platform
    packages=$(get_kernel_packages)

    if [ -n "$packages" ]; then
	"${script_prefix}uninstall-packages" $packages
    fi
}

get_installed_kernel_packages() {
    "${script_prefix}get-installed-packages" -f | \
	egrep "$KERNEL_REGEX"
}

get_kernel_dumps() {
    find /boot -type f -name 'initramfs-*kdump.img' 2>/dev/null
}

get_kernel_file() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    printf '%s\n' "$1" | sed 's/kdump\.img$/.img/'
}

get_kernel_packages() {
    package_release=$(get_current_kernel_package_release)
    get_installed_kernel_packages | grep -v "$package_release"
}

get_current_kernel_package_release() {
    machine=$(uname -m)
    release=$(uname -r)
    printf '%s\n' "${release%.$machine}" | sed -e 's/-default$//'
}

get_realpath() (
    assert [ $# -ge 1 ]
    realpath=$(which realpath)

    if [ -n "$realpath" ]; then
	$realpath "$@"
    else
	for file; do
	    if expr "$file" : '/.*' >/dev/null; then
		printf "%s\n" "$file"
	    else
		printf "%s\n" "$PWD/${file#./}"
	    fi
	done
    fi
)

usage_error() {
    printf "$@" >&2
    exit 2
}

validate_platform() {
    case "$ID" in
	(centos)
	    true
	    ;;
	(debian|raspbian)
	    true
	    ;;
	(fedora)
	    true
	    ;;
	(ol)
	    true
	    ;;
	(opensuse-*)
	    true
	    ;;
	(rhel)
	    true
	    ;;
	(ubuntu)
	    true
	    ;;
	(*)
	    abort_not_supported "Operating system"
	    ;;
    esac
}

if [ $# -gt 0 ]; then
    usage_error "%s: Too many arguments\n" "$0"
fi

case "$0" in
    (*/*)
	script_dir=$(get_realpath "$(dirname "$0")")
	;;
    (*)
	script_dir=
	;;
esac

script_prefix=${script_dir:+$script_dir/}

. "${script_prefix}common-functions.sh"

eval $("${script_prefix}get-os-release" -X)
clean_up_kernel_packages
clean_up_kernel_dumps

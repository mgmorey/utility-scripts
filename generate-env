#!/bin/sh -eu

# generate-env: print parameters for an environment file
# Copyright (C) 2019  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$0" "$*"
}

format_dialect() {
    if [ "${qualifier:=$(get_default_qualifier)}" = database ]; then
	printf "${QUALIFIER}DIALECT=${dialect:=$(get_default_dialect)}\n"
    fi
}

format_endpoint() {
    if [ "${qualifier:=$(get_default_qualifier)}" = database ]; then
	printf "${QUALIFIER}HOST=${host:=$(get_default_host)}\n"
	printf "${QUALIFIER}PORT=${port:=$(get_default_port)}\n"
    fi
}

format_login() {
    printf "${QUALIFIER}USER=${user:=$(get_default_user)}\n"
    printf "${QUALIFIER}PASSWORD=${password:=$(generate_password)}\n"
}

format_protocol() {
    if [ "${qualifier:=$(get_default_qualifier)}" = mysql ]; then
	printf "${QUALIFIER}PROTOCOL=${protocol:=$(get_default_protocol)}\n"
    fi
}

format_root_password() {
    if [ "${dialect:=$(get_default_dialect)}" = mysql ]; then
	root_password=${root_password:=$(generate_password)}
	printf "${QUALIFIER}ROOT_PASSWORD=$root_password\n"
    fi
}

format_qualifier() {
    printf "${qualifier:=$(get_default_qualifier)}_\n" | to_upper
}

format_schema() {
    case "${dialect:=$(get_default_dialect)}" in
	(mysql)
	    printf "${QUALIFIER}DATABASE=${schema:=$(get_default_user)}\n"
	    ;;
	(postgresql)
	    printf "${QUALIFIER}DB=${schema:=$(get_default_user)}\n"
	    ;;
    esac
}

generate_env() {
    QUALIFIER=$(format_qualifier)
    format_dialect

    if [ "${dialect:=$(get_default_dialect)}" = sqlite ]; then
	return 0
    fi

    format_protocol
    format_endpoint
    format_login
    format_root_password
    format_schema
}

generate_password() {
    case "${dialect:=$(get_default_dialect)}" in
	(mysql|postgresql)
	    pwgen 16 1
	    ;;
    esac
}

get_default_dialect() {
    printf "%s\n" sqlite
}

get_default_host() {
    case "${dialect:=$(get_default_dialect)}" in
	(mysql)
	    case ${protocol:=$(get_default_protocol)} in
		(SOCKET)
		    printf "%s\n" localhost
		    ;;
		(TCP)
		    printf "%s\n" 127.0.0.1
		    ;;
	    esac
	    ;;
	(postgresql)
	    printf "%s\n" localhost
	    ;;
    esac
}

get_default_port() {
    case "${dialect:=$(get_default_dialect)}" in
	(mysql)
	    printf "%s\n" 3306
	    ;;
	(postgresql)
	    printf "%s\n" 5432
	    ;;
    esac
}

get_default_protocol() {
    case "${dialect:=$(get_default_dialect)}" in
	(mysql)
	    printf "%s\n" SOCKET
	    ;;
    esac
}

get_default_qualifier() {
    case "${dialect:=$(get_default_dialect)}" in
	(mysql)
	    printf "%s\n" mysql
	    ;;
	(postgresql)
	    printf "%s\n" postgres
	    ;;
	(sqlite)
	    printf "%s\n" database
	    ;;
    esac
}

get_default_user() {
    case "${dialect:=$(get_default_dialect)}" in
	(mysql|postgresql)
	    printf "%s\n" "${SUDO_USER-${USER-$LOGIN}}"
	    ;;
    esac
}

parse_arguments() {
    dialect=
    host=
    port=
    password=
    protocol=
    qualifier=
    root_password=
    user=

    while getopts Dd:H:P:p:q:r:S:stu:h opt; do
	case $opt in
	    (D)
		qualifier=database
		;;
	    (d)
		case "$OPTARG" in
		    (mysql)
			dialect=mysql
			;;
		    (postgres|postgresql)
			dialect=postgresql
			;;
		    (sqlite)
			dialect=sqlite
			;;
		    (*)
			usage_error "%s: %s: Invalid argument\n" "$0" "$OPTARG"
			;;
		esac
		;;
	    (H)
		host="$OPTARG"
		;;
	    (P)
		port="$OPTARG"
		;;
	    (p)
		password="$OPTARG"
		;;
	    (q)
		case "$OPTARG" in
		    (database|mysql)
			qualifier=${OPTARG}
			;;
		    (postgres|postgresql)
			qualifier=postgres
			;;
		    (*)
			usage_error "%s: %s: Invalid argument\n" "$0" "$OPTARG"
			;;
		esac
		;;
	    (r)
		root_password="$OPTARG"
		;;
	    (S)
		schema="$OPTARG"
		;;
	    (s)
		protocol=SOCKET
		;;
	    (t)
		protocol=TCP
		;;
	    (u)
		user="$OPTARG"
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

}

to_upper() {
    tr '[:lower:]' '[:upper:]'
}

usage() {
    cat <<EOF >&2
Usage: $0 [-D] [-d DIALECT] [-H HOST] [-P PORT] [-p PASSWORD]
       [-q QUALIFIER] [-r ROOT-PASSWORD] [-S SCHEMA] [-s|-t]
       [-u USER]
       $0 -h
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf "%s\n" '' >&2
    usage
    exit 2
}

parse_arguments "$@"
generate_env

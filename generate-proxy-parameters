#!/bin/sh -eu

# generate-proxy-parameters: generate a list of proxy parameters
# Copyright (C) 2021  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

KEYS="all ftp http https no"
NO_PROXY="localhost,127.0.0.0/8"

get_proxy_parameters() {
    for key in $KEYS; do
	case "$key" in
	    (no)
		value=$no_proxy
		;;
	    (*)
		value=$proxy
		;;
	esac

	var_lower=$(printf '%s_proxy' "$key" | to_lower)
	var_upper=$(printf '%s_proxy' "$key" | to_upper)
	printf '%s=%s\n' "$var_upper" "$value"
	printf '%s=%s\n' "$var_lower" "$value"
    done
}

get_word_count() {
    printf '%s\n' "$1" | wc -l
}

is_valid_name() {
    expr "${1-}" : '[a-z][0-9a-z-]*$' >/dev/null
}

is_valid_fqdn() (
    for word in $(split_string "$1" "."); do
	if ! is_valid_name "$word"; then
	    return 1
	fi
    done
)

is_valid_fqdn_pattern() (
    index=0
    words=$(split_string "$1" ".")

    if [ "$(get_word_count "$words")" -lt 2 ]; then
	return 1
    fi

    for word in $words; do
	index=$((index + 1))

	if [ $index -eq 1 ] && is_valid_wildcard "$word"; then
	    continue
	elif is_valid_name "$word"; then
	    continue
	else
	    return 1
	fi
    done
)

is_valid_local_host() {
    if expr "${1-}" : 'localhost$'; then
	true
    elif expr "${1-}" : '127.0.0.1$'; then
	true
    elif expr "${1-}" : '::1$'; then
	true
    else
	false
    fi >/dev/null
}

is_valid_local_net() {
    if expr "${1-}" : '127.0.0.0/8$'; then
	true
    else
	false
    fi >/dev/null
}

is_valid_middle() {
    if expr "${1-}" : '//' >/dev/null; then
	is_valid_fqdn $(printf '%s\n' "$1" | sed 's/\/\///')
    else
	false
    fi
}

is_valid_no_proxy() (
    for word in $(split_string "$1" ","); do
	if is_valid_fqdn_pattern "$word"; then
	    continue
	elif is_valid_local_host "$word"; then
	    continue
	elif is_valid_local_net "$word"; then
	    continue
	else
	    return 1
	fi
    done
)

is_valid_port() {
    if expr "${1-}" : '[1-9][0-9][0-9][0-9][0-9]$'; then
	true
    elif expr "${1-}" : '[1-9][0-9][0-9][0-9]$'; then
	true
    elif expr "${1-}" : '[1-9][0-9][0-9]$'; then
	true
    elif expr "${1-}" : '[1-9][0-9]$'; then
	true
    elif expr "${1-}" : '[1-9]$'; then
	true
    else
	false
    fi >/dev/null
}

is_valid_protocol() {
    expr "${1-}" : 'http$' >/dev/null
}

is_valid_proxy() (
    protocol=$(printf '%s\n' "$1" | awk -F: '{print $1}')
    middle=$(printf '%s\n' "$1" | awk -F: '{print $2}')
    port=$(printf '%s\n' "$1" | awk -F: '{print $3}')
    is_valid_protocol "$protocol" && \
	is_valid_middle "$middle" && \
	is_valid_port "$port" && \
	[ "$port" -lt 65536 ]
)

is_valid_wildcard() {
    expr "${1-}" : '\\\*$' >/dev/null
}

parse_arguments() {
    no_proxy=$NO_PROXY

    while getopts n:h opt; do
	case $opt in
	    (n)
		parse_no_proxy "$OPTARG"
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -eq 0 ]; then
	usage_error "%s: Not enough arguments\n" "$script"
    fi

    parse_proxy "$1"
    shift

    if [ $# -gt 0 ]; then
	usage_error "%s: Too many arguments\n" "$script"
    fi
}

parse_no_proxy() {
    if is_valid_no_proxy $(printf '%s\n' "$1" | sed 's/\*/\\\*/'); then
	no_proxy="$1"
    else
	usage_error "%s: %s: Invalid proxy exception list\n" "$script" "$1"
    fi
}

parse_proxy() {
    if is_valid_proxy $(printf '%s\n' "$1" | sed 's/\*/\\\*/'); then
	proxy="$1"
    else
	usage_error "%s: %s: Invalid proxy URL\n" "$script" "$1"
    fi
}

split_string() {
    printf '%s\n' "$1" | awk -v rs="$2" '
BEGIN {RS=rs}
{print $0}'
}

to_lower() {
    tr '[:upper:]' '[:lower:]'
}

to_upper() {
    tr '[:lower:]' '[:upper:]'
}

usage() {
    cat <<EOF >&2
Usage: $script [-n NO-PROXY] PROXY-URL
       $script -h
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf '%s\n' '' >&2
    usage
    exit 2
}

script=$(basename "$0")
parse_arguments "$@"
get_proxy_parameters

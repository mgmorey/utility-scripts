#!/bin/bash -eu

# create-oracle-databases: create Oracle databases
# Copyright (C) 2020  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

DATABASES=
DIRS="$ORACLE_BASE $ORACLE_HOME"

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort '%s: Assertion failed: %s\n' "$0" "$*"
}

check_dirs() {
    for dir in $DIRS; do
	if [ ! -d $dir ]; then
	    abort '%s: %s: No such directory\n' "$0" "$dir"
	fi
    done
}

cat_init() {
    cat <<EOF
DB_NAME=$1
DB_CREATE_FILE_DEST=$2/dbs
EOF
}

cat_sql_create() {
    cat <<EOF
CONNECT / AS SYSDBA;
CREATE SPFILE FROM PFILE;
STARTUP NOMOUNT;
CREATE DATABASE $1
USER SYS IDENTIFIED BY "$2"
USER SYSTEM IDENTIFIED BY "$2";
EOF
}

cat_sql_sysdba() {
    cat <<EOF
CONNECT / AS SYSDBA;
@?/rdbms/admin/catalog.sql
@?/rdbms/admin/catproc.sql
@?/rdbms/admin/utlrp.sql
EOF
}

cat_sql_system() {
    cat <<EOF
CONNECT /;
@?/sqlplus/admin/pupbld.sql
EOF
}

cat_tns() {
    cat <<EOF
$1=
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = 0.0.0.0)(PORT = 1521))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = $1)
    )
  )
EOF
}

create_database() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    export ORACLE_SID=$(get_oracle_sid "$1")
    initfile=$(get_initfile $ORACLE_HOME $ORACLE_SID)
    assert [ -n "$initfile" ]
    logfile=$(get_logfile "$HOME" "$ORACLE_SID")
    assert [ -n "$logfile" ]
    tnsfile=$(get_tnsfile ${TNS_ADMIN-$ORACLE_HOME/network/admin})
    assert [ -n "$tnsfile" ]
    printf 'Generating server parameter file %s\n' $(basename $initfile)
    cat_init $ORACLE_SID $ORACLE_HOME >$initfile
    printf 'Creating and starting database SID %s\n' $ORACLE_SID
    cat_sql_create $ORACLE_SID "$ORACLE_PWD" | sqlplus /nolog >$logfile
    printf 'Building data dictionary views\n'
    cat_sql_sysdba | sqlplus /nolog >>$logfile
    cat_sql_system | sqlplus /nolog >>$logfile
    printf 'Creating entry in %s\n' $(basename $tnsfile)
    cat_tns $ORACLE_SID >>"$tnsfile"
    printf 'Compressing %s\n' $(basename $logfile)
    gzip -9 $logfile || true
}

create_databases() {
    : ${ORACLE_BASE?}
    : ${ORACLE_HOME?}
    : ${ORACLE_PWD?}
    unset TWO_TASK
    check_dirs

    for database; do
        create_database "$database"
    done

    printf 'Contents of %s:\n' $tnsfile
    cat $tnsfile
}

filter_sid() {
    tr -cd '[:alnum:]_' | tr '[:lower:]' '[:upper:]' | cut -c 1-8
}

get_initfile() {
    assert [ $# -eq 2 ]
    assert [ -n "$1" ]
    assert [ -n "$2" ]
    printf '%s/dbs/init%s.ora\n' "$1" "$2"
}

get_logfile() {
    assert [ $# -eq 2 ]
    assert [ -n "$1" ]
    assert [ -n "$2" ]
    printf '%s/create-%s.log\n' "$1" "$2"
}

get_tnsfile() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    printf '%s/tnsnames.ora\n' "$1"
}

get_oracle_sid() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    printf '%s\n' "$1" | filter_sid
}

parse_arguments() {
    databases=

    if [ $# -gt 0 ]; then
        databases="$@"
    fi
}

parse_arguments "$@"
create_databases $databases

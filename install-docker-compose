#!/bin/sh -eu

# install-docker-compose: install Docker Compose from GitHub
# Copyright (C) 2020  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

BASE_URL=https://github.com/docker/compose/releases
COMPOSE_VERSION=1.28.2

get_compose_target_file() {
    printf '%s/%s\n' "$prefix" bin/docker-compose
}

get_compose_version_number() {
    get_version_number $(get_compose_version_string "$@" || true)
}

get_compose_version_string() {
    get_version_string "${1-docker-compose}" | cut -d, -f 1
}

get_version_number() {
    printf '%s\n' "$*" | awk '{print $3}'
}

get_version_string() {
    file=$(env PATH="$prefix/bin:$PATH" which $1)

    if [ -n "$file" ]; then
	"$file" --version
    fi
}

get_compose_url() {
    filetype=$(get_filetype)
    hardware=$(get_hardware)
    platform=$(get_platform)
    file="docker-compose-$platform-$hardware${filetype:+.$filetype}"
    dir="download/$COMPOSE_VERSION"
    url="$BASE_URL/$dir/$file"
    printf '%s\n' "$url"
}

get_execmode() {
    case "$1" in
	($HOME/*)
	    printf '%s\n' a+rx
	    ;;
	(*)
	    printf '%s\n' u=rwx,go=rx
	    ;;
    esac
}

get_filetype() {
    system=$(uname -s)

    case "$system" in
	(CYGWIN_NT-*)
	    printf '%s\n' exe
	    ;;
	(MINGW64_NT-*)
	    printf '%s\n' exe
	    ;;
    esac
}

get_hardware() {
    uname -m
}

get_platform() {
    system=$(uname -s)

    case "$system" in
	(CYGWIN_NT-*)
	    printf '%s\n' Windows
	    ;;
	(MINGW64_NT-*)
	    printf '%s\n' Windows
	    ;;
	(*)
	    printf '%s\n' "$system"
	    ;;
    esac
}

install_binary_file() {
    dir=$(dirname "$1")
    file=$(basename "$1")
    mode=$(get_execmode "$1")

    if [ ! -d "$dir" ]; then
	mkdir ${mode:+-m $mode }-p "$dir"
    fi

    tmpfile=$(mktemp -p "$dir" -t "$file.XXXXXXXXXX.tmp")
    trap "/bin/rm -f \"$tmpfile\"" EXIT INT QUIT TERM
    curl -L $(get_compose_url) -o "$tmpfile"

    if [ -n "$mode" ]; then
	chmod $mode "$tmpfile"
    fi

    /bin/mv -f "$tmpfile" "$1"
}

install_docker_compose() {
    if [ -z "$prefix" ]; then
	if [ "$(id -u)" -eq 0 ]; then
	    prefix=/usr/local
	else
	    prefix=$HOME/.local
	fi
    fi

    current_number=$(get_compose_version_number)

    if [ $force = false -a "$current_number" = "$COMPOSE_VERSION" ]; then
	exit 0
    fi

    target_file=$(get_compose_target_file)
    install_binary_file "$target_file"
    current_string=$(get_compose_version_string "$target_file")

    printf '%s\n' ''
    printf 'Installed %s\n' "$current_string"
}

parse_arguments() {
    prefix=
    force=false

    while getopts fp:h opt; do
	case $opt in
	    (f)
		force=true
		;;
	    (p)
		parse_prefix $OPTARG
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -gt 0 ]; then
	usage_error "%s: Too many arguments\n" "$script"
    fi
}

parse_prefix() {
    case "$1" in
	($HOME/.local|/opt/*|/usr/local)
	    prefix=$1
	    ;;
	(*)
	    usage_error "%s: %s: Invalid prefix\n" "$script" "$1"
	    ;;
    esac

    if [ ! -d "$prefix/bin" ]; then
	usage_error "%s: %s: Invalid prefix\n" "$script" "$1"
    elif [ ! -w "$prefix/bin" ]; then
	usage_error "%s: %s: Invalid prefix\n" "$script" "$1"
    fi
}

usage() {
    cat <<EOF >&2
Usage: $script [-f] [-p PREFIX]
       $script -h
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf '%s\n' '' >&2
    usage
    exit 2
}

script=$(basename "$0")
parse_arguments "$@"
install_docker_compose

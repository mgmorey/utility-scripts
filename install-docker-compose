#!/bin/sh -eu

# install-docker-compose: install Docker Compose from GitHub
# Copyright (C) 2020  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

BASE_URL=https://github.com/docker/compose/releases

COMPOSE_VERSION=1.28.2
FILENAME=docker-compose

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$script" "$*"
}

clean_up() {
    eval rm -f ${tmpfiles-}
}

compare_versions() (
    assert [ $# -eq 3 ]
    assert [ -n "$3" ]

    if [ -z "$1" -a -z "$2" -o "$3" -le 0 ]; then
	printf '%s\n' 0
    else
	m=$(printf '%s\n' "${1:-0}" | cut -d. -f1)
	n=$(printf '%s\n' "${2:-0}" | cut -d. -f1)
	delta=$((m - n))

	if [ "$delta" -ne 0 ]; then
	    printf '%s\n' $delta
	else
	    printf '%s\n' "$(compare_versions ${1#*.} ${2#*.} $(($3 - 1)))"
	fi
    fi
)

create_temporary_file() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    dir_name=$(dirname "$1")

    if [ ! -d "$dir_name" ]; then
	mkdir ${target_mode:+-m $target_mode }-p "$dir_name"
    fi

    create_tmpfile $(get_mktemp_options "$dir_name" "$(basename "$1")")
}

create_tmpfile() {
    tmpfile=$(mktemp "$@")
    assert [ -n "${tmpfile}" ]
    tmpfiles="${tmpfiles+$tmpfiles }'$tmpfile'"
    trap clean_up EXIT INT QUIT TERM
}

download_file() {
    curl_options=$(get_curl_options)
    url=$(get_url)

    if [ $silent = false ]; then
	printf 'Downloading from %s\n' $(dirname $url)
	print_newline
    fi

    if ! curl $curl_options "$url" -o "$1" || [ ! -s "$1" ]; then
	print_newline
	return 1
    fi
}

get_compose_file() {
    assert [ $# -eq 2 ]
    assert [ -n "$1" ]
    printf '%s/%s/%s%s\n' \
	   "$1" \
	   bin \
	   $FILENAME \
	   "${2:+.$2}"
}

get_curl_options() {
    printf '%s\n' -L -f

    if [ "$bar" = true ]; then
	printf '%s\n' -#
    elif [ $silent = true ]; then
	printf '%s\n' -s
    fi
}

get_filetype() {
    case "$platform" in
	(Windows)
	    printf '%s\n' exe
	    ;;
    esac
}

get_file_version_number() {
    assert [ $# -eq 1 ]

    if [ -n "$1" -a -x "$1" ]; then
	get_version_number "$(get_file_version_string "$1")"
    fi
}

get_file_version_string() {
    assert [ $# -eq 1 ]

    if [ -n "$1" -a -x "$1" ]; then
	get_version_string "$1"
    fi
}

get_hardware() {
    uname -m
}

get_home_prefix() {
    printf '%s\n' "$HOME/.local"
}

get_installed_filenames() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    normalize_path="${script_prefix}normalize-path"

    if [ -x  ]; then
	PATH=$("$normalize_path") which -a $FILENAME
    else
	PATH="$1/bin:$PATH" which -a $FILENAME | sort -u
    fi
}

get_mktemp_options() {
    assert [ $# -eq 2 ]
    assert [ -n "$1" ]
    assert [ -n "$2" ]

    case "$platform" in
	(Darwin)
	    true
	    ;;
	(*)
	    printf '%s\n' -p "$1"
	    ;;
    esac

    printf '%s\n' -t "${2%${filetype+.$filetype}}-XXXXXXXXXX.tmp"
}

get_platform() {
    uname_kernel=$(uname -s)

    case "$uname_kernel" in
	(CYGWIN_NT-*)
	    printf '%s\n' Windows
	    ;;
	(MINGW64_NT-*)
	    printf '%s\n' Windows
	    ;;
	(*)
	    printf '%s\n' $uname_kernel
	    ;;
    esac
}

get_realpath() (
    assert [ $# -ge 1 ]
    realpath=$(which realpath || true)

    if [ -n "$realpath" ]; then
	$realpath "$@"
    else
	for file; do
	    if expr "$file" : '/.*' >/dev/null; then
		printf "%s\n" "$file"
	    else
		printf "%s\n" "$PWD/${file#./}"
	    fi
	done
    fi
)

get_target_mode() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]

    if expr "$(get_realpath "$1")" : \
	    "$(get_realpath "$HOME")/" >/dev/null; then
	printf '%s\n' u=rwx,g=rx
    else
	printf '%s\n' u=rwx,go=rx
    fi
}

get_version_number() {
    expr "${1-}" : 'docker-compose version \([1-9][0-9]*\(\.[0-9][0-9]*\)*\)'
}

get_version_string() {
    assert [ $# -eq 1 ]

    if [ -n "$1" -a -x "$1" ]; then
	"$1" --version || true
    fi
}

get_url() {
    printf '%s/%s/%s/%s-%s-%s%s\n' \
	   $BASE_URL \
	   download \
	   $version \
	   $FILENAME \
	   $platform \
	   $hardware \
	   "${filetype:+.$filetype}"
}

install_compose() {
    target_mode=$(get_target_mode "$target_file")

    if [ $force = true -o "$version_before" != "$version" ]; then
	create_temporary_file "$target_file"

	if download_file "$tmpfile"; then
	    if install_file "$tmpfile" "$target_file"; then
		version_after=$(get_file_version_number "$target_file")
	    fi
	fi
    elif [ $silent = false ]; then
	printf '%s %s is installed as %s\n' \
	       "Docker Compose" \
	       "$version" \
	       "$target_file"
    fi

    print_summary
}

install_docker_compose() {
    hardware=$(get_hardware)
    platform=$(get_platform)

    if [ -z "$prefix" ]; then
	if [ "$(id -u)" -eq 0 ]; then
	    prefix=/usr/local
	else
	    prefix=$(get_home_prefix)
	fi
    fi

    filetype=$(get_filetype)
    target_file=$(get_compose_file "$prefix" "$filetype")
    version_before=$(get_file_version_number "$target_file")
    version_after=

    eval ${action}_compose
}

install_file() {
    assert [ $# -eq 2 ]
    assert [ -n "$1" ]
    assert [ -n "$2" ]

    if [ $silent = false ]; then
	print_newline
	printf 'Installing %s %s as %s\n' \
	       "Docker Compose" \
	       "$version" \
	       "$2"
    fi

    if [ -n "$target_mode" ]; then
	chmod $target_mode "$1"
    fi

    /bin/mv -f "$1" "$2"
}

is_valid_version() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]

    if expr "$1" : '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$'; then
	true
    elif expr "$1" : '[0-9][0-9]*\.[0-9][0-9]*$'; then
	true
    else
	false
    fi >/dev/null
}

parse_arguments() {
    action=install
    bar=false
    force=false
    prefix=
    silent=false
    version=$COMPOSE_VERSION

    while getopts bfp:qsuv:h opt; do
	case $opt in
	    (b)
		bar=true
		;;
	    (f)
		force=true
		;;
	    (p)
		parse_prefix "$OPTARG"
		;;
	    (q)
		action=query
		;;
	    (s)
		silent=true
		;;
	    (u)
		action=uninstall
		;;
	    (v)
		parse_version $OPTARG
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -gt 0 ]; then
	usage_error "%s: Too many arguments\n" "$script"
    fi
}

parse_prefix() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]

    case "$1" in
	("$HOME/.local"|/usr/local)
	    prefix="$1"
	    ;;
	(*)
	    usage_error "%s: %s: Invalid prefix\n" "$script" "$1"
	    ;;
    esac

    if [ ! -d "$prefix/bin" ]; then
	usage_error "%s: %s: Invalid prefix\n" "$script" "$1"
    elif [ ! -w "$prefix/bin" ]; then
	usage_error "%s: %s: Invalid prefix\n" "$script" "$1"
    fi
}

parse_version() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]

    if is_valid_version "$1"; then
	version="$1"
    else
	usage_error "%s: %s: Invalid version\n" "$script" "$1"
    fi
}

print_newline() {
    if [ $silent = false ]; then
	printf '%s\n' ''
    fi
}

print_status() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    version_string=$(get_file_version_string "$1" | cut -d, -f1)

    if [ "$filename${filetype:+.$filetype}" = "$target_file" ]; then
	if [ -z "$version_before" ]; then
	    status=installed
	elif [ "$version_after" = "$version_before" ]; then
	    status=reinstalled
	elif [ -n "$version_after" ]; then
	    delta=$(compare_versions "$version_after" "$version_before" 3)

	    if [ $delta -gt 0 ]; then
		status="upgraded from $version_before"
	    else
		status="downgraded from $version_before"
	    fi
	else
	    status=unchanged
	fi
    else
	status=unchanged
    fi

    printf '%s: %s\n' \
	   "$version_string" \
	   "$1${filetype:+.$filetype}${status:+ ($status)}"
}

print_summary() {
    if [ $silent = true ]; then
	return 0
    elif [ "$(id -u)" -eq 0 ]; then
	return 0
    fi

    if [ $action != query ]; then
	print_newline
    fi

    printf '%s\n' 'Installation Summary:'
    print_newline

    get_installed_filenames "$prefix" | while read filename; do
	print_status "$filename"
    done | sed "s/$FILENAME version/Docker Compose/"
}

query_compose() {
    print_summary
}

uninstall_compose() {
    uninstall_file "$target_file"
    print_summary
}

uninstall_file() {
    if [ $silent = false ]; then
	printf 'Uninstalling %s\n' "$1"
    fi

    /bin/rm -f "$1"
}

usage() {
    cat <<EOF >&2
Usage: $script [-b] [-f] [-p PREFIX] [-s] [-u] [-v VERSION]
       $script -h
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf '%s\n' '' >&2
    usage
    exit 2
}

script=$(basename "$0")

case "$0" in
    (*/*)
	script_dir=$(get_realpath "$(dirname "$0")")
	;;
    (*)
	script_dir=
	;;
esac

script_prefix=${script_dir:+$script_dir/}

script=$(basename "$0")
parse_arguments "$@"
install_docker_compose

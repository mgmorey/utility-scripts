#!/bin/bash -eu

# create-oracle-user: create Oracle user
# Copyright (C) 2020  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

GRANTS="SELECT, INSERT, UPDATE, DELETE"

TEST_SPECIAL_FORMAT='GRANT %s ON system.%s TO %s;\n'
TESTV1_FORMAT='GRANT %s ON system."%s" TO %s;\n'

TEST_SPECIAL_TABLES="CHINESE_UNICODE ENGLISH_UNICODE GERMAN_UNICODE \
JAPANESE_UNICODE SPANISH_UNICODE"

TESTV1_TABLES="Batters Calcs DateBins DateTime Election FischerIris \
Loan NumericBins REI SeattleCrime Securities SpecialData Staples \
Starbucks UTStarcom xy"

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort '%s: Assertion failed: %s\n' "$0" "$*"
}

cat_sql_create_user() {
    assert [ $# -eq 2 ]
    assert [ -n "$1" ]
    assert [ -n "$2" ]
            cat <<EOF
CONNECT sys/$ORACLE_PWD AS sysdba;
CREATE USER $1 IDENTIFIED BY "$2";
GRANT CREATE SESSION TO $1;
GRANT CREATE TABLE TO $1;
GRANT CREATE VIEW TO $1;
EOF

    case "$ORACLE_SID" in
        (TEST_SPE*)
            for table in $TEST_SPECIAL_TABLES; do
                printf "$TEST_SPECIAL_FORMAT" "$GRANTS" "$table" "$1"
            done
            ;;
        (TESTV1)
            for table in $TESTV1_TABLES; do
                printf "$TESTV1_FORMAT" "$GRANTS" "$table" "$1"
            done
            ;;
    esac

    cat <<EOF
EXIT;
EOF
}

create_database_user() {
    assert [ $# -eq 3 ]
    assert [ -n "$1" ]
    assert [ -n "$2" ]
    assert [ -n "$3" ]
    export ORACLE_SID=$(get_system_id "$1")
    logfile=$(get_logfile "$HOME" "$ORACLE_SID")
    printf 'Creating SID %s user %s\n' "$ORACLE_SID" "$2"
    cat_sql_create_user "$2" "$3" | sqlplus /nolog | \
        tee $logfile | filter_sqlplus
}

create_user() {
    : ${ORACLE_BASE?}
    : ${ORACLE_HOME?}
    : ${ORACLE_PWD?}
    unset TWO_TASK
    check_dirs

    if [ -n "${user-}" -a -n "${password-}" ]; then
        for database; do
            create_database_user "$database" "$user" "$password"
        done
    fi
}

filter_sid() {
    tr -cd '[:alnum:]_' | uppercase | cut -c 1-12
}

get_logfile() {
    assert [ $# -eq 2 ]
    assert [ -n "$1" ]
    assert [ -n "$2" ]
    printf '%s/create-user-%s.log\n' "$1" "$2"
}

get_system_id() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    printf '%s\n' "$1" | filter_sid
}

parse_arguments() {
    databases=

    while getopts p:u:h opt; do
	case $opt in
	    (p)
		password=$OPTARG
		;;
	    (u)
		user=$OPTARG
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		printf '%s\n' "" >&2
		usage
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -gt 0 ]; then
        databases="$@"
    fi
}

uppercase() {
    tr '[:lower:]' '[:upper:]'
}

usage() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
	printf "%s\n" "" >&2
    fi

    cat <<-EOF >&2
	Usage: $0 [-u USER] [-p PASSWORD]
	       $0 -h
	EOF
}

script_basename="$(basename "$0")"
script_dirname="$(realpath "$(dirname "$0")")"

. "$script_dirname/oracle-config.sh"
. "$script_dirname/oracle-library.sh"

parse_arguments "$@"
create_user ${databases:-$DATABASES}

#!/bin/sh

# remove-from-path: remove directories from path parameter
# Copyright (C) 2018  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort '%s: Assertion failed: %s\n' "$script" "$*"
}

print_parameter() {
    case "$(basename $shell)" in
	(*bash|ksh*|zsh)
	    printf 'export %s="%s"\n' "$var" "$value"
	    ;;
	(csh|tcsh)
	    printf 'setenv %s "%s";\n' "$var" "$value"
	    ;;
	(fish)
	    printf 'set -x %s "%s";\n' "$var" "$value"
	    ;;
	(*)
	    printf '%s="%s"\n' "$var" "$value"
	    printf 'export %s\n' "$var"
	    ;;
    esac
}

remove_directory() {
    assert [ $# -eq 2 ]
    printf '%s\n' "$2" | sed -e '
s|:'"$1"':|:|g
s|^'"$1"':||
s|:'"$1"'$||
s|^'"$1"'$||
'
}

remove_from_path() {
    shell=$SHELL

    while getopts s:h opt; do
	case $opt in
	    (s)
		case $(basename $OPTARG) in
		    (*bash|ksh*|zsh)
			shell=$OPTARG
			;;
		    (csh|tcsh)
			shell=$OPTARG
			;;
		    (fish)
			shell=$OPTARG
			;;
		    (sh)
			shell=$OPTARG
			;;
		    (*)
			usage_error '%s: %s: Unsupported shell\n' "$script" "$OPTARG"
			;;
		esac
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -lt 2 ]; then
	usage_error '%s: Not enough arguments\n' "$script"
    fi

    var="$1"
    shift

    eval value="\${$var-}"

    for dir; do
	value=$(remove_directory "$dir" "$value")
    done

    print_parameter
}

usage() {
    cat <<-EOF >&2
Usage: $script: [-s SHELL] PARAMETER [DIRECTORY [...]]
       $script: -h
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf '%s\n' '' >&2
    usage
    exit 2
}

script=$(basename "$0")
remove_from_path "$@"

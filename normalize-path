#!/bin/sh -eu

# normalize-path: filter to normalize directories in path
# Copyright (C) 2021  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort '%s: Assertion failed: %s\n' "$script" "$*"
}

configure_platform() {
    realpath_command=$(get_realpath_command)
    realpath_options=$(get_realpath_options "$realpath_command")
    realpath="$realpath_command${realpath_options:+ $realpath_options}"
}

get_realpath() (
    for file; do
	if expr "$file" : '/.*' >/dev/null; then
	    printf '%s\n' "$file"
	else
	    printf '%s\n' "$PWD/${file#./}"
	fi
    done
)

get_realpath_command() {
    if [ -x "${script_prefix}get-realpath" ]; then
	printf '%s\n' "${script_prefix}get-realpath"
    elif [ -x /bin/realpath ]; then
	printf '%s\n' /bin/realpath
    else
	printf '%s\n' get_realpath
    fi
}

get_realpath_options() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]

    if [ "$1" != get_realpath ]; then
	if [ "$quiet" = true ]; then
	    printf '%s\n' -q
	fi
    fi
}

join_dirnames() {
    awk -v ORS=: '{print}' | sed 's/:$/\n/'
}

normalize_path() {
    configure_platform
    printf '%s\n' "$path" | split_path | \
	quote_lines | xargs $realpath | \
	remove_duplicate_dirnames | \
	join_dirnames
}

parse_arguments() {
    error=false
    quiet=false

    while getopts qh opt; do
	case $opt in
	    (q)
		quiet=true
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ "$quiet" = true ]; then
	options=-q
    else
	options=
    fi

    path="${1-$PATH}"
}

quote_lines() {
    awk -v quote="${1-\047}" '{print quote $0 quote}'
}

remove_duplicate_dirnames() {
    if [ "$ID" = windows ]; then
	awk '!_[tolower($0)]++'
    else
	awk '!_[$0]++'
    fi
}

split_path() {
    awk -v RS=: '{print}' | sed '/^$/d'
}

usage() {
    cat <<EOF >&2
Usage: $script [-q] [PATH-VARIABLE]

Normalize directories in colon-delimited path variable.
EOF
}

usage_error() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
    fi

    printf '%s\n' '' >&2
    usage
    exit 2
}

script=$(basename "$0")

case "$0" in
    (*/*)
	script_dir=$(cd "$(dirname "$0")" && pwd)
	;;
    (*)
	script_dir=
	;;
esac

script_prefix=${script_dir:+$script_dir/}

eval $("${script_prefix}get-os-release" -x)
parse_arguments "$@"
normalize_path

#!/bin/sh -eu

# install-scripts: install scripts
# Copyright (C) 2018  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

abort() {
    printf "$@" >&2
    exit 1
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$0" "$*"
}

configure_platform() {
    case "$(uname -s)" in
	(CYGWIN_NT-10.0|MINGW64_NT-10.0-*)
	    default_mode=copy
	    ;;
	(*)
	    default_mode=link
	    ;;
    esac

    case "${mode:-$default_mode}" in
	(copy)
	    install_exec="/bin/install -m u=rwx,go=rx"
	    install_noexec="/bin/install -m u=rw,go=r"
	    ;;
	(link)
	    install_exec="ln -sf"
	    install_noexec="ln -sf"
	    ;;
    esac
}

get_realpath() (
    assert [ $# -ge 1 ]
    realpath=$(which realpath)

    if [ -n "$realpath" ]; then
	$realpath "$@"
    else
	for file; do
	    if expr "$file" : '/.*' >/dev/null; then
		printf "%s\n" "$file"
	    else
		printf "%s\n" "$PWD/${file#./}"
	    fi
	done
    fi
)

get_libraries() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    find "$1" \
	 -maxdepth 1 \
	 -name '*.sh' \
	 -type f
}

get_scripts() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    find "$1" \
	 -maxdepth 1 \
	 -name '[a-z]*' \
	 ! -name "$(basename "$0")" \
	 ! -name '*.sh' \
	 ! -name '*~' \
	 -type f
}

get_symlinks() {
    assert [ $# -eq 1 ]
    assert [ -n "$1" ]
    find "$1" \
	 -maxdepth 1 \
	 -type l
}

install_script_files() {
    libraries="$(get_libraries "$source_dir")"
    scripts="$(get_scripts "$source_dir")"

    if [ -n "$libraries" ]; then
	$install_noexec $libraries "$target_dir"
    fi

    if [ -n "$scripts" ]; then
	$install_exec $scripts "$target_dir"
    fi
}

install_scripts() {
    configure_platform
    source_dir="$(get_realpath "$(pwd)")"

    if [ "$(basename "$source_dir")" != utility-scripts ]; then
	abort "%s: Please change to the source directory and try again\n" "$0"
    fi

    if [ ! -e "$target_dir" ]; then
	mkdir -p "$target_dir"
    fi

    install_script_files
    remove_broken_links
}

parse_arguments() {
    mode=

    while getopts hcl opt; do
	case $opt in
	    (h)
		usage
		exit 0
		;;
	    (c)
		mode=copy
		;;
	    (l)
		mode=link
		;;
	    (\?)
		printf "%s\n" "" >&2
		usage
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))

    if [ $# -gt 0 ]; then
	target_dir="$1"
    else
	target_dir="$HOME/bin"
    fi
}

remove_broken_links() {
    cd "$target_dir"
    symlinks="$(get_symlinks .)"

    for link in $symlinks; do
	if [ ! -e $link ]; then
	    printf "Removing broken link: %s\n" "$link"
	    /bin/rm -f "$link"
	fi
    done
}

usage() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
	printf "%s\n" "" >&2
    fi

    cat <<-EOF >&2
	Usage: $0 [-c | -l] [TARGET]
	       $0 -h
	EOF
}

parse_arguments "$@"
install_scripts

#!/bin/sh -eu

# configure-emacs: download and configure emacs
# Copyright (C) 2018  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

EMACS_VERSION=26.3

GNU_BASE_URL=https://mirrors.ocf.berkeley.edu/gnu

EMACS_PREFIX=/usr/local
LOCAL_PREFIX=/usr/local
OPENCSW_PREFIX=/opt/csw

abort() {
    printf "$@" >&2
    exit 1
}

abort_invalid_prefix() {
    usage "%s: invalid prefix -- %s\n" "$0" "$*"
    exit 2
}

abort_invalid_toolkit() {
    usage "%s: invalid toolkit -- %s\n" "$0" "$*"
    exit 2
}

abort_invalid_version() {
    usage "%s: invalid version -- %s\n" "$0" "$*"
    exit 2
}

abort_not_supported() {
    abort "%s: %s: %s not supported\n" "$0" "$PRETTY_NAME" "$*"
}

abort_too_many_arguments() {
    usage "%s: too many arguments -- %s\n" "$0" "$*"
    exit 2
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$0" "$*"
}

clean_build() {
    if [ -r Makefile ]; then
	make distclean
    fi
}

configure_compiler_cc() {
    cc=cc
    cflags=-m64
    cppflags="-I$incdir"
    ldflags="-L$libdir -R$libdir"
}

configure_compiler_gcc() {
    cc=gcc
    cflags=-m64
    cppflags="-I$incdir"
    ldflags="-L$libdir -R$libdir"
}

configure_emacs() {
    validate_platform
    configure_platform
    parse_arguments "$@"
    basename=emacs-$EMACS_VERSION

    archive_dir="$HOME/Downloads/GNU"
    build_dir="$HOME/Documents/build/$basename"
    src_dir="$HOME/Documents/src/GNU/$basename"

    command=$(get_command $src_dir/configure)
    filename=$basename.tar.xz

    pathname=$archive_dir/$filename

    mkdir -p "$build_dir" "$(dirname "$src_dir")" "$archive_dir"
    download_archive
    extract_files
    cd "$build_dir"

    if [ "$use_force" = true ]; then
	clean_build
    elif [ ! -r config.status ]; then
	:
    else
	exit 0
    fi

    printf "%s\n" "$command"
    eval $command
}

configure_platform() {
    for id in $ID $ID_LIKE; do
	case "$id" in
	    (illumos)
		configure_unix_illumos
		configure_compiler_gcc
		break
		;;
	    (solaris)
		configure_unix_solaris
		configure_compiler_cc
		break
		;;
	esac
    done

    if [ -n "${libgif-}" ] && [ ! -x $libgif ]; then
	abort "%s: %s: No such shared object\n" "$0" "$libgif"
    else
	break
    fi
}

configure_unix_illumos() {
    incdir=$LOCAL_PREFIX/include
    libdir=$LOCAL_PREFIX/lib
    libgif=$libdir/libgif.so
}

configure_unix_solaris() {
    incdir=$OPENCSW_PREFIX/include
    libdir=$OPENCSW_PREFIX/lib/amd64
    libgif=$libdir/libgif.so
    with_gsettings=no
    with_x_toolkit=lucid
}

download_archive() {
    url=$GNU_BASE_URL/emacs/$filename

    if [ ! -r "$pathname" ]; then
	cd "$archive_dir"
	wget $url
    fi

}

extract_files() {
    if [ ! -r "$src_dir/configure" ]; then
	cd "$(dirname "$src_dir")"
	tar -xvf "$pathname"
    fi
}

get_command() {
    options=$(get_options)
    printf '%s %s' "$1" "$options"

    if [ -n "${cc-}" ]; then
	printf ' CC=\"%s\"' "${cc-}"
    fi

    if [ -n "${cflags-}" ]; then
	printf ' CFLAGS=\"%s\"' "${cflags-}"
    fi

    if [ -n "${cppflags-}" ]; then
	printf ' CPPFLAGS=\"%s\"' "${cppflags-}"
    fi

    if [ -n "${cppflags-}" ]; then
	printf ' LDFLAGS=\"%s\"' "${ldflags-}"
    fi

    printf '\n'
}

get_options() {
    options="${options:+$options }--with-gnutls=yes"

    if [ "${with_gsettings-yes}" = no ]; then
	options="${options:+$options }--without-gconf"
	options="${options:+$options }--without-gsettings"
    fi

    if [ -n "${with_x_toolkit-}" ]; then
	options="${options:+$options }--with-x-toolkit=$with_x_toolkit"
    fi

    if [ -n "${with_xwidgets-}" ]; then
	options="${options:+$options }--with-xwidgets=$with_xwidgets"
    fi

    if [ -n "${options:-}" ]; then
	printf "%s\n" "$options"
    fi
}

get_realpath() (
    assert [ $# -ge 1 ]
    realpath=$(which realpath)

    if [ -n "$realpath" ]; then
	$realpath "$@"
    else
	for file; do
	    if expr "$file" : '/.*' >/dev/null; then
		printf "%s\n" "$file"
	    else
		printf "%s\n" "$PWD/${file#./}"
	    fi
	done
    fi
)

parse_arguments() {
    emacs_prefix=$EMACS_PREFIX
    emacs_version=$EMACS_VERSION
    use_force=false

    while getopts fglnp:st:v:xh opt; do
	case $opt in
	    (f)
		use_force=true
		;;
	    (g)
		cc=gcc
		;;
	    (l)
		with_x_toolkit=lucid
		;;
	    (n)
		with_x_toolkit=no
		;;
	    (p)
		case $OPTARG in
		    ($HOME|/opt/*|/usr|/usr/local)
			if [ -d $OPTARG ]; then
			    emacs_prefix=$OPTARG
			else
			    abort_invalid_prefix $OPTARG
			fi
			;;
		    (*)
			abort_invalid_prefix $OPTARG
			;;
		esac
		;;
	    (v)
		case $OPTARG in
		    (2[6789].[0-9]|2[6789].[1-9][0-9])
			emacs_version=$OPTARG
			;;
		    (*)
			abort_invalid_version $OPTARG
			;;
		esac
		;;
	    (s)
		with_gsettings=yes
		;;
	    (t)
		case $OPTARG in
		    (athena|lucid|gtk|gtk2|gtk3)
			with_x_toolkit=$OPTARG
			;;
		    (*)
			abort_invalid_toolkit $OPTARG
		esac
		;;
	    (x)
		with_xwidgets=yes
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		printf "%s\n" "" >&2
		usage
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))
}

usage() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
	printf "%s\n" "" >&2
    fi

    cat <<-EOF >&2
	Usage: $0 [-f][-g][-l][-n][-p PREFIX][-s][-t TOOLKIT][-v VERSION][-x]
	       $0 -h
	EOF
}

validate_platform() {
    for id in $ID $ID_LIKE; do
	case "$id" in
	    (cygwin)
		return
		;;
	    (debian)
		return
		;;
	    (opensuse)
		return
		;;
	    (rhel|fedora)
		return
		;;
	    (freebsd)
		return
		;;
	    (solaris)
		return
		;;
	esac
    done

    abort_not_supported "Operating system"
}

script_dir=$(get_realpath "$(dirname "$0")")

eval $("$script_dir/get-os-release" -x)

configure_emacs "$@"

#!/bin/sh -eu

# configure-emacs: download and configure emacs
# Copyright (C) 2018  "Michael G. Morey" <mgmorey@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

GNU_BASE_URL=https://mirrors.ocf.berkeley.edu/gnu
OPENCSW_PREFIX=/opt/csw

if [ -z "${EMACS_PREFIX-}" ]; then
    EMACS_PREFIX=/usr/local
fi

if [ -z "${EMACS_VERSION-}" ]; then
    EMACS_VERSION=26.3
fi

abort() {
    printf "$@" >&2
    exit 1
}

abort_invalid_prefix() {
    usage "%s: invalid prefix -- %s\n" "$0" "$*"
    exit 2
}

abort_invalid_version() {
    usage "%s: invalid version -- %s\n" "$0" "$*"
    exit 2
}

abort_not_supported() {
    abort "%s: %s: %s not supported\n" "$0" "$PRETTY_NAME" "$*"
}

abort_too_many_arguments() {
    usage "%s: too many arguments -- %s\n" "$0" "$*"
    exit 2
}

assert() {
    "$@" || abort "%s: Assertion failed: %s\n" "$0" "$*"
}

configure_emacs() {
    validate_platform
    parse_arguments "$@"
    basename=emacs-$EMACS_VERSION

    archive_dir="$HOME/Downloads/GNU"
    build_dir="$HOME/Documents/build/$basename"
    src_dir="$HOME/Documents/src/GNU/$basename"

    command=$(get_command $src_dir/configure)
    filename=$basename.tar.xz

    pathname=$archive_dir/$filename

    mkdir -p "$build_dir" "$(dirname "$src_dir")" "$archive_dir"
    download_archive
    extract_files

    if [ "$is_forcing" = true ]; then
	/bin/rm -f "$build_dir/config.status"
    elif [ -r "$build_dir/config.status" ]; then
	exit 0
    fi

    printf "%s\n" "$command"
    cd "$build_dir"
    eval $command
}

download_archive() {
    url=$GNU_BASE_URL/emacs/$filename

    if [ ! -r "$pathname" ]; then
	cd "$archive_dir"
	wget $url
    fi

}

extract_files() {
    if [ ! -r "$src_dir/configure" ]; then
	cd "$(dirname "$src_dir")"
	tar -xvf "$pathname"
    fi
}

get_command() {
    if [ -z "${compiler-}" ]; then
	compiler="$(get_compiler)"
    fi

    cppflags=$(get_cppflags)
    ldflags=$(get_ldflags)
    options=$(get_options)
    printf '%s %s' "$1" "$options"

    if [ -n "${compiler-}" ]; then
	printf ' CC=\"%s\"' "${compiler-}"
    fi

    if [ -n "${cppflags-}" ]; then
	printf ' CPPFLAGS=\"%s\"' "${cppflags-}"
    fi

    if [ -n "${cppflags-}" ]; then
	printf ' LDFLAGS=\"%s\"' "${ldflags-}"
    fi

    printf '\n'
}

get_compiler() {
    compiler=

    for id in $ID $ID_LIKE; do
    	case "$id" in
    	    (illumos)
    		break
    		;;
    	    (solaris)
    		break
    		;;
    	esac
    done

    if [ -n "${compiler-}" ]; then
	printf "%s\n" "compiler"
    fi
}

get_cppflags() {
    cppflags=

    for id in $ID $ID_LIKE; do
    	case "$id" in
    	    (illumos)
    		break
    		;;
    	    (solaris)
		dir=$OPENCSW_PREFIX/include
    		cppflags="-I$dir"
    		break
    		;;
    	esac
    done

    printf "%s\n" "${cppflags:-}"
}

get_ldflags() {
    ldflags=

    for id in $ID $ID_LIKE; do
    	case "$id" in
    	    (illumos)
    		break
    		;;
    	    (solaris)
		dir=$OPENCSW_PREFIX/lib/amd64
    		ldflags="-L$dir -R$dir"
    		break
    		;;
    	esac
    done

    printf "%s\n" "${ldflags:-}"
}

get_libgif_file() {
    file=

    for id in $ID $ID_LIKE; do
    	case "$id" in
    	    (illumos)
    		break
    		;;
    	    (solaris)
		file=$OPENCSW_PREFIX/lib/amd64/libgif.so
    		break
    		;;
    	esac
    done

    if [ -n "${file-}" ]; then
	printf "%s\n" "$file"
    fi
}

get_options() {
    options=
    options="${options:+$options }--with-gnutls=yes"

    if [ "$is_using_x_toolkit" = false ]; then
	options="${options:+$options }--with-x-toolkit=no"
    fi

    if [ "$is_using_xwidgets" = true ]; then
	options="${options:+$options }--with-xwidgets"
    fi

    if [ -n "${options:-}" ]; then
	printf "%s\n" "$options"
    fi
}

get_realpath() (
    assert [ $# -ge 1 ]
    realpath=$(which realpath)

    if [ -n "$realpath" ]; then
	$realpath "$@"
    else
	for file; do
	    if expr "$file" : '/.*' >/dev/null; then
		printf "%s\n" "$file"
	    else
		printf "%s\n" "$PWD/${file#./}"
	    fi
	done
    fi
)

parse_arguments() {
    compiler=
    is_forcing=false
    is_using_x_toolkit=true
    is_using_xwidgets=false
    emacs_prefix=$EMACS_PREFIX
    emacs_version=$EMACS_VERSION

    while getopts fgnp:v:xh opt; do
	case $opt in
	    (f)
		is_forcing=true
		;;
	    (g)
		compiler=gcc
		;;
	    (n)
		is_using_x_toolkit=false
		;;
	    (p)
		case $OPTARG in
		    ($HOME|/opt/*|/usr|/usr/local)
			if [ -d $OPTARG ]; then
			    emacs_prefix=$OPTARG
			else
			    abort_invalid_prefix $OPTARG
			fi
			;;
		    (*)
			abort_invalid_prefix $OPTARG
			;;
		esac
		;;
	    (v)
		case $OPTARG in
		    (2[6789].[0-9]|2[6789].[1-9][0-9])
			emacs_version=$OPTARG
			;;
		    (*)
			abort_invalid_version $OPTARG
			;;
		esac
		;;
	    (x)
		is_using_xwidgets=true
		;;
	    (h)
		usage
		exit 0
		;;
	    (\?)
		printf "%s\n" "" >&2
		usage
		exit 2
		;;
	esac
    done

    shift $(($OPTIND - 1))
}

usage() {
    if [ $# -gt 0 ]; then
	printf "$@" >&2
	printf "%s\n" "" >&2
    fi

    cat <<-EOF >&2
	Usage: $0 [-f][-g][-n][-p PREFIX][-v VERSION][-x]
	       $0 -h
	EOF
}

validate_platform() {
    for id in $ID $ID_LIKE; do
	case "$id" in
	    (debian)
		return
		;;
	    (opensuse)
		return
		;;
	    (rhel|fedora)
		return
		;;
	    (freebsd)
		return
		;;
	    (solaris)
		libgif=$(get_libgif_file)

		if [ -n "${libgif-}" -a ! -x $libgif ]; then
		    abort "%s: %s: No such shared object\n" "$0" "$libgif"
		else
		    return 0
		fi
		;;
	esac
    done

    abort_not_supported "Operating system"
}

script_dir=$(get_realpath "$(dirname "$0")")

eval $("$script_dir/get-os-release" -x)

configure_emacs "$@"
